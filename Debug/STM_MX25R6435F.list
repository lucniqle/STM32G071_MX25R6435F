
STM_MX25R6435F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800586c  0800586c  0000686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f44  08005f44  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f48  08005f48  00006f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005f4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000006c  08005fb8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  200002d8  08005fb8  000072d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e950  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  000159e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00017eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000962  00000000  00000000  00018ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dd4  00000000  00000000  00019442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe22  00000000  00000000  00033216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dbce  00000000  00000000  00043038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003268  00000000  00000000  000e0c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e3eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005854 	.word	0x08005854

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08005854 	.word	0x08005854

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_Init>:
/**
* @brief Initiates the memory for use
* @param None
* @retval Status
*/
MX_Err MX_Init(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	uint8_t command = 0;
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

	Set_CS_Pin(GPIO_PIN_RESET);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fb95 	bl	8000d6c <Set_CS_Pin>
	command = RESET_ENABLE_CMD;
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	2266      	movs	r2, #102	@ 0x66
 8000646:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 8000648:	23fa      	movs	r3, #250	@ 0xfa
 800064a:	009a      	lsls	r2, r3, #2
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fbad 	bl	8000db0 <SPI_Send>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d008      	beq.n	800066c <MX_Init+0x3c>
		printf("Error sending command reset enable to MX\r\n");
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_Init+0x88>)
 800065c:	0018      	movs	r0, r3
 800065e:	f004 fa61 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_RESET);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fb82 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e021      	b.n	80006b0 <MX_Init+0x80>
	}
	Set_CS_Pin(GPIO_PIN_SET);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fb7d 	bl	8000d6c <Set_CS_Pin>

	Delay_ms(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fb8f 	bl	8000d96 <Delay_ms>

	Set_CS_Pin(GPIO_PIN_RESET);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fb77 	bl	8000d6c <Set_CS_Pin>
	command = RESET_MEMORY_CMD;
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2299      	movs	r2, #153	@ 0x99
 8000682:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 8000684:	23fa      	movs	r3, #250	@ 0xfa
 8000686:	009a      	lsls	r2, r3, #2
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	2101      	movs	r1, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb8f 	bl	8000db0 <SPI_Send>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d008      	beq.n	80006a8 <MX_Init+0x78>
		printf("Error sending command reset MX to MX\r\n");
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_Init+0x8c>)
 8000698:	0018      	movs	r0, r3
 800069a:	f004 fa43 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_RESET);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 fb64 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e003      	b.n	80006b0 <MX_Init+0x80>
	}
	Set_CS_Pin(GPIO_PIN_SET);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fb5f 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	0800586c 	.word	0x0800586c
 80006bc:	08005898 	.word	0x08005898

080006c0 <MX_Get_ID>:
/**
* @brief Get memory chip ID
* @param None
* @retval Status - ID
*/
MX_Err MX_Get_ID(uint8_t *data){
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint8_t command = 0;
 80006c8:	240f      	movs	r4, #15
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]

	Set_CS_Pin(GPIO_PIN_RESET);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fb4b 	bl	8000d6c <Set_CS_Pin>
	command = READ_ID_CMD;
 80006d6:	0021      	movs	r1, r4
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	229f      	movs	r2, #159	@ 0x9f
 80006dc:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 80006de:	23fa      	movs	r3, #250	@ 0xfa
 80006e0:	009a      	lsls	r2, r3, #2
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2101      	movs	r1, #1
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fb62 	bl	8000db0 <SPI_Send>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d008      	beq.n	8000702 <MX_Get_ID+0x42>
		printf("Error sending command read ID to MX\r\n");
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_Get_ID+0x78>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f004 fa16 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 fb37 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e015      	b.n	800072e <MX_Get_ID+0x6e>
	}
	else{
		if(SPI_Receive(data, 3, 1000) != HAL_OK){
 8000702:	23fa      	movs	r3, #250	@ 0xfa
 8000704:	009a      	lsls	r2, r3, #2
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2103      	movs	r1, #3
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fb68 	bl	8000de0 <SPI_Receive>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d008      	beq.n	8000726 <MX_Get_ID+0x66>
			printf("Error receiving ID\r\n");
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_Get_ID+0x7c>)
 8000716:	0018      	movs	r0, r3
 8000718:	f004 fa04 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fb25 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e003      	b.n	800072e <MX_Get_ID+0x6e>
		}
	}
	Set_CS_Pin(GPIO_PIN_SET);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fb20 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b005      	add	sp, #20
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	080058c0 	.word	0x080058c0
 800073c:	080058e8 	.word	0x080058e8

08000740 <MX_Get_Status>:
/**
* @brief Get memory status register
* @param None
* @retval Status - Status Register
*/
MX_Err MX_Get_Status(uint8_t *data){
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	uint8_t command = 0;
 8000748:	240f      	movs	r4, #15
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

	Set_CS_Pin(GPIO_PIN_RESET);
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fb0b 	bl	8000d6c <Set_CS_Pin>
	command = READ_STATUS_REG_CMD;
 8000756:	0021      	movs	r1, r4
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2205      	movs	r2, #5
 800075c:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 800075e:	23fa      	movs	r3, #250	@ 0xfa
 8000760:	009a      	lsls	r2, r3, #2
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fb22 	bl	8000db0 <SPI_Send>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d008      	beq.n	8000782 <MX_Get_Status+0x42>
		printf("Error sending command get status to MX\r\n");
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_Get_Status+0x78>)
 8000772:	0018      	movs	r0, r3
 8000774:	f004 f9d6 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 faf7 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e015      	b.n	80007ae <MX_Get_Status+0x6e>
	}
	else{
		if(SPI_Receive(data, 1, 1000) != HAL_OK){
 8000782:	23fa      	movs	r3, #250	@ 0xfa
 8000784:	009a      	lsls	r2, r3, #2
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2101      	movs	r1, #1
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fb28 	bl	8000de0 <SPI_Receive>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d008      	beq.n	80007a6 <MX_Get_Status+0x66>
			printf("Error receiving status\r\n");
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_Get_Status+0x7c>)
 8000796:	0018      	movs	r0, r3
 8000798:	f004 f9c4 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fae5 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e003      	b.n	80007ae <MX_Get_Status+0x6e>
		}
	}
	Set_CS_Pin(GPIO_PIN_SET);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fae0 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b005      	add	sp, #20
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	080058fc 	.word	0x080058fc
 80007bc:	08005924 	.word	0x08005924

080007c0 <MX_Enable_Write>:
/**
* @brief Enable memory for write operation
* @param None
* @retval Status
*/
MX_Err MX_Enable_Write(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	uint8_t command = 0;
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]

	Set_CS_Pin(GPIO_PIN_RESET);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 facd 	bl	8000d6c <Set_CS_Pin>
	command = WRITE_ENABLE_CMD;
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2206      	movs	r2, #6
 80007d6:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 80007d8:	23fa      	movs	r3, #250	@ 0xfa
 80007da:	009a      	lsls	r2, r3, #2
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fae5 	bl	8000db0 <SPI_Send>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d008      	beq.n	80007fc <MX_Enable_Write+0x3c>
		printf("Error sending command enable write to MX\r\n");
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_Enable_Write+0x4c>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f004 f999 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 faba 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e003      	b.n	8000804 <MX_Enable_Write+0x44>
	}
	Set_CS_Pin(GPIO_PIN_SET);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fab5 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}
 800080c:	0800593c 	.word	0x0800593c

08000810 <MX_Available>:
/**
* @brief Check if memory is available for next operation
* @param None
* @retval Available(true)/Not Available (false)
*/
bool MX_Available(void){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint8_t data;

	MX_Get_Status(&data);
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ff91 	bl	8000740 <MX_Get_Status>
	if((data & MX25R6435F_SR_WIP) == 0x01){
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	001a      	movs	r2, r3
 8000824:	2301      	movs	r3, #1
 8000826:	4013      	ands	r3, r2
 8000828:	d001      	beq.n	800082e <MX_Available+0x1e>
		return false;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <MX_Available+0x20>
	}
	return true;
 800082e:	2301      	movs	r3, #1
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <MX_Write_Enabled>:
/**
* @brief Check if memory is available for write operation
* @param None
* @retval Available(true)/Not Available (false)
*/
bool MX_Write_Enabled(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	uint8_t data;

	MX_Get_Status(&data);
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ff7d 	bl	8000740 <MX_Get_Status>
	if((data & MX25R6435F_SR_WEL) != 0x02){
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001a      	movs	r2, r3
 800084c:	2302      	movs	r3, #2
 800084e:	4013      	ands	r3, r2
 8000850:	d101      	bne.n	8000856 <MX_Write_Enabled+0x1e>
		return false;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <MX_Write_Enabled+0x20>
	}
	return true;
 8000856:	2301      	movs	r3, #1
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_Config_Read>:
/**
* @brief Read memory configuration registers
* @param None
* @retval Status - Configuration registers
*/
MX_Err MX_Config_Read(uint8_t *data){
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	uint8_t command = 0;
 8000868:	240f      	movs	r4, #15
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]

	Set_CS_Pin(GPIO_PIN_RESET);
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fa7b 	bl	8000d6c <Set_CS_Pin>
	command = READ_CFG_REG_CMD;
 8000876:	0021      	movs	r1, r4
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2215      	movs	r2, #21
 800087c:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 800087e:	23fa      	movs	r3, #250	@ 0xfa
 8000880:	009a      	lsls	r2, r3, #2
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2101      	movs	r1, #1
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fa92 	bl	8000db0 <SPI_Send>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d008      	beq.n	80008a2 <MX_Config_Read+0x42>
		printf("Error sending command read cfg to MX\r\n");
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_Config_Read+0x78>)
 8000892:	0018      	movs	r0, r3
 8000894:	f004 f946 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fa67 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e015      	b.n	80008ce <MX_Config_Read+0x6e>
	}
	else{
		if(SPI_Receive(data, 2, 1000) != HAL_OK){
 80008a2:	23fa      	movs	r3, #250	@ 0xfa
 80008a4:	009a      	lsls	r2, r3, #2
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2102      	movs	r1, #2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fa98 	bl	8000de0 <SPI_Receive>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d008      	beq.n	80008c6 <MX_Config_Read+0x66>
			printf("Error receiving cfg\r\n");
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_Config_Read+0x7c>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f004 f934 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fa55 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e003      	b.n	80008ce <MX_Config_Read+0x6e>
		}
	}
	Set_CS_Pin(GPIO_PIN_SET);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fa50 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b005      	add	sp, #20
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	08005994 	.word	0x08005994
 80008dc:	080059bc 	.word	0x080059bc

080008e0 <MX_Config_Write>:
* @brief Write configuration to memory
* @param status: status register
* @param cfg: configuration registers
* @retval Available(true)/Not Available (false)
*/
MX_Err MX_Config_Write(uint8_t status, uint16_t cfg){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	0002      	movs	r2, r0
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	1c0a      	adds	r2, r1, #0
 80008f0:	801a      	strh	r2, [r3, #0]
	uint8_t command = 0;
 80008f2:	230f      	movs	r3, #15
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	uint8_t data[3] = {status, (cfg >> 8) & 0xFF, cfg & 0xFF};
 80008fa:	210c      	movs	r1, #12
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	1dfa      	adds	r2, r7, #7
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2da      	uxtb	r2, r3
 800090e:	187b      	adds	r3, r7, r1
 8000910:	705a      	strb	r2, [r3, #1]
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	187b      	adds	r3, r7, r1
 800091a:	709a      	strb	r2, [r3, #2]

	while(!MX_Available()){
 800091c:	e006      	b.n	800092c <MX_Config_Write+0x4c>
		printf("MX Busy\r\n");
 800091e:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <MX_Config_Write+0xf8>)
 8000920:	0018      	movs	r0, r3
 8000922:	f004 f8ff 	bl	8004b24 <puts>
		Delay_ms(10);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 fa35 	bl	8000d96 <Delay_ms>
	while(!MX_Available()){
 800092c:	f7ff ff70 	bl	8000810 <MX_Available>
 8000930:	0003      	movs	r3, r0
 8000932:	001a      	movs	r2, r3
 8000934:	2301      	movs	r3, #1
 8000936:	4053      	eors	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1ef      	bne.n	800091e <MX_Config_Write+0x3e>
	}

	if(MX_Enable_Write() != MX_OK){
 800093e:	f7ff ff3f 	bl	80007c0 <MX_Enable_Write>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d005      	beq.n	8000952 <MX_Config_Write+0x72>
		printf("Error setting write");
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_Config_Write+0xfc>)
 8000948:	0018      	movs	r0, r3
 800094a:	f004 f885 	bl	8004a58 <iprintf>
		return MX_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e03e      	b.n	80009d0 <MX_Config_Write+0xf0>
	}

	if(!MX_Write_Enabled()){
 8000952:	f7ff ff71 	bl	8000838 <MX_Write_Enabled>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	2301      	movs	r3, #1
 800095c:	4053      	eors	r3, r2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <MX_Config_Write+0x90>
		printf("MX write not available\r\n");
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_Config_Write+0x100>)
 8000966:	0018      	movs	r0, r3
 8000968:	f004 f8dc 	bl	8004b24 <puts>
		return MX_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e02f      	b.n	80009d0 <MX_Config_Write+0xf0>
	}

	Set_CS_Pin(GPIO_PIN_RESET);
 8000970:	2000      	movs	r0, #0
 8000972:	f000 f9fb 	bl	8000d6c <Set_CS_Pin>
	command = WRITE_STATUS_CFG_REG_CMD;
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 800097e:	23fa      	movs	r3, #250	@ 0xfa
 8000980:	009a      	lsls	r2, r3, #2
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2101      	movs	r1, #1
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fa12 	bl	8000db0 <SPI_Send>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d008      	beq.n	80009a2 <MX_Config_Write+0xc2>
		printf("Error sending command write cfg reg to MX\r\n");
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_Config_Write+0x104>)
 8000992:	0018      	movs	r0, r3
 8000994:	f004 f8c6 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 8000998:	2001      	movs	r0, #1
 800099a:	f000 f9e7 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e016      	b.n	80009d0 <MX_Config_Write+0xf0>
	}
	if(SPI_Send(data, 3, 1000) != HAL_OK){
 80009a2:	23fa      	movs	r3, #250	@ 0xfa
 80009a4:	009a      	lsls	r2, r3, #2
 80009a6:	230c      	movs	r3, #12
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	2103      	movs	r1, #3
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 f9ff 	bl	8000db0 <SPI_Send>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d008      	beq.n	80009c8 <MX_Config_Write+0xe8>
		printf("Error sending cfg to MX\r\n");
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_Config_Write+0x108>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f004 f8b3 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 f9d4 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e003      	b.n	80009d0 <MX_Config_Write+0xf0>
	}
	Set_CS_Pin(GPIO_PIN_SET);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 f9cf 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 80009ce:	2300      	movs	r3, #0

}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	080059d4 	.word	0x080059d4
 80009dc:	080059e0 	.word	0x080059e0
 80009e0:	080059f4 	.word	0x080059f4
 80009e4:	08005a0c 	.word	0x08005a0c
 80009e8:	08005a38 	.word	0x08005a38

080009ec <MX_Erase_Sector>:
/**
* @brief Erase sector (0x1000)
* @param address: Sector address
* @retval Status
*/
MX_Err MX_Erase_Sector(uint32_t address){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t command = 0;
 80009f4:	230f      	movs	r3, #15
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
	uint8_t addr[3] = {(address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	0c1b      	lsrs	r3, r3, #16
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	210c      	movs	r1, #12
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	705a      	strb	r2, [r3, #1]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	709a      	strb	r2, [r3, #2]

	if(address >= (MX25R6435F_FLASH_SIZE / MX25R6435F_SECTOR_SIZE)){
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	2380      	movs	r3, #128	@ 0x80
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d30e      	bcc.n	8000a42 <MX_Erase_Sector+0x56>
		printf("Invalid Sector Addr: %ld\r\n", address);
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4b32      	ldr	r3, [pc, #200]	@ (8000af0 <MX_Erase_Sector+0x104>)
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f004 f814 	bl	8004a58 <iprintf>
		return MX_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e058      	b.n	8000ae6 <MX_Erase_Sector+0xfa>
	}

	while(!MX_Available()){
		printf("MX Busy\r\n");
 8000a34:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <MX_Erase_Sector+0x108>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f004 f874 	bl	8004b24 <puts>
		Delay_ms(10);
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f000 f9aa 	bl	8000d96 <Delay_ms>
	while(!MX_Available()){
 8000a42:	f7ff fee5 	bl	8000810 <MX_Available>
 8000a46:	0003      	movs	r3, r0
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	4053      	eors	r3, r2
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1ef      	bne.n	8000a34 <MX_Erase_Sector+0x48>
	}

	if(MX_Enable_Write() != MX_OK){
 8000a54:	f7ff feb4 	bl	80007c0 <MX_Enable_Write>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d005      	beq.n	8000a68 <MX_Erase_Sector+0x7c>
		printf("Error setting write");
 8000a5c:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <MX_Erase_Sector+0x10c>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f003 fffa 	bl	8004a58 <iprintf>
		return MX_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e03e      	b.n	8000ae6 <MX_Erase_Sector+0xfa>
	}

	if(!MX_Write_Enabled()){
 8000a68:	f7ff fee6 	bl	8000838 <MX_Write_Enabled>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2301      	movs	r3, #1
 8000a72:	4053      	eors	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <MX_Erase_Sector+0x9a>
		printf("MX write not available\r\n");
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_Erase_Sector+0x110>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f004 f851 	bl	8004b24 <puts>
		return MX_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e02f      	b.n	8000ae6 <MX_Erase_Sector+0xfa>
	}

	Set_CS_Pin(GPIO_PIN_RESET);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f970 	bl	8000d6c <Set_CS_Pin>
	command = SECTOR_ERASE_CMD;
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2220      	movs	r2, #32
 8000a92:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 8000a94:	23fa      	movs	r3, #250	@ 0xfa
 8000a96:	009a      	lsls	r2, r3, #2
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 f987 	bl	8000db0 <SPI_Send>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d008      	beq.n	8000ab8 <MX_Erase_Sector+0xcc>
		printf("Error sending command erase sector to MX\r\n");
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_Erase_Sector+0x114>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f004 f83b 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 f95c 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e016      	b.n	8000ae6 <MX_Erase_Sector+0xfa>
	}
	if(SPI_Send(addr, 3, 1000) != HAL_OK){
 8000ab8:	23fa      	movs	r3, #250	@ 0xfa
 8000aba:	009a      	lsls	r2, r3, #2
 8000abc:	230c      	movs	r3, #12
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f974 	bl	8000db0 <SPI_Send>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d008      	beq.n	8000ade <MX_Erase_Sector+0xf2>
		printf("Error sending erases sector addr to MX\r\n");
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <MX_Erase_Sector+0x118>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 f828 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 f949 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e003      	b.n	8000ae6 <MX_Erase_Sector+0xfa>
	}
	Set_CS_Pin(GPIO_PIN_SET);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 f944 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	08005a54 	.word	0x08005a54
 8000af4:	080059d4 	.word	0x080059d4
 8000af8:	080059e0 	.word	0x080059e0
 8000afc:	080059f4 	.word	0x080059f4
 8000b00:	08005a70 	.word	0x08005a70
 8000b04:	08005a9c 	.word	0x08005a9c

08000b08 <MX_Read_Bytes>:
* @brief Read bytes from memory
* @param address: Starting read address
* @param size: Size to read
* @retval Status - Data Read
*/
MX_Err MX_Read_Bytes(uint8_t *data, uint32_t address, uint32_t size){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	uint8_t command = 0;
 8000b14:	2317      	movs	r3, #23
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	uint32_t addr = address;
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	613b      	str	r3, [r7, #16]


	if(address + size > (MX25R6435F_FLASH_SIZE)){
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	18d2      	adds	r2, r2, r3
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d909      	bls.n	8000b42 <MX_Read_Bytes+0x3a>
		printf("Final address bigger than memory capacity: %ld\r\n", address + size);
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	18d2      	adds	r2, r2, r3
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_Read_Bytes+0xc8>)
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 ff8d 	bl	8004a58 <iprintf>
		return MX_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e042      	b.n	8000bc8 <MX_Read_Bytes+0xc0>
	}

	Set_CS_Pin(GPIO_PIN_RESET);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f912 	bl	8000d6c <Set_CS_Pin>
	command = READ_CMD;
 8000b48:	2117      	movs	r1, #23
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	701a      	strb	r2, [r3, #0]
	if(SPI_Send(&command, 1, 1000) != HAL_OK){
 8000b50:	23fa      	movs	r3, #250	@ 0xfa
 8000b52:	009a      	lsls	r2, r3, #2
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2101      	movs	r1, #1
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 f929 	bl	8000db0 <SPI_Send>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d008      	beq.n	8000b74 <MX_Read_Bytes+0x6c>
		printf("Error sending command read bytes to MX\r\n");
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_Read_Bytes+0xcc>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 ffdd 	bl	8004b24 <puts>
		Set_CS_Pin(GPIO_PIN_SET);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 f8fe 	bl	8000d6c <Set_CS_Pin>
		return MX_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e029      	b.n	8000bc8 <MX_Read_Bytes+0xc0>
	}
	else{
		if(SPI_Send(&addr, 3, 1000) != HAL_OK){
 8000b74:	23fa      	movs	r3, #250	@ 0xfa
 8000b76:	009a      	lsls	r2, r3, #2
 8000b78:	2310      	movs	r3, #16
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f916 	bl	8000db0 <SPI_Send>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d008      	beq.n	8000b9a <MX_Read_Bytes+0x92>
			printf("Error send read bytes addr\r\n");
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <MX_Read_Bytes+0xd0>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f003 ffca 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f8eb 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e016      	b.n	8000bc8 <MX_Read_Bytes+0xc0>
		} else{
			if(SPI_Receive(data, size, 1000) != HAL_OK){
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	23fa      	movs	r3, #250	@ 0xfa
 8000ba0:	009a      	lsls	r2, r3, #2
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 f91b 	bl	8000de0 <SPI_Receive>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d008      	beq.n	8000bc0 <MX_Read_Bytes+0xb8>
				printf("Error receiving read bytes\r\n");
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_Read_Bytes+0xd4>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f003 ffb7 	bl	8004b24 <puts>
				Set_CS_Pin(GPIO_PIN_SET);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 f8d8 	bl	8000d6c <Set_CS_Pin>
				return MX_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e003      	b.n	8000bc8 <MX_Read_Bytes+0xc0>
			}
		}
	}
	Set_CS_Pin(GPIO_PIN_SET);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 f8d3 	bl	8000d6c <Set_CS_Pin>

	return MX_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b006      	add	sp, #24
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08005bd4 	.word	0x08005bd4
 8000bd4:	08005c08 	.word	0x08005c08
 8000bd8:	08005c30 	.word	0x08005c30
 8000bdc:	08005c4c 	.word	0x08005c4c

08000be0 <MX_Write_Bytes>:
* @param pData: Data to be written
* @param address: Starting write address
* @param size: Size to write
* @retval Status
*/
MX_Err MX_Write_Bytes(uint8_t *pData, uint32_t address, uint32_t size){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	uint8_t command = 0;
 8000bec:	2317      	movs	r3, #23
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
	uint32_t current_size, current_addr, end_addr;

	if((address + size) > MX25R6435F_FLASH_SIZE){
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	18d2      	adds	r2, r2, r3
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	041b      	lsls	r3, r3, #16
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d907      	bls.n	8000c12 <MX_Write_Bytes+0x32>
		printf("Invalid Addr or too big: %ld\r\n", address);
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	4b52      	ldr	r3, [pc, #328]	@ (8000d50 <MX_Write_Bytes+0x170>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f003 ff25 	bl	8004a58 <iprintf>
		return MX_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e099      	b.n	8000d46 <MX_Write_Bytes+0x166>
	}

	current_size = MX25R6435F_PAGE_SIZE - (address % MX25R6435F_PAGE_SIZE);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	22ff      	movs	r2, #255	@ 0xff
 8000c16:	4013      	ands	r3, r2
 8000c18:	2280      	movs	r2, #128	@ 0x80
 8000c1a:	0052      	lsls	r2, r2, #1
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	61fb      	str	r3, [r7, #28]

	if(current_size > size){
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d901      	bls.n	8000c2c <MX_Write_Bytes+0x4c>
		current_size = size;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	61fb      	str	r3, [r7, #28]
	}

	current_addr = address;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	613b      	str	r3, [r7, #16]
	end_addr = address + size;
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	61bb      	str	r3, [r7, #24]

	do{
		while(!MX_Available()){
 8000c38:	e006      	b.n	8000c48 <MX_Write_Bytes+0x68>
			printf("MX Busy\r\n");
 8000c3a:	4b46      	ldr	r3, [pc, #280]	@ (8000d54 <MX_Write_Bytes+0x174>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f003 ff71 	bl	8004b24 <puts>
			Delay_ms(10);
 8000c42:	200a      	movs	r0, #10
 8000c44:	f000 f8a7 	bl	8000d96 <Delay_ms>
		while(!MX_Available()){
 8000c48:	f7ff fde2 	bl	8000810 <MX_Available>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	001a      	movs	r2, r3
 8000c50:	2301      	movs	r3, #1
 8000c52:	4053      	eors	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1ef      	bne.n	8000c3a <MX_Write_Bytes+0x5a>
		}

		if(MX_Enable_Write() != MX_OK){
 8000c5a:	f7ff fdb1 	bl	80007c0 <MX_Enable_Write>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d005      	beq.n	8000c6e <MX_Write_Bytes+0x8e>
			printf("Error setting write");
 8000c62:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <MX_Write_Bytes+0x178>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f003 fef7 	bl	8004a58 <iprintf>
			return MX_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e06b      	b.n	8000d46 <MX_Write_Bytes+0x166>
		}

		if(!MX_Write_Enabled()){
 8000c6e:	f7ff fde3 	bl	8000838 <MX_Write_Enabled>
 8000c72:	0003      	movs	r3, r0
 8000c74:	001a      	movs	r2, r3
 8000c76:	2301      	movs	r3, #1
 8000c78:	4053      	eors	r3, r2
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <MX_Write_Bytes+0xac>
			printf("MX write not available\r\n");
 8000c80:	4b36      	ldr	r3, [pc, #216]	@ (8000d5c <MX_Write_Bytes+0x17c>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f003 ff4e 	bl	8004b24 <puts>
			return MX_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e05c      	b.n	8000d46 <MX_Write_Bytes+0x166>
		}

		Set_CS_Pin(GPIO_PIN_RESET);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f86d 	bl	8000d6c <Set_CS_Pin>
		command = PAGE_PROG_CMD;
 8000c92:	2117      	movs	r1, #23
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2202      	movs	r2, #2
 8000c98:	701a      	strb	r2, [r3, #0]
		if(SPI_Send(&command, 1, 1000) != HAL_OK){
 8000c9a:	23fa      	movs	r3, #250	@ 0xfa
 8000c9c:	009a      	lsls	r2, r3, #2
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f884 	bl	8000db0 <SPI_Send>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d008      	beq.n	8000cbe <MX_Write_Bytes+0xde>
			printf("Error sending command write bytes to MX\r\n");
 8000cac:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <MX_Write_Bytes+0x180>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f003 ff38 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 f859 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e043      	b.n	8000d46 <MX_Write_Bytes+0x166>
		}
		if(SPI_Send(&current_addr, 3, 1000) != HAL_OK){
 8000cbe:	23fa      	movs	r3, #250	@ 0xfa
 8000cc0:	009a      	lsls	r2, r3, #2
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 f871 	bl	8000db0 <SPI_Send>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d008      	beq.n	8000ce4 <MX_Write_Bytes+0x104>
			printf("Error sending write bytes addr to MX\r\n");
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <MX_Write_Bytes+0x184>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 ff25 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f846 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e030      	b.n	8000d46 <MX_Write_Bytes+0x166>
		}
		if(SPI_Send(pData, current_size, 1000) != HAL_OK){
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	23fa      	movs	r3, #250	@ 0xfa
 8000cea:	009a      	lsls	r2, r3, #2
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f85e 	bl	8000db0 <SPI_Send>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d008      	beq.n	8000d0a <MX_Write_Bytes+0x12a>
			printf("Error sending write bytes to MX\r\n");
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_Write_Bytes+0x188>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f003 ff12 	bl	8004b24 <puts>
			Set_CS_Pin(GPIO_PIN_SET);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 f833 	bl	8000d6c <Set_CS_Pin>
			return MX_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e01d      	b.n	8000d46 <MX_Write_Bytes+0x166>
		}

		Set_CS_Pin(GPIO_PIN_SET);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 f82e 	bl	8000d6c <Set_CS_Pin>

		current_addr += current_size;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	613b      	str	r3, [r7, #16]
		pData += current_size;
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	60fb      	str	r3, [r7, #12]
		current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	3301      	adds	r3, #1
 8000d24:	33ff      	adds	r3, #255	@ 0xff
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d203      	bcs.n	8000d34 <MX_Write_Bytes+0x154>
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	e001      	b.n	8000d38 <MX_Write_Bytes+0x158>
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
	} while(end_addr > current_addr);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d900      	bls.n	8000d44 <MX_Write_Bytes+0x164>
 8000d42:	e781      	b.n	8000c48 <MX_Write_Bytes+0x68>

	return MX_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b008      	add	sp, #32
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	08005d28 	.word	0x08005d28
 8000d54:	080059d4 	.word	0x080059d4
 8000d58:	080059e0 	.word	0x080059e0
 8000d5c:	080059f4 	.word	0x080059f4
 8000d60:	08005cb0 	.word	0x08005cb0
 8000d64:	08005cdc 	.word	0x08005cdc
 8000d68:	08005d04 	.word	0x08005d04

08000d6c <Set_CS_Pin>:
/**
* @brief Set CS pin
* @param None
* @retval None
*/
void Set_CS_Pin(GPIO_PinState State){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, CSMX_Pin, State);
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	23a0      	movs	r3, #160	@ 0xa0
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	2110      	movs	r1, #16
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 f892 	bl	8001eac <HAL_GPIO_WritePin>
	Delay_ms(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 f804 	bl	8000d96 <Delay_ms>
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Delay_ms>:
/**
* @brief Make a delay
* @param delay: Delay in milliseconds
* @retval None
*/
void Delay_ms(uint32_t delay){
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fe47 	bl	8001a34 <HAL_Delay>
}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <SPI_Send>:
* @param pData: Data to be sent
* @param size: Size to send
* @param timeout: Operation timeout
* @retval Status
*/
uint8_t SPI_Send(uint8_t *pData, uint16_t size, uint32_t timeout){
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	200a      	movs	r0, #10
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	1c0a      	adds	r2, r1, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
	return HAL_SPI_Transmit(&hspi1, pData, size, timeout);
 8000dc2:	687c      	ldr	r4, [r7, #4]
 8000dc4:	183b      	adds	r3, r7, r0
 8000dc6:	881a      	ldrh	r2, [r3, #0]
 8000dc8:	68f9      	ldr	r1, [r7, #12]
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <SPI_Send+0x2c>)
 8000dcc:	0023      	movs	r3, r4
 8000dce:	f002 f809 	bl	8002de4 <HAL_SPI_Transmit>
 8000dd2:	0003      	movs	r3, r0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b005      	add	sp, #20
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	20000088 	.word	0x20000088

08000de0 <SPI_Receive>:
* @param pData: Data received
* @param size: Size to be received
* @param timeout: Operation timeout
* @retval Status
*/
uint8_t SPI_Receive(uint8_t *pData, uint16_t size, uint32_t timeout){
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	200a      	movs	r0, #10
 8000dec:	183b      	adds	r3, r7, r0
 8000dee:	1c0a      	adds	r2, r1, #0
 8000df0:	801a      	strh	r2, [r3, #0]
	return HAL_SPI_Receive(&hspi1, pData, size, timeout);
 8000df2:	687c      	ldr	r4, [r7, #4]
 8000df4:	183b      	adds	r3, r7, r0
 8000df6:	881a      	ldrh	r2, [r3, #0]
 8000df8:	68f9      	ldr	r1, [r7, #12]
 8000dfa:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <SPI_Receive+0x2c>)
 8000dfc:	0023      	movs	r3, r4
 8000dfe:	f002 f951 	bl	80030a4 <HAL_SPI_Receive>
 8000e02:	0003      	movs	r3, r0
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b005      	add	sp, #20
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	20000088 	.word	0x20000088

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	4cef      	ldr	r4, [pc, #956]	@ (80011d0 <main+0x3c0>)
 8000e14:	44a5      	add	sp, r4
 8000e16:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f000 fd86 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f9fe 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 fa92 	bl	8001348 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e24:	f000 fa52 	bl	80012cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_COM_Init(COM1);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 fc67 	bl	80016fc <BSP_COM_Init>
    printf("Memory start\r\n");
 8000e2e:	4be9      	ldr	r3, [pc, #932]	@ (80011d4 <main+0x3c4>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f003 fe77 	bl	8004b24 <puts>
    uint8_t data[MEMLGN] = {0};
 8000e36:	4be8      	ldr	r3, [pc, #928]	@ (80011d8 <main+0x3c8>)
 8000e38:	22fd      	movs	r2, #253	@ 0xfd
 8000e3a:	00d2      	lsls	r2, r2, #3
 8000e3c:	189b      	adds	r3, r3, r2
 8000e3e:	19db      	adds	r3, r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	3304      	adds	r3, #4
 8000e46:	22f9      	movs	r2, #249	@ 0xf9
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f003 ff5f 	bl	8004d10 <memset>
    MX_Err err = 0;
 8000e52:	4be2      	ldr	r3, [pc, #904]	@ (80011dc <main+0x3cc>)
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
    if(MX_Init() != MX_OK){
 8000e5a:	f7ff fbe9 	bl	8000630 <MX_Init>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d006      	beq.n	8000e70 <main+0x60>
  	  printf("Error Init MX\r\n");
 8000e62:	4bdf      	ldr	r3, [pc, #892]	@ (80011e0 <main+0x3d0>)
 8000e64:	0018      	movs	r0, r3
 8000e66:	f003 fe5d 	bl	8004b24 <puts>
  	  Error_Handler();
 8000e6a:	f000 faef 	bl	800144c <Error_Handler>
 8000e6e:	e1ac      	b.n	80011ca <main+0x3ba>
    }
  	  else{
  	  err = MX_Get_ID(data);
 8000e70:	4dda      	ldr	r5, [pc, #872]	@ (80011dc <main+0x3cc>)
 8000e72:	197c      	adds	r4, r7, r5
 8000e74:	23fb      	movs	r3, #251	@ 0xfb
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fc20 	bl	80006c0 <MX_Get_ID>
 8000e80:	0003      	movs	r3, r0
 8000e82:	7023      	strb	r3, [r4, #0]
  	  printf("Err: %d\r\nManufacturing ID: %02x\r\nMemory Type: %02x\r\nMemory Density: %02x\r\n",
 8000e84:	197b      	adds	r3, r7, r5
 8000e86:	7819      	ldrb	r1, [r3, #0]
  			  err, data[0], data[1], data[2]);
 8000e88:	4bd3      	ldr	r3, [pc, #844]	@ (80011d8 <main+0x3c8>)
 8000e8a:	26fd      	movs	r6, #253	@ 0xfd
 8000e8c:	00f6      	lsls	r6, r6, #3
 8000e8e:	199a      	adds	r2, r3, r6
 8000e90:	19d3      	adds	r3, r2, r7
 8000e92:	781b      	ldrb	r3, [r3, #0]
  	  printf("Err: %d\r\nManufacturing ID: %02x\r\nMemory Type: %02x\r\nMemory Density: %02x\r\n",
 8000e94:	001a      	movs	r2, r3
  			  err, data[0], data[1], data[2]);
 8000e96:	4bd0      	ldr	r3, [pc, #832]	@ (80011d8 <main+0x3c8>)
 8000e98:	1998      	adds	r0, r3, r6
 8000e9a:	19c3      	adds	r3, r0, r7
 8000e9c:	785b      	ldrb	r3, [r3, #1]
  	  printf("Err: %d\r\nManufacturing ID: %02x\r\nMemory Type: %02x\r\nMemory Density: %02x\r\n",
 8000e9e:	001c      	movs	r4, r3
  			  err, data[0], data[1], data[2]);
 8000ea0:	4bcd      	ldr	r3, [pc, #820]	@ (80011d8 <main+0x3c8>)
 8000ea2:	1998      	adds	r0, r3, r6
 8000ea4:	19c3      	adds	r3, r0, r7
 8000ea6:	789b      	ldrb	r3, [r3, #2]
  	  printf("Err: %d\r\nManufacturing ID: %02x\r\nMemory Type: %02x\r\nMemory Density: %02x\r\n",
 8000ea8:	48ce      	ldr	r0, [pc, #824]	@ (80011e4 <main+0x3d4>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	0023      	movs	r3, r4
 8000eae:	f003 fdd3 	bl	8004a58 <iprintf>
  	  err = MX_Get_Status(data);
 8000eb2:	197c      	adds	r4, r7, r5
 8000eb4:	23fb      	movs	r3, #251	@ 0xfb
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fc40 	bl	8000740 <MX_Get_Status>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
  	  printf("Err: %d\r\nMX_Status: %02x\r\n",
 8000ec4:	002c      	movs	r4, r5
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	7819      	ldrb	r1, [r3, #0]
  			  err, data[0]);
 8000eca:	4bc3      	ldr	r3, [pc, #780]	@ (80011d8 <main+0x3c8>)
 8000ecc:	199a      	adds	r2, r3, r6
 8000ece:	19d3      	adds	r3, r2, r7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
  	  printf("Err: %d\r\nMX_Status: %02x\r\n",
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	4bc4      	ldr	r3, [pc, #784]	@ (80011e8 <main+0x3d8>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f003 fdbe 	bl	8004a58 <iprintf>
  	  err = MX_Config_Read(data);
 8000edc:	0025      	movs	r5, r4
 8000ede:	193c      	adds	r4, r7, r4
 8000ee0:	23fb      	movs	r3, #251	@ 0xfb
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff fcba 	bl	8000860 <MX_Config_Read>
 8000eec:	0003      	movs	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
  	  printf("Err: %d\r\nConfiguration: %02x %02x\r\n",
 8000ef0:	002c      	movs	r4, r5
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	7819      	ldrb	r1, [r3, #0]
  			  err, data[0], data[1]);
 8000ef6:	4bb8      	ldr	r3, [pc, #736]	@ (80011d8 <main+0x3c8>)
 8000ef8:	199b      	adds	r3, r3, r6
 8000efa:	19db      	adds	r3, r3, r7
 8000efc:	781b      	ldrb	r3, [r3, #0]
  	  printf("Err: %d\r\nConfiguration: %02x %02x\r\n",
 8000efe:	001a      	movs	r2, r3
  			  err, data[0], data[1]);
 8000f00:	4bb5      	ldr	r3, [pc, #724]	@ (80011d8 <main+0x3c8>)
 8000f02:	199b      	adds	r3, r3, r6
 8000f04:	19db      	adds	r3, r3, r7
 8000f06:	785b      	ldrb	r3, [r3, #1]
  	  printf("Err: %d\r\nConfiguration: %02x %02x\r\n",
 8000f08:	48b8      	ldr	r0, [pc, #736]	@ (80011ec <main+0x3dc>)
 8000f0a:	f003 fda5 	bl	8004a58 <iprintf>
  	  uint8_t stat = 0b00000000;
 8000f0e:	49b8      	ldr	r1, [pc, #736]	@ (80011f0 <main+0x3e0>)
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
  	  uint16_t cfg = 0b0000000000000000;
 8000f16:	48b7      	ldr	r0, [pc, #732]	@ (80011f4 <main+0x3e4>)
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	801a      	strh	r2, [r3, #0]
  	  err = MX_Config_Write(stat, cfg);
 8000f1e:	0025      	movs	r5, r4
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	183b      	adds	r3, r7, r0
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fcd7 	bl	80008e0 <MX_Config_Write>
 8000f32:	0003      	movs	r3, r0
 8000f34:	7023      	strb	r3, [r4, #0]
  	  if(err != MX_OK){
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <main+0x138>
  		  printf("Error writing CFG\r\n");
 8000f3e:	4bae      	ldr	r3, [pc, #696]	@ (80011f8 <main+0x3e8>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f003 fdef 	bl	8004b24 <puts>
 8000f46:	e043      	b.n	8000fd0 <main+0x1c0>
  	  }else{
  		  err = MX_Get_Status(data);
 8000f48:	4da4      	ldr	r5, [pc, #656]	@ (80011dc <main+0x3cc>)
 8000f4a:	197c      	adds	r4, r7, r5
 8000f4c:	23fb      	movs	r3, #251	@ 0xfb
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fbf4 	bl	8000740 <MX_Get_Status>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	7023      	strb	r3, [r4, #0]
  		  printf("Err: %d\r\nMX_Status: %02x\r\n",
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	7819      	ldrb	r1, [r3, #0]
  				  err, data[0]);
 8000f60:	4b9d      	ldr	r3, [pc, #628]	@ (80011d8 <main+0x3c8>)
 8000f62:	26fd      	movs	r6, #253	@ 0xfd
 8000f64:	00f6      	lsls	r6, r6, #3
 8000f66:	199a      	adds	r2, r3, r6
 8000f68:	19d3      	adds	r3, r2, r7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
  		  printf("Err: %d\r\nMX_Status: %02x\r\n",
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80011e8 <main+0x3d8>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f003 fd71 	bl	8004a58 <iprintf>
  		  err = MX_Config_Read(data);
 8000f76:	197c      	adds	r4, r7, r5
 8000f78:	23fb      	movs	r3, #251	@ 0xfb
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fc6e 	bl	8000860 <MX_Config_Read>
 8000f84:	0003      	movs	r3, r0
 8000f86:	7023      	strb	r3, [r4, #0]
  		  printf("Err: %d\r\nConfiguration: %02x %02x\r\n",
 8000f88:	002c      	movs	r4, r5
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	7819      	ldrb	r1, [r3, #0]
  				  err, data[0], data[1]);
 8000f8e:	4b92      	ldr	r3, [pc, #584]	@ (80011d8 <main+0x3c8>)
 8000f90:	199a      	adds	r2, r3, r6
 8000f92:	19d3      	adds	r3, r2, r7
 8000f94:	781b      	ldrb	r3, [r3, #0]
  		  printf("Err: %d\r\nConfiguration: %02x %02x\r\n",
 8000f96:	001a      	movs	r2, r3
  				  err, data[0], data[1]);
 8000f98:	4b8f      	ldr	r3, [pc, #572]	@ (80011d8 <main+0x3c8>)
 8000f9a:	1998      	adds	r0, r3, r6
 8000f9c:	19c3      	adds	r3, r0, r7
 8000f9e:	785b      	ldrb	r3, [r3, #1]
  		  printf("Err: %d\r\nConfiguration: %02x %02x\r\n",
 8000fa0:	4892      	ldr	r0, [pc, #584]	@ (80011ec <main+0x3dc>)
 8000fa2:	f003 fd59 	bl	8004a58 <iprintf>
  		  err = MX_Get_Status(data);
 8000fa6:	0025      	movs	r5, r4
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	23fb      	movs	r3, #251	@ 0xfb
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fbc5 	bl	8000740 <MX_Get_Status>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	7023      	strb	r3, [r4, #0]
  		  printf("Err: %d\r\nMX_Status: %02x\r\n",
 8000fba:	197b      	adds	r3, r7, r5
 8000fbc:	7819      	ldrb	r1, [r3, #0]
  				  err, data[0]);
 8000fbe:	4b86      	ldr	r3, [pc, #536]	@ (80011d8 <main+0x3c8>)
 8000fc0:	199b      	adds	r3, r3, r6
 8000fc2:	19db      	adds	r3, r3, r7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
  		  printf("Err: %d\r\nMX_Status: %02x\r\n",
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	4b87      	ldr	r3, [pc, #540]	@ (80011e8 <main+0x3d8>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f003 fd44 	bl	8004a58 <iprintf>
  	  }
  	  err = MX_Read_Bytes(data, 0x00, MEMLGN);
 8000fd0:	4d82      	ldr	r5, [pc, #520]	@ (80011dc <main+0x3cc>)
 8000fd2:	197c      	adds	r4, r7, r5
 8000fd4:	23fa      	movs	r3, #250	@ 0xfa
 8000fd6:	009a      	lsls	r2, r3, #2
 8000fd8:	23fb      	movs	r3, #251	@ 0xfb
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff fd91 	bl	8000b08 <MX_Read_Bytes>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	7023      	strb	r3, [r4, #0]
  	  printf("Err: %d\r\nMX_Read: ", err);
 8000fea:	197b      	adds	r3, r7, r5
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	4b83      	ldr	r3, [pc, #524]	@ (80011fc <main+0x3ec>)
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f003 fd30 	bl	8004a58 <iprintf>
  	  for(int i = 0; i < MEMLGN; i++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4a81      	ldr	r2, [pc, #516]	@ (8001200 <main+0x3f0>)
 8000ffc:	18ba      	adds	r2, r7, r2
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e014      	b.n	800102c <main+0x21c>
  		  printf(" %d", data[i]);
 8001002:	4b75      	ldr	r3, [pc, #468]	@ (80011d8 <main+0x3c8>)
 8001004:	22fd      	movs	r2, #253	@ 0xfd
 8001006:	00d2      	lsls	r2, r2, #3
 8001008:	189b      	adds	r3, r3, r2
 800100a:	19da      	adds	r2, r3, r7
 800100c:	4c7c      	ldr	r4, [pc, #496]	@ (8001200 <main+0x3f0>)
 800100e:	193b      	adds	r3, r7, r4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	001a      	movs	r2, r3
 8001018:	4b7a      	ldr	r3, [pc, #488]	@ (8001204 <main+0x3f4>)
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f003 fd1b 	bl	8004a58 <iprintf>
  	  for(int i = 0; i < MEMLGN; i++){
 8001022:	193b      	adds	r3, r7, r4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	193a      	adds	r2, r7, r4
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b74      	ldr	r3, [pc, #464]	@ (8001200 <main+0x3f0>)
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	23fa      	movs	r3, #250	@ 0xfa
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	429a      	cmp	r2, r3
 8001038:	dbe3      	blt.n	8001002 <main+0x1f2>
  	  }
  	  printf("\r\n");
 800103a:	4b73      	ldr	r3, [pc, #460]	@ (8001208 <main+0x3f8>)
 800103c:	0018      	movs	r0, r3
 800103e:	f003 fd71 	bl	8004b24 <puts>
  	  uint8_t teste[MEMLGN] = {0};
 8001042:	4b72      	ldr	r3, [pc, #456]	@ (800120c <main+0x3fc>)
 8001044:	22fd      	movs	r2, #253	@ 0xfd
 8001046:	00d2      	lsls	r2, r2, #3
 8001048:	189b      	adds	r3, r3, r2
 800104a:	19db      	adds	r3, r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	3304      	adds	r3, #4
 8001052:	22f9      	movs	r2, #249	@ 0xf9
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	2100      	movs	r1, #0
 8001058:	0018      	movs	r0, r3
 800105a:	f003 fe59 	bl	8004d10 <memset>
  	  for(int i = 0; i < MEMLGN; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	22fc      	movs	r2, #252	@ 0xfc
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e013      	b.n	8001092 <main+0x282>
  		  teste[i] = i;
 800106a:	20fc      	movs	r0, #252	@ 0xfc
 800106c:	00c0      	lsls	r0, r0, #3
 800106e:	183b      	adds	r3, r7, r0
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b2d9      	uxtb	r1, r3
 8001074:	4b65      	ldr	r3, [pc, #404]	@ (800120c <main+0x3fc>)
 8001076:	22fd      	movs	r2, #253	@ 0xfd
 8001078:	00d2      	lsls	r2, r2, #3
 800107a:	189b      	adds	r3, r3, r2
 800107c:	19da      	adds	r2, r3, r7
 800107e:	183b      	adds	r3, r7, r0
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	1c0a      	adds	r2, r1, #0
 8001086:	701a      	strb	r2, [r3, #0]
  	  for(int i = 0; i < MEMLGN; i++){
 8001088:	183b      	adds	r3, r7, r0
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	183a      	adds	r2, r7, r0
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	23fc      	movs	r3, #252	@ 0xfc
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	23fa      	movs	r3, #250	@ 0xfa
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbe3      	blt.n	800106a <main+0x25a>
  	  }
  	  err = MX_Write_Bytes(teste, 0x00, MEMLGN);
 80010a2:	4d4e      	ldr	r5, [pc, #312]	@ (80011dc <main+0x3cc>)
 80010a4:	197c      	adds	r4, r7, r5
 80010a6:	23fa      	movs	r3, #250	@ 0xfa
 80010a8:	009a      	lsls	r2, r3, #2
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2100      	movs	r1, #0
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff fd96 	bl	8000be0 <MX_Write_Bytes>
 80010b4:	0003      	movs	r3, r0
 80010b6:	7023      	strb	r3, [r4, #0]
  	  printf("Write Bytes Err: %d\r\n", err);
 80010b8:	197b      	adds	r3, r7, r5
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	4b54      	ldr	r3, [pc, #336]	@ (8001210 <main+0x400>)
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f003 fcc9 	bl	8004a58 <iprintf>
  	  err = MX_Read_Bytes(data, 0x00, MEMLGN);
 80010c6:	197c      	adds	r4, r7, r5
 80010c8:	23fa      	movs	r3, #250	@ 0xfa
 80010ca:	009a      	lsls	r2, r3, #2
 80010cc:	23fb      	movs	r3, #251	@ 0xfb
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fd17 	bl	8000b08 <MX_Read_Bytes>
 80010da:	0003      	movs	r3, r0
 80010dc:	7023      	strb	r3, [r4, #0]
  	  printf("Err: %d\r\nMX_Read: ", err);
 80010de:	197b      	adds	r3, r7, r5
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <main+0x3ec>)
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f003 fcb6 	bl	8004a58 <iprintf>
  	  for(int i = 0; i < MEMLGN; i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <main+0x404>)
 80010f0:	18ba      	adds	r2, r7, r2
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e014      	b.n	8001120 <main+0x310>
  		  printf(" %d", data[i]);
 80010f6:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <main+0x3c8>)
 80010f8:	22fd      	movs	r2, #253	@ 0xfd
 80010fa:	00d2      	lsls	r2, r2, #3
 80010fc:	189b      	adds	r3, r3, r2
 80010fe:	19da      	adds	r2, r3, r7
 8001100:	4c44      	ldr	r4, [pc, #272]	@ (8001214 <main+0x404>)
 8001102:	193b      	adds	r3, r7, r4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	18d3      	adds	r3, r2, r3
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	001a      	movs	r2, r3
 800110c:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <main+0x3f4>)
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f003 fca1 	bl	8004a58 <iprintf>
  	  for(int i = 0; i < MEMLGN; i++){
 8001116:	193b      	adds	r3, r7, r4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	193a      	adds	r2, r7, r4
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <main+0x404>)
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	23fa      	movs	r3, #250	@ 0xfa
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	429a      	cmp	r2, r3
 800112c:	dbe3      	blt.n	80010f6 <main+0x2e6>
  	  }
  	  printf("\r\n");
 800112e:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <main+0x3f8>)
 8001130:	0018      	movs	r0, r3
 8001132:	f003 fcf7 	bl	8004b24 <puts>
  	  err = MX_Erase_Sector(0x00);
 8001136:	4d29      	ldr	r5, [pc, #164]	@ (80011dc <main+0x3cc>)
 8001138:	197c      	adds	r4, r7, r5
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fc56 	bl	80009ec <MX_Erase_Sector>
 8001140:	0003      	movs	r3, r0
 8001142:	7023      	strb	r3, [r4, #0]
  	  printf("Erase sector Err: %d\r\n",
 8001144:	197b      	adds	r3, r7, r5
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <main+0x408>)
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f003 fc83 	bl	8004a58 <iprintf>
  			  err);
  	  err = MX_Read_Bytes(data, 0x00, MEMLGN);
 8001152:	197c      	adds	r4, r7, r5
 8001154:	23fa      	movs	r3, #250	@ 0xfa
 8001156:	009a      	lsls	r2, r3, #2
 8001158:	23fb      	movs	r3, #251	@ 0xfb
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2100      	movs	r1, #0
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff fcd1 	bl	8000b08 <MX_Read_Bytes>
 8001166:	0003      	movs	r3, r0
 8001168:	7023      	strb	r3, [r4, #0]
  	  printf("Err: %d\r\nMX_Read: ", err);
 800116a:	197b      	adds	r3, r7, r5
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <main+0x3ec>)
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f003 fc70 	bl	8004a58 <iprintf>
  	  for(int i = 0; i < MEMLGN; i++){
 8001178:	2300      	movs	r3, #0
 800117a:	22fb      	movs	r2, #251	@ 0xfb
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	18ba      	adds	r2, r7, r2
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e015      	b.n	80011b0 <main+0x3a0>
  		  printf(" %d", data[i]);
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <main+0x3c8>)
 8001186:	22fd      	movs	r2, #253	@ 0xfd
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	189b      	adds	r3, r3, r2
 800118c:	19da      	adds	r2, r3, r7
 800118e:	24fb      	movs	r4, #251	@ 0xfb
 8001190:	00e4      	lsls	r4, r4, #3
 8001192:	193b      	adds	r3, r7, r4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	001a      	movs	r2, r3
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <main+0x3f4>)
 800119e:	0011      	movs	r1, r2
 80011a0:	0018      	movs	r0, r3
 80011a2:	f003 fc59 	bl	8004a58 <iprintf>
  	  for(int i = 0; i < MEMLGN; i++){
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	193a      	adds	r2, r7, r4
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	23fb      	movs	r3, #251	@ 0xfb
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	23fa      	movs	r3, #250	@ 0xfa
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbe1      	blt.n	8001184 <main+0x374>
  	  }
  	  printf("\r\n");
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <main+0x3f8>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f003 fcae 	bl	8004b24 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	e7fd      	b.n	80011ca <main+0x3ba>
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	fffff80c 	.word	0xfffff80c
 80011d4:	08005d74 	.word	0x08005d74
 80011d8:	fffffc04 	.word	0xfffffc04
 80011dc:	000007d7 	.word	0x000007d7
 80011e0:	08005d84 	.word	0x08005d84
 80011e4:	08005d94 	.word	0x08005d94
 80011e8:	08005de0 	.word	0x08005de0
 80011ec:	08005dfc 	.word	0x08005dfc
 80011f0:	000007d6 	.word	0x000007d6
 80011f4:	000007d4 	.word	0x000007d4
 80011f8:	08005e20 	.word	0x08005e20
 80011fc:	08005e34 	.word	0x08005e34
 8001200:	000007e4 	.word	0x000007e4
 8001204:	08005e48 	.word	0x08005e48
 8001208:	08005e4c 	.word	0x08005e4c
 800120c:	fffff81c 	.word	0xfffff81c
 8001210:	08005e50 	.word	0x08005e50
 8001214:	000007dc 	.word	0x000007dc
 8001218:	08005e68 	.word	0x08005e68

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b093      	sub	sp, #76	@ 0x4c
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	2410      	movs	r4, #16
 8001224:	193b      	adds	r3, r7, r4
 8001226:	0018      	movs	r0, r3
 8001228:	2338      	movs	r3, #56	@ 0x38
 800122a:	001a      	movs	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f003 fd6f 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001232:	003b      	movs	r3, r7
 8001234:	0018      	movs	r0, r3
 8001236:	2310      	movs	r3, #16
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f003 fd68 	bl	8004d10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	0018      	movs	r0, r3
 8001246:	f000 fe4f 	bl	8001ee8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124a:	193b      	adds	r3, r7, r4
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001250:	193b      	adds	r3, r7, r4
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	0252      	lsls	r2, r2, #9
 8001256:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	0021      	movs	r1, r4
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2202      	movs	r2, #2
 800125e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2203      	movs	r2, #3
 8001264:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2208      	movs	r2, #8
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2280      	movs	r2, #128	@ 0x80
 8001276:	0292      	lsls	r2, r2, #10
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	0492      	lsls	r2, r2, #18
 8001280:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	22c0      	movs	r2, #192	@ 0xc0
 8001286:	05d2      	lsls	r2, r2, #23
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	187b      	adds	r3, r7, r1
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fe77 	bl	8001f80 <HAL_RCC_OscConfig>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001296:	f000 f8d9 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	003b      	movs	r3, r7
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	003b      	movs	r3, r7
 80012a2:	2202      	movs	r2, #2
 80012a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	003b      	movs	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ac:	003b      	movs	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b2:	003b      	movs	r3, r7
 80012b4:	2101      	movs	r1, #1
 80012b6:	0018      	movs	r0, r3
 80012b8:	f001 f97c 	bl	80025b4 <HAL_RCC_ClockConfig>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80012c0:	f000 f8c4 	bl	800144c <Error_Handler>
  }
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b013      	add	sp, #76	@ 0x4c
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <MX_SPI1_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012d8:	2282      	movs	r2, #130	@ 0x82
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012e6:	22e0      	movs	r2, #224	@ 0xe0
 80012e8:	00d2      	lsls	r2, r2, #3
 80012ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_SPI1_Init+0x74>)
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_SPI1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_SPI1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_SPI1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_SPI1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_SPI1_Init+0x74>)
 800131a:	2207      	movs	r2, #7
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_SPI1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SPI1_Init+0x74>)
 8001326:	2208      	movs	r2, #8
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <MX_SPI1_Init+0x74>)
 800132c:	0018      	movs	r0, r3
 800132e:	f001 fca1 	bl	8002c74 <HAL_SPI_Init>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001336:	f000 f889 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000088 	.word	0x20000088
 8001344:	40013000 	.word	0x40013000

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08b      	sub	sp, #44	@ 0x2c
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	2414      	movs	r4, #20
 8001350:	193b      	adds	r3, r7, r4
 8001352:	0018      	movs	r0, r3
 8001354:	2314      	movs	r3, #20
 8001356:	001a      	movs	r2, r3
 8001358:	2100      	movs	r1, #0
 800135a:	f003 fcd9 	bl	8004d10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <MX_GPIO_Init+0xfc>)
 8001360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001362:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <MX_GPIO_Init+0xfc>)
 8001364:	2104      	movs	r1, #4
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
 800136a:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <MX_GPIO_Init+0xfc>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136e:	2204      	movs	r2, #4
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001376:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <MX_GPIO_Init+0xfc>)
 8001378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <MX_GPIO_Init+0xfc>)
 800137c:	2120      	movs	r1, #32
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <MX_GPIO_Init+0xfc>)
 8001384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001386:	2220      	movs	r2, #32
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <MX_GPIO_Init+0xfc>)
 8001390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001392:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <MX_GPIO_Init+0xfc>)
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <MX_GPIO_Init+0xfc>)
 800139c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139e:	2201      	movs	r2, #1
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <MX_GPIO_Init+0xfc>)
 80013a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013aa:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <MX_GPIO_Init+0xfc>)
 80013ac:	2102      	movs	r1, #2
 80013ae:	430a      	orrs	r2, r1
 80013b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <MX_GPIO_Init+0xfc>)
 80013b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <MX_GPIO_Init+0xfc>)
 80013c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c2:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <MX_GPIO_Init+0xfc>)
 80013c4:	2108      	movs	r1, #8
 80013c6:	430a      	orrs	r2, r1
 80013c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <MX_GPIO_Init+0xfc>)
 80013cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ce:	2208      	movs	r2, #8
 80013d0:	4013      	ands	r3, r2
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSMX_Pin, GPIO_PIN_SET);
 80013d6:	23a0      	movs	r3, #160	@ 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2201      	movs	r2, #1
 80013dc:	2110      	movs	r1, #16
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 fd64 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RSTMX_Pin|WP_Pin, GPIO_PIN_SET);
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <MX_GPIO_Init+0x100>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	21c0      	movs	r1, #192	@ 0xc0
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 fd5e 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSMX_Pin D_OUT_Pin */
  GPIO_InitStruct.Pin = CSMX_Pin;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2210      	movs	r2, #16
 80013f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2201      	movs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	193a      	adds	r2, r7, r4
 800140a:	23a0      	movs	r3, #160	@ 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f000 fbe7 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RSTMX_Pin WP_Pin */
  GPIO_InitStruct.Pin = RSTMX_Pin|WP_Pin;
 8001416:	0021      	movs	r1, r4
 8001418:	187b      	adds	r3, r7, r1
 800141a:	22c0      	movs	r2, #192	@ 0xc0
 800141c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2201      	movs	r2, #1
 8001422:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	187b      	adds	r3, r7, r1
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <MX_GPIO_Init+0x100>)
 8001434:	0019      	movs	r1, r3
 8001436:	0010      	movs	r0, r2
 8001438:	f000 fbd4 	bl	8001be4 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b00b      	add	sp, #44	@ 0x2c
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	50000800 	.word	0x50000800

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	e7fd      	b.n	8001454 <Error_Handler+0x8>

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_MspInit+0x44>)
 8001460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <HAL_MspInit+0x44>)
 8001464:	2101      	movs	r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	641a      	str	r2, [r3, #64]	@ 0x40
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_MspInit+0x44>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	2201      	movs	r2, #1
 8001470:	4013      	ands	r3, r2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_MspInit+0x44>)
 8001478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_MspInit+0x44>)
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	0549      	lsls	r1, r1, #21
 8001480:	430a      	orrs	r2, r1
 8001482:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_MspInit+0x44>)
 8001486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	055b      	lsls	r3, r3, #21
 800148c:	4013      	ands	r3, r2
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08b      	sub	sp, #44	@ 0x2c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	2414      	movs	r4, #20
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	0018      	movs	r0, r3
 80014ae:	2314      	movs	r3, #20
 80014b0:	001a      	movs	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	f003 fc2c 	bl	8004d10 <memset>
  if(hspi->Instance==SPI1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <HAL_SPI_MspInit+0x8c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d130      	bne.n	8001524 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_SPI_MspInit+0x90>)
 80014c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <HAL_SPI_MspInit+0x90>)
 80014c8:	2180      	movs	r1, #128	@ 0x80
 80014ca:	0149      	lsls	r1, r1, #5
 80014cc:	430a      	orrs	r2, r1
 80014ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_SPI_MspInit+0x90>)
 80014d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	015b      	lsls	r3, r3, #5
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_SPI_MspInit+0x90>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_SPI_MspInit+0x90>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_SPI_MspInit+0x90>)
 80014ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014f6:	0021      	movs	r1, r4
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	22e0      	movs	r2, #224	@ 0xe0
 80014fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2202      	movs	r2, #2
 8001502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	187a      	adds	r2, r7, r1
 8001518:	23a0      	movs	r3, #160	@ 0xa0
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f000 fb60 	bl	8001be4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001524:	46c0      	nop			@ (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b00b      	add	sp, #44	@ 0x2c
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	40013000 	.word	0x40013000
 8001530:	40021000 	.word	0x40021000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	e7fd      	b.n	8001538 <NMI_Handler+0x4>

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	e7fd      	b.n	8001540 <HardFault_Handler+0x4>

08001544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 fa4e 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e00a      	b.n	800158e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001578:	e000      	b.n	800157c <_read+0x16>
 800157a:	bf00      	nop
 800157c:	0001      	movs	r1, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	dbf0      	blt.n	8001578 <_read+0x12>
  }

  return len;
 8001596:	687b      	ldr	r3, [r7, #4]
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b006      	add	sp, #24
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e009      	b.n	80015c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	60ba      	str	r2, [r7, #8]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f936 	bl	800182c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf1      	blt.n	80015b2 <_write+0x12>
  }
  return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b006      	add	sp, #24
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_close>:

int _close(int file)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	425b      	negs	r3, r3
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	0192      	lsls	r2, r2, #6
 80015fc:	605a      	str	r2, [r3, #4]
  return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}

08001608 <_isatty>:

int _isatty(int file)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}

0800161a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	@ (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f003 fbac 	bl	8004dbc <__errno>
 8001664:	0003      	movs	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	2301      	movs	r3, #1
 800166c:	425b      	negs	r3, r3
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	18d2      	adds	r2, r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <_sbrk+0x64>)
 8001680:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b006      	add	sp, #24
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20009000 	.word	0x20009000
 8001690:	00000c00 	.word	0x00000c00
 8001694:	200000ec 	.word	0x200000ec
 8001698:	200002d8 	.word	0x200002d8

0800169c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ac:	f7ff fff6 	bl	800169c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopForever+0xe>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopForever+0x16>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016d6:	f003 fb77 	bl	8004dc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016da:	f7ff fb99 	bl	8000e10 <main>

080016de <LoopForever>:

LoopForever:
  b LoopForever
 80016de:	e7fe      	b.n	80016de <LoopForever>
  ldr   r0, =_estack
 80016e0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016ec:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 80016f0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016f4:	200002d8 	.word	0x200002d8

080016f8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_COMP_IRQHandler>
	...

080016fc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d903      	bls.n	800171c <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001714:	2302      	movs	r3, #2
 8001716:	425b      	negs	r3, r3
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e021      	b.n	8001760 <BSP_COM_Init+0x64>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	7819      	ldrb	r1, [r3, #0]
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <BSP_COM_Init+0x70>)
 8001726:	0089      	lsls	r1, r1, #2
 8001728:	58c9      	ldr	r1, [r1, r3]
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <BSP_COM_Init+0x74>)
 800172c:	2094      	movs	r0, #148	@ 0x94
 800172e:	4342      	muls	r2, r0
 8001730:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2294      	movs	r2, #148	@ 0x94
 8001738:	435a      	muls	r2, r3
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <BSP_COM_Init+0x74>)
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f88e 	bl	8001860 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001744:	1dfb      	adds	r3, r7, #7
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2294      	movs	r2, #148	@ 0x94
 800174a:	435a      	muls	r2, r3
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <BSP_COM_Init+0x74>)
 800174e:	18d3      	adds	r3, r2, r3
 8001750:	0018      	movs	r0, r3
 8001752:	f000 f80f 	bl	8001774 <MX_USART2_UART_Init>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d002      	beq.n	8001760 <BSP_COM_Init+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800175a:	2304      	movs	r3, #4
 800175c:	425b      	negs	r3, r3
 800175e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b004      	add	sp, #16
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	20000004 	.word	0x20000004
 8001770:	200000f0 	.word	0x200000f0

08001774 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800177c:	240f      	movs	r4, #15
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a28      	ldr	r2, [pc, #160]	@ (8001828 <MX_USART2_UART_Init+0xb4>)
 8001788:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	22e1      	movs	r2, #225	@ 0xe1
 800178e:	0252      	lsls	r2, r2, #9
 8001790:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f002 f972 	bl	8003ab4 <HAL_UART_Init>
 80017d0:	1e03      	subs	r3, r0, #0
 80017d2:	d002      	beq.n	80017da <MX_USART2_UART_Init+0x66>
  {
    ret = HAL_ERROR;
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2100      	movs	r1, #0
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 ff96 	bl	8004710 <HAL_UARTEx_SetTxFifoThreshold>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d003      	beq.n	80017f0 <MX_USART2_UART_Init+0x7c>
  {
    ret = HAL_ERROR;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2100      	movs	r1, #0
 80017f4:	0018      	movs	r0, r3
 80017f6:	f002 ffcb 	bl	8004790 <HAL_UARTEx_SetRxFifoThreshold>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d003      	beq.n	8001806 <MX_USART2_UART_Init+0x92>
  {
    ret = HAL_ERROR;
 80017fe:	230f      	movs	r3, #15
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0018      	movs	r0, r3
 800180a:	f002 ff47 	bl	800469c <HAL_UARTEx_DisableFifoMode>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d003      	beq.n	800181a <MX_USART2_UART_Init+0xa6>
  {
    ret = HAL_ERROR;
 8001812:	230f      	movs	r3, #15
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b005      	add	sp, #20
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	40004400 	.word	0x40004400

0800182c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <__io_putchar+0x2c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	001a      	movs	r2, r3
 800183a:	2394      	movs	r3, #148	@ 0x94
 800183c:	435a      	muls	r2, r3
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <__io_putchar+0x30>)
 8001840:	18d0      	adds	r0, r2, r3
 8001842:	23fa      	movs	r3, #250	@ 0xfa
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	1d39      	adds	r1, r7, #4
 8001848:	2201      	movs	r2, #1
 800184a:	f002 f991 	bl	8003b70 <HAL_UART_Transmit>
  return ch;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000184 	.word	0x20000184
 800185c:	200000f0 	.word	0x200000f0

08001860 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b097      	sub	sp, #92	@ 0x5c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	2410      	movs	r4, #16
 800186a:	193b      	adds	r3, r7, r4
 800186c:	0018      	movs	r0, r3
 800186e:	2334      	movs	r3, #52	@ 0x34
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f003 fa4c 	bl	8004d10 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2202      	movs	r2, #2
 800187c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001884:	193b      	adds	r3, r7, r4
 8001886:	0018      	movs	r0, r3
 8001888:	f001 f83c 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <USART2_MspInit+0xc4>)
 800188e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001890:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <USART2_MspInit+0xc4>)
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	0289      	lsls	r1, r1, #10
 8001896:	430a      	orrs	r2, r1
 8001898:	63da      	str	r2, [r3, #60]	@ 0x3c
 800189a:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <USART2_MspInit+0xc4>)
 800189c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	029b      	lsls	r3, r3, #10
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <USART2_MspInit+0xc4>)
 80018aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <USART2_MspInit+0xc4>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <USART2_MspInit+0xc4>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80018c0:	2444      	movs	r4, #68	@ 0x44
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2204      	movs	r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	2202      	movs	r2, #2
 80018cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	2201      	movs	r2, #1
 80018de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80018e0:	193a      	adds	r2, r7, r4
 80018e2:	23a0      	movs	r3, #160	@ 0xa0
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 f97b 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80018ee:	0021      	movs	r1, r4
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2208      	movs	r2, #8
 80018f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2202      	movs	r2, #2
 80018fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2201      	movs	r2, #1
 800190c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800190e:	187a      	adds	r2, r7, r1
 8001910:	23a0      	movs	r3, #160	@ 0xa0
 8001912:	05db      	lsls	r3, r3, #23
 8001914:	0011      	movs	r1, r2
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f964 	bl	8001be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b017      	add	sp, #92	@ 0x5c
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_Init+0x3c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Init+0x3c>)
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	0049      	lsls	r1, r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001942:	2003      	movs	r0, #3
 8001944:	f000 f810 	bl	8001968 <HAL_InitTick>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d003      	beq.n	8001954 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e001      	b.n	8001958 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fd80 	bl	8001458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	781b      	ldrb	r3, [r3, #0]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40022000 	.word	0x40022000

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	230f      	movs	r3, #15
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_InitTick+0x88>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d02b      	beq.n	80019d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_InitTick+0x8c>)
 8001982:	681c      	ldr	r4, [r3, #0]
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <HAL_InitTick+0x88>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	0019      	movs	r1, r3
 800198a:	23fa      	movs	r3, #250	@ 0xfa
 800198c:	0098      	lsls	r0, r3, #2
 800198e:	f7fe fbc3 	bl	8000118 <__udivsi3>
 8001992:	0003      	movs	r3, r0
 8001994:	0019      	movs	r1, r3
 8001996:	0020      	movs	r0, r4
 8001998:	f7fe fbbe 	bl	8000118 <__udivsi3>
 800199c:	0003      	movs	r3, r0
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 f913 	bl	8001bca <HAL_SYSTICK_Config>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d112      	bne.n	80019ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d80a      	bhi.n	80019c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	2301      	movs	r3, #1
 80019b2:	425b      	negs	r3, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f8f2 	bl	8001ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_InitTick+0x90>)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e00d      	b.n	80019e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019c4:	230f      	movs	r3, #15
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e008      	b.n	80019e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ce:	230f      	movs	r3, #15
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e003      	b.n	80019e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019d8:	230f      	movs	r3, #15
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019e0:	230f      	movs	r3, #15
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	781b      	ldrb	r3, [r3, #0]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b005      	add	sp, #20
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_IncTick+0x1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	001a      	movs	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	18d2      	adds	r2, r2, r3
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	46c0      	nop			@ (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	20000188 	.word	0x20000188

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b02      	ldr	r3, [pc, #8]	@ (8001a30 <HAL_GetTick+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	20000188 	.word	0x20000188

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	001a      	movs	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	189b      	adds	r3, r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	f7ff ffe0 	bl	8001a20 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	46c0      	nop			@ (mov r8, r8)
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b004      	add	sp, #16
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	2000000c 	.word	0x2000000c

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a90:	d828      	bhi.n	8001ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a92:	4a2f      	ldr	r2, [pc, #188]	@ (8001b50 <__NVIC_SetPriority+0xd4>)
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	33c0      	adds	r3, #192	@ 0xc0
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	589b      	ldr	r3, [r3, r2]
 8001aa2:	1dfa      	adds	r2, r7, #7
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	400a      	ands	r2, r1
 8001aac:	00d2      	lsls	r2, r2, #3
 8001aae:	21ff      	movs	r1, #255	@ 0xff
 8001ab0:	4091      	lsls	r1, r2
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	43d2      	mvns	r2, r2
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	22ff      	movs	r2, #255	@ 0xff
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	2303      	movs	r3, #3
 8001aca:	4003      	ands	r3, r0
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad0:	481f      	ldr	r0, [pc, #124]	@ (8001b50 <__NVIC_SetPriority+0xd4>)
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	430a      	orrs	r2, r1
 8001adc:	33c0      	adds	r3, #192	@ 0xc0
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ae2:	e031      	b.n	8001b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <__NVIC_SetPriority+0xd8>)
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	0019      	movs	r1, r3
 8001aec:	230f      	movs	r3, #15
 8001aee:	400b      	ands	r3, r1
 8001af0:	3b08      	subs	r3, #8
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3306      	adds	r3, #6
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1dfa      	adds	r2, r7, #7
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	0011      	movs	r1, r2
 8001b04:	2203      	movs	r2, #3
 8001b06:	400a      	ands	r2, r1
 8001b08:	00d2      	lsls	r2, r2, #3
 8001b0a:	21ff      	movs	r1, #255	@ 0xff
 8001b0c:	4091      	lsls	r1, r2
 8001b0e:	000a      	movs	r2, r1
 8001b10:	43d2      	mvns	r2, r2
 8001b12:	401a      	ands	r2, r3
 8001b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	0018      	movs	r0, r3
 8001b24:	2303      	movs	r3, #3
 8001b26:	4003      	ands	r3, r0
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b2c:	4809      	ldr	r0, [pc, #36]	@ (8001b54 <__NVIC_SetPriority+0xd8>)
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	001c      	movs	r4, r3
 8001b34:	230f      	movs	r3, #15
 8001b36:	4023      	ands	r3, r4
 8001b38:	3b08      	subs	r3, #8
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	3306      	adds	r3, #6
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	18c3      	adds	r3, r0, r3
 8001b44:	3304      	adds	r3, #4
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	46c0      	nop			@ (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b003      	add	sp, #12
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	045b      	lsls	r3, r3, #17
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d301      	bcc.n	8001b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e010      	b.n	8001b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <SysTick_Config+0x44>)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	3a01      	subs	r2, #1
 8001b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b78:	2301      	movs	r3, #1
 8001b7a:	425b      	negs	r3, r3
 8001b7c:	2103      	movs	r1, #3
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7ff ff7c 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <SysTick_Config+0x44>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <SysTick_Config+0x44>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	210f      	movs	r1, #15
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	0011      	movs	r1, r2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff ff5d 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff ffbf 	bl	8001b58 <SysTick_Config>
 8001bda:	0003      	movs	r3, r0
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e147      	b.n	8001e84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4091      	lsls	r1, r2
 8001bfe:	000a      	movs	r2, r1
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d100      	bne.n	8001c0c <HAL_GPIO_Init+0x28>
 8001c0a:	e138      	b.n	8001e7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d005      	beq.n	8001c24 <HAL_GPIO_Init+0x40>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d130      	bne.n	8001c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	409a      	lsls	r2, r3
 8001c32:	0013      	movs	r3, r2
 8001c34:	43da      	mvns	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	409a      	lsls	r2, r3
 8001c46:	0013      	movs	r3, r2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	2201      	movs	r2, #1
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d017      	beq.n	8001cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d123      	bne.n	8001d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	58d3      	ldr	r3, [r2, r3]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	43da      	mvns	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2107      	movs	r1, #7
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	6939      	ldr	r1, [r7, #16]
 8001d14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	43da      	mvns	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	401a      	ands	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	23c0      	movs	r3, #192	@ 0xc0
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	4013      	ands	r3, r2
 8001d54:	d100      	bne.n	8001d58 <HAL_GPIO_Init+0x174>
 8001d56:	e092      	b.n	8001e7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d58:	4a50      	ldr	r2, [pc, #320]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3318      	adds	r3, #24
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	589b      	ldr	r3, [r3, r2]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	220f      	movs	r2, #15
 8001d70:	409a      	lsls	r2, r3
 8001d72:	0013      	movs	r3, r2
 8001d74:	43da      	mvns	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	23a0      	movs	r3, #160	@ 0xa0
 8001d80:	05db      	lsls	r3, r3, #23
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x1ca>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	@ (8001ea0 <HAL_GPIO_Init+0x2bc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x1c6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a44      	ldr	r2, [pc, #272]	@ (8001ea4 <HAL_GPIO_Init+0x2c0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x1c2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a43      	ldr	r2, [pc, #268]	@ (8001ea8 <HAL_GPIO_Init+0x2c4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x1be>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x1cc>
 8001da2:	2305      	movs	r3, #5
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x1cc>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x1cc>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x1cc>
 8001dae:	2300      	movs	r3, #0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	2103      	movs	r1, #3
 8001db4:	400a      	ands	r2, r1
 8001db6:	00d2      	lsls	r2, r2, #3
 8001db8:	4093      	lsls	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001dc0:	4936      	ldr	r1, [pc, #216]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dce:	4b33      	ldr	r3, [pc, #204]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	035b      	lsls	r3, r3, #13
 8001de6:	4013      	ands	r3, r2
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	039b      	lsls	r3, r3, #14
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e22:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001e24:	2384      	movs	r3, #132	@ 0x84
 8001e26:	58d3      	ldr	r3, [r2, r3]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e48:	4914      	ldr	r1, [pc, #80]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001e4a:	2284      	movs	r2, #132	@ 0x84
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e50:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001e52:	2380      	movs	r3, #128	@ 0x80
 8001e54:	58d3      	ldr	r3, [r2, r3]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e76:	4909      	ldr	r1, [pc, #36]	@ (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001e78:	2280      	movs	r2, #128	@ 0x80
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	40da      	lsrs	r2, r3
 8001e8c:	1e13      	subs	r3, r2, #0
 8001e8e:	d000      	beq.n	8001e92 <HAL_GPIO_Init+0x2ae>
 8001e90:	e6b0      	b.n	8001bf4 <HAL_GPIO_Init+0x10>
  }
}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b006      	add	sp, #24
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	50000400 	.word	0x50000400
 8001ea4:	50000800 	.word	0x50000800
 8001ea8:	50000c00 	.word	0x50000c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	0008      	movs	r0, r1
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	1cbb      	adds	r3, r7, #2
 8001eba:	1c02      	adds	r2, r0, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	1c7b      	adds	r3, r7, #1
 8001ec0:	1c0a      	adds	r2, r1, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec4:	1c7b      	adds	r3, r7, #1
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ecc:	1cbb      	adds	r3, r7, #2
 8001ece:	881a      	ldrh	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed4:	e003      	b.n	8001ede <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed6:	1cbb      	adds	r3, r7, #2
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d11f      	bne.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	0013      	movs	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	189b      	adds	r3, r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4912      	ldr	r1, [pc, #72]	@ (8001f64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7fe f8fc 	bl	8000118 <__udivsi3>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3301      	adds	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f26:	e008      	b.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e001      	b.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e009      	b.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	401a      	ands	r2, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d0ed      	beq.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	fffff9ff 	.word	0xfffff9ff
 8001f60:	20000000 	.word	0x20000000
 8001f64:	000f4240 	.word	0x000f4240

08001f68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	23e0      	movs	r3, #224	@ 0xe0
 8001f72:	01db      	lsls	r3, r3, #7
 8001f74:	4013      	ands	r3, r2
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e2fe      	b.n	8002590 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x1e>
 8001f9c:	e07c      	b.n	8002098 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9e:	4bc3      	ldr	r3, [pc, #780]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2238      	movs	r2, #56	@ 0x38
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa8:	4bc0      	ldr	r3, [pc, #768]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2203      	movs	r2, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3e>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d002      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d062      	beq.n	8002096 <HAL_RCC_OscConfig+0x116>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d15e      	bne.n	8002096 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e2d9      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x78>
 8001fe8:	4bb0      	ldr	r3, [pc, #704]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4baf      	ldr	r3, [pc, #700]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e020      	b.n	800203a <HAL_RCC_OscConfig+0xba>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23a0      	movs	r3, #160	@ 0xa0
 8001ffe:	02db      	lsls	r3, r3, #11
 8002000:	429a      	cmp	r2, r3
 8002002:	d10e      	bne.n	8002022 <HAL_RCC_OscConfig+0xa2>
 8002004:	4ba9      	ldr	r3, [pc, #676]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4ba8      	ldr	r3, [pc, #672]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800200a:	2180      	movs	r1, #128	@ 0x80
 800200c:	02c9      	lsls	r1, r1, #11
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	4ba6      	ldr	r3, [pc, #664]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4ba5      	ldr	r3, [pc, #660]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0249      	lsls	r1, r1, #9
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0xba>
 8002022:	4ba2      	ldr	r3, [pc, #648]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4ba1      	ldr	r3, [pc, #644]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002028:	49a1      	ldr	r1, [pc, #644]	@ (80022b0 <HAL_RCC_OscConfig+0x330>)
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	4b9f      	ldr	r3, [pc, #636]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b9e      	ldr	r3, [pc, #632]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002034:	499f      	ldr	r1, [pc, #636]	@ (80022b4 <HAL_RCC_OscConfig+0x334>)
 8002036:	400a      	ands	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d014      	beq.n	800206c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff fced 	bl	8001a20 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fce8 	bl	8001a20 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e298      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205e:	4b93      	ldr	r3, [pc, #588]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xcc>
 800206a:	e015      	b.n	8002098 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff fcd8 	bl	8001a20 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002076:	f7ff fcd3 	bl	8001a20 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	@ 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e283      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002088:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	4013      	ands	r3, r2
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0xf6>
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d100      	bne.n	80020a4 <HAL_RCC_OscConfig+0x124>
 80020a2:	e099      	b.n	80021d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a4:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2238      	movs	r2, #56	@ 0x38
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ae:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2203      	movs	r2, #3
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0x144>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d002      	beq.n	80020ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d135      	bne.n	8002136 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ca:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4013      	ands	r3, r2
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x162>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e256      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a74      	ldr	r2, [pc, #464]	@ (80022b8 <HAL_RCC_OscConfig+0x338>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	4b6e      	ldr	r3, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d112      	bne.n	8002124 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020fe:	4b6b      	ldr	r3, [pc, #428]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6e      	ldr	r2, [pc, #440]	@ (80022bc <HAL_RCC_OscConfig+0x33c>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002112:	4b66      	ldr	r3, [pc, #408]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	2207      	movs	r2, #7
 800211a:	4013      	ands	r3, r2
 800211c:	4a68      	ldr	r2, [pc, #416]	@ (80022c0 <HAL_RCC_OscConfig+0x340>)
 800211e:	40da      	lsrs	r2, r3
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_RCC_OscConfig+0x344>)
 8002122:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002124:	4b68      	ldr	r3, [pc, #416]	@ (80022c8 <HAL_RCC_OscConfig+0x348>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fc1d 	bl	8001968 <HAL_InitTick>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d051      	beq.n	80021d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e22c      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d030      	beq.n	80021a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800213e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5e      	ldr	r2, [pc, #376]	@ (80022bc <HAL_RCC_OscConfig+0x33c>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002152:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b55      	ldr	r3, [pc, #340]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0049      	lsls	r1, r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fc5e 	bl	8001a20 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fc59 	bl	8001a20 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e209      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217c:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4013      	ands	r3, r2
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a4a      	ldr	r2, [pc, #296]	@ (80022b8 <HAL_RCC_OscConfig+0x338>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	021a      	lsls	r2, r3, #8
 8002198:	4b44      	ldr	r3, [pc, #272]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	e01b      	b.n	80021d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021a0:	4b42      	ldr	r3, [pc, #264]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021a6:	4949      	ldr	r1, [pc, #292]	@ (80022cc <HAL_RCC_OscConfig+0x34c>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc38 	bl	8001a20 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff fc33 	bl	8001a20 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1e3      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c8:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4013      	ands	r3, r2
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x236>
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2208      	movs	r2, #8
 80021de:	4013      	ands	r3, r2
 80021e0:	d047      	beq.n	8002272 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021e2:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2238      	movs	r2, #56	@ 0x38
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b18      	cmp	r3, #24
 80021ec:	d10a      	bne.n	8002204 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021ee:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d03c      	beq.n	8002272 <HAL_RCC_OscConfig+0x2f2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d138      	bne.n	8002272 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e1c5      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800220e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002210:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002212:	2101      	movs	r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fc02 	bl	8001a20 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002222:	f7ff fbfd 	bl	8001a20 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1ad      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002238:	2202      	movs	r2, #2
 800223a:	4013      	ands	r3, r2
 800223c:	d0f1      	beq.n	8002222 <HAL_RCC_OscConfig+0x2a2>
 800223e:	e018      	b.n	8002272 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002242:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002246:	2101      	movs	r1, #1
 8002248:	438a      	bics	r2, r1
 800224a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff fbe8 	bl	8001a20 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7ff fbe3 	bl	8001a20 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e193      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800226a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d1f1      	bne.n	8002256 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2204      	movs	r2, #4
 8002278:	4013      	ands	r3, r2
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x2fe>
 800227c:	e0c6      	b.n	800240c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	231f      	movs	r3, #31
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2238      	movs	r2, #56	@ 0x38
 800228c:	4013      	ands	r3, r2
 800228e:	2b20      	cmp	r3, #32
 8002290:	d11e      	bne.n	80022d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_RCC_OscConfig+0x31e>
 800229c:	e0b6      	b.n	800240c <HAL_RCC_OscConfig+0x48c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d000      	beq.n	80022a8 <HAL_RCC_OscConfig+0x328>
 80022a6:	e0b1      	b.n	800240c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e171      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	fffeffff 	.word	0xfffeffff
 80022b4:	fffbffff 	.word	0xfffbffff
 80022b8:	ffff80ff 	.word	0xffff80ff
 80022bc:	ffffc7ff 	.word	0xffffc7ff
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000008 	.word	0x20000008
 80022cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d0:	4bb1      	ldr	r3, [pc, #708]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80022d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	4013      	ands	r3, r2
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x360>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x362>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4bac      	ldr	r3, [pc, #688]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80022e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ea:	4bab      	ldr	r3, [pc, #684]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80022ec:	2180      	movs	r1, #128	@ 0x80
 80022ee:	0549      	lsls	r1, r1, #21
 80022f0:	430a      	orrs	r2, r1
 80022f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022f4:	4ba8      	ldr	r3, [pc, #672]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80022f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002302:	231f      	movs	r3, #31
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230a:	4ba4      	ldr	r3, [pc, #656]	@ (800259c <HAL_RCC_OscConfig+0x61c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4013      	ands	r3, r2
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002316:	4ba1      	ldr	r3, [pc, #644]	@ (800259c <HAL_RCC_OscConfig+0x61c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4ba0      	ldr	r3, [pc, #640]	@ (800259c <HAL_RCC_OscConfig+0x61c>)
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0049      	lsls	r1, r1, #1
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002324:	f7ff fb7c 	bl	8001a20 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7ff fb77 	bl	8001a20 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e127      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4b96      	ldr	r3, [pc, #600]	@ (800259c <HAL_RCC_OscConfig+0x61c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x3e2>
 8002354:	4b90      	ldr	r3, [pc, #576]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002356:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002358:	4b8f      	ldr	r3, [pc, #572]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800235a:	2101      	movs	r1, #1
 800235c:	430a      	orrs	r2, r1
 800235e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x41c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x404>
 800236a:	4b8b      	ldr	r3, [pc, #556]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800236c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800236e:	4b8a      	ldr	r3, [pc, #552]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002370:	2104      	movs	r1, #4
 8002372:	430a      	orrs	r2, r1
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002376:	4b88      	ldr	r3, [pc, #544]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002378:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800237a:	4b87      	ldr	r3, [pc, #540]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x41c>
 8002384:	4b84      	ldr	r3, [pc, #528]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002386:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002388:	4b83      	ldr	r3, [pc, #524]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002390:	4b81      	ldr	r3, [pc, #516]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002394:	4b80      	ldr	r3, [pc, #512]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002396:	2104      	movs	r1, #4
 8002398:	438a      	bics	r2, r1
 800239a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff fb3c 	bl	8001a20 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fb37 	bl	8001a20 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a79      	ldr	r2, [pc, #484]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0e6      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x42e>
 80023cc:	e013      	b.n	80023f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff fb27 	bl	8001a20 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d6:	e009      	b.n	80023ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7ff fb22 	bl	8001a20 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a6f      	ldr	r2, [pc, #444]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0d1      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80023ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b65      	ldr	r3, [pc, #404]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002404:	4b64      	ldr	r3, [pc, #400]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002406:	4967      	ldr	r1, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x624>)
 8002408:	400a      	ands	r2, r1
 800240a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x496>
 8002414:	e0bb      	b.n	800258e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002416:	4b60      	ldr	r3, [pc, #384]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2238      	movs	r2, #56	@ 0x38
 800241c:	4013      	ands	r3, r2
 800241e:	2b10      	cmp	r3, #16
 8002420:	d100      	bne.n	8002424 <HAL_RCC_OscConfig+0x4a4>
 8002422:	e07b      	b.n	800251c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d156      	bne.n	80024da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b5a      	ldr	r3, [pc, #360]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b59      	ldr	r3, [pc, #356]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002432:	495d      	ldr	r1, [pc, #372]	@ (80025a8 <HAL_RCC_OscConfig+0x628>)
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7ff faf2 	bl	8001a20 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff faed 	bl	8001a20 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e09d      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	4b50      	ldr	r3, [pc, #320]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	049b      	lsls	r3, r3, #18
 800245c:	4013      	ands	r3, r2
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	4b4d      	ldr	r3, [pc, #308]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a51      	ldr	r2, [pc, #324]	@ (80025ac <HAL_RCC_OscConfig+0x62c>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	431a      	orrs	r2, r3
 800248e:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b40      	ldr	r3, [pc, #256]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	0449      	lsls	r1, r1, #17
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0549      	lsls	r1, r1, #21
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fab6 	bl	8001a20 <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff fab1 	bl	8001a20 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e061      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024cc:	4b32      	ldr	r3, [pc, #200]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	049b      	lsls	r3, r3, #18
 80024d4:	4013      	ands	r3, r2
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x53a>
 80024d8:	e059      	b.n	800258e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 80024e0:	4931      	ldr	r1, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x628>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7ff fa9b 	bl	8001a20 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff fa96 	bl	8001a20 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e046      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002502:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	049b      	lsls	r3, r3, #18
 800250a:	4013      	ands	r3, r2
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 8002514:	4926      	ldr	r1, [pc, #152]	@ (80025b0 <HAL_RCC_OscConfig+0x630>)
 8002516:	400a      	ands	r2, r1
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	e038      	b.n	800258e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e033      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_OscConfig+0x618>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2203      	movs	r2, #3
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	429a      	cmp	r2, r3
 800253a:	d126      	bne.n	800258a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2270      	movs	r2, #112	@ 0x70
 8002540:	401a      	ands	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d11f      	bne.n	800258a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	23fe      	movs	r3, #254	@ 0xfe
 800254e:	01db      	lsls	r3, r3, #7
 8002550:	401a      	ands	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d116      	bne.n	800258a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	23f8      	movs	r3, #248	@ 0xf8
 8002560:	039b      	lsls	r3, r3, #14
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d10e      	bne.n	800258a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	23e0      	movs	r3, #224	@ 0xe0
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	0f5b      	lsrs	r3, r3, #29
 8002580:	075a      	lsls	r2, r3, #29
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b008      	add	sp, #32
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	00001388 	.word	0x00001388
 80025a4:	efffffff 	.word	0xefffffff
 80025a8:	feffffff 	.word	0xfeffffff
 80025ac:	11c1808c 	.word	0x11c1808c
 80025b0:	eefefffc 	.word	0xeefefffc

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0e9      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2207      	movs	r2, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d91e      	bls.n	8002614 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b73      	ldr	r3, [pc, #460]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2207      	movs	r2, #7
 80025dc:	4393      	bics	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	4b70      	ldr	r3, [pc, #448]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025e8:	f7ff fa1a 	bl	8001a20 <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f0:	e009      	b.n	8002606 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f2:	f7ff fa15 	bl	8001a20 <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a6a      	ldr	r2, [pc, #424]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0ca      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002606:	4b67      	ldr	r3, [pc, #412]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2207      	movs	r2, #7
 800260c:	4013      	ands	r3, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d015      	beq.n	800264a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d006      	beq.n	8002636 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002628:	4b60      	ldr	r3, [pc, #384]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b5f      	ldr	r3, [pc, #380]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	21e0      	movs	r1, #224	@ 0xe0
 8002630:	01c9      	lsls	r1, r1, #7
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002636:	4b5d      	ldr	r3, [pc, #372]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a5d      	ldr	r2, [pc, #372]	@ (80027b0 <HAL_RCC_ClockConfig+0x1fc>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d057      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d12b      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e097      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002674:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	049b      	lsls	r3, r3, #18
 800267c:	4013      	ands	r3, r2
 800267e:	d11f      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e08b      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268c:	4b47      	ldr	r3, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4013      	ands	r3, r2
 8002696:	d113      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e07f      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a4:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 80026a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d108      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e074      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b2:	4b3e      	ldr	r3, [pc, #248]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e06d      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2207      	movs	r2, #7
 80026c6:	4393      	bics	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d4:	f7ff f9a4 	bl	8001a20 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7ff f99f 	bl	8001a20 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4a2f      	ldr	r2, [pc, #188]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e054      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2238      	movs	r2, #56	@ 0x38
 80026f8:	401a      	ands	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	429a      	cmp	r2, r3
 8002702:	d1ec      	bne.n	80026de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2207      	movs	r2, #7
 800270a:	4013      	ands	r3, r2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d21e      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2207      	movs	r2, #7
 8002718:	4393      	bics	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002724:	f7ff f97c 	bl	8001a20 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272c:	e009      	b.n	8002742 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272e:	f7ff f977 	bl	8001a20 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	4a1b      	ldr	r2, [pc, #108]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e02c      	b.n	800279c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2207      	movs	r2, #7
 8002748:	4013      	ands	r3, r2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d1ee      	bne.n	800272e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2204      	movs	r2, #4
 8002756:	4013      	ands	r3, r2
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <HAL_RCC_ClockConfig+0x200>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800276e:	f000 f829 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002772:	0001      	movs	r1, r0
 8002774:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_RCC_ClockConfig+0x1f8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	220f      	movs	r2, #15
 800277c:	401a      	ands	r2, r3
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_RCC_ClockConfig+0x204>)
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	58d3      	ldr	r3, [r2, r3]
 8002784:	221f      	movs	r2, #31
 8002786:	4013      	ands	r3, r2
 8002788:	000a      	movs	r2, r1
 800278a:	40da      	lsrs	r2, r3
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_RCC_ClockConfig+0x208>)
 800278e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_ClockConfig+0x20c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff f8e7 	bl	8001968 <HAL_InitTick>
 800279a:	0003      	movs	r3, r0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b004      	add	sp, #16
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40022000 	.word	0x40022000
 80027a8:	00001388 	.word	0x00001388
 80027ac:	40021000 	.word	0x40021000
 80027b0:	fffff0ff 	.word	0xfffff0ff
 80027b4:	ffff8fff 	.word	0xffff8fff
 80027b8:	08005e80 	.word	0x08005e80
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000008 	.word	0x20000008

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ca:	4b3c      	ldr	r3, [pc, #240]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2238      	movs	r2, #56	@ 0x38
 80027d0:	4013      	ands	r3, r2
 80027d2:	d10f      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027d4:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0adb      	lsrs	r3, r3, #11
 80027da:	2207      	movs	r2, #7
 80027dc:	4013      	ands	r3, r2
 80027de:	2201      	movs	r2, #1
 80027e0:	409a      	lsls	r2, r3
 80027e2:	0013      	movs	r3, r2
 80027e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	4835      	ldr	r0, [pc, #212]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027ea:	f7fd fc95 	bl	8000118 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	e05d      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f4:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2238      	movs	r2, #56	@ 0x38
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	e054      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2238      	movs	r2, #56	@ 0x38
 800280c:	4013      	ands	r3, r2
 800280e:	2b10      	cmp	r3, #16
 8002810:	d138      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002812:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2203      	movs	r2, #3
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800281c:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	2207      	movs	r2, #7
 8002824:	4013      	ands	r3, r2
 8002826:	3301      	adds	r3, #1
 8002828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d10d      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	4823      	ldr	r0, [pc, #140]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002834:	f7fd fc70 	bl	8000118 <__udivsi3>
 8002838:	0003      	movs	r3, r0
 800283a:	0019      	movs	r1, r3
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	227f      	movs	r2, #127	@ 0x7f
 8002844:	4013      	ands	r3, r2
 8002846:	434b      	muls	r3, r1
 8002848:	617b      	str	r3, [r7, #20]
        break;
 800284a:	e00d      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	481c      	ldr	r0, [pc, #112]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002850:	f7fd fc62 	bl	8000118 <__udivsi3>
 8002854:	0003      	movs	r3, r0
 8002856:	0019      	movs	r1, r3
 8002858:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	227f      	movs	r2, #127	@ 0x7f
 8002860:	4013      	ands	r3, r2
 8002862:	434b      	muls	r3, r1
 8002864:	617b      	str	r3, [r7, #20]
        break;
 8002866:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0f5b      	lsrs	r3, r3, #29
 800286e:	2207      	movs	r2, #7
 8002870:	4013      	ands	r3, r2
 8002872:	3301      	adds	r3, #1
 8002874:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f7fd fc4d 	bl	8000118 <__udivsi3>
 800287e:	0003      	movs	r3, r0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e015      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2238      	movs	r2, #56	@ 0x38
 800288a:	4013      	ands	r3, r2
 800288c:	2b20      	cmp	r3, #32
 800288e:	d103      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2238      	movs	r2, #56	@ 0x38
 800289e:	4013      	ands	r3, r2
 80028a0:	2b18      	cmp	r3, #24
 80028a2:	d103      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028a4:	23fa      	movs	r3, #250	@ 0xfa
 80028a6:	01db      	lsls	r3, r3, #7
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e001      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028b0:	693b      	ldr	r3, [r7, #16]
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b006      	add	sp, #24
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	40021000 	.word	0x40021000
 80028c0:	00f42400 	.word	0x00f42400

080028c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028dc:	f7ff fff2 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e0:	0004      	movs	r4, r0
 80028e2:	f7ff fb41 	bl	8001f68 <LL_RCC_GetAPB1Prescaler>
 80028e6:	0003      	movs	r3, r0
 80028e8:	0b1a      	lsrs	r2, r3, #12
 80028ea:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ec:	0092      	lsls	r2, r2, #2
 80028ee:	58d3      	ldr	r3, [r2, r3]
 80028f0:	221f      	movs	r2, #31
 80028f2:	4013      	ands	r3, r2
 80028f4:	40dc      	lsrs	r4, r3
 80028f6:	0023      	movs	r3, r4
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bdb0      	pop	{r4, r5, r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	08005ec0 	.word	0x08005ec0

08002904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800290c:	2313      	movs	r3, #19
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002914:	2312      	movs	r3, #18
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	4013      	ands	r3, r2
 8002926:	d100      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002928:	e0a3      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2011      	movs	r0, #17
 800292c:	183b      	adds	r3, r7, r0
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4bc3      	ldr	r3, [pc, #780]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	055b      	lsls	r3, r3, #21
 800293a:	4013      	ands	r3, r2
 800293c:	d110      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	4bc0      	ldr	r3, [pc, #768]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002942:	4bbf      	ldr	r3, [pc, #764]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	0549      	lsls	r1, r1, #21
 8002948:	430a      	orrs	r2, r1
 800294a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800294c:	4bbc      	ldr	r3, [pc, #752]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	055b      	lsls	r3, r3, #21
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	183b      	adds	r3, r7, r0
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4bb8      	ldr	r3, [pc, #736]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4bb7      	ldr	r3, [pc, #732]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	0049      	lsls	r1, r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800296e:	f7ff f857 	bl	8001a20 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002976:	e00b      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7ff f852 	bl	8001a20 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d904      	bls.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002986:	2313      	movs	r3, #19
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2203      	movs	r2, #3
 800298c:	701a      	strb	r2, [r3, #0]
        break;
 800298e:	e005      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002990:	4bac      	ldr	r3, [pc, #688]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4013      	ands	r3, r2
 800299a:	d0ed      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800299c:	2313      	movs	r3, #19
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d154      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a6:	4ba6      	ldr	r3, [pc, #664]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029aa:	23c0      	movs	r3, #192	@ 0xc0
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d019      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d014      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029c2:	4b9f      	ldr	r3, [pc, #636]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	4aa0      	ldr	r2, [pc, #640]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029d0:	4b9b      	ldr	r3, [pc, #620]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d2:	2180      	movs	r1, #128	@ 0x80
 80029d4:	0249      	lsls	r1, r1, #9
 80029d6:	430a      	orrs	r2, r1
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029da:	4b99      	ldr	r3, [pc, #612]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029de:	4b98      	ldr	r3, [pc, #608]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e0:	499a      	ldr	r1, [pc, #616]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e6:	4b96      	ldr	r3, [pc, #600]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d016      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7ff f814 	bl	8001a20 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fc:	e00c      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7ff f80f 	bl	8001a20 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4a91      	ldr	r2, [pc, #580]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d904      	bls.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a0e:	2313      	movs	r3, #19
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2203      	movs	r2, #3
 8002a14:	701a      	strb	r2, [r3, #0]
            break;
 8002a16:	e004      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a18:	4b89      	ldr	r3, [pc, #548]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d0ed      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a22:	2313      	movs	r3, #19
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2c:	4b84      	ldr	r3, [pc, #528]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	4a85      	ldr	r2, [pc, #532]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a3a:	4b81      	ldr	r3, [pc, #516]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a40:	e00c      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a42:	2312      	movs	r3, #18
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2213      	movs	r2, #19
 8002a48:	18ba      	adds	r2, r7, r2
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e005      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	2312      	movs	r3, #18
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2213      	movs	r2, #19
 8002a56:	18ba      	adds	r2, r7, r2
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a5c:	2311      	movs	r3, #17
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d105      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	4b76      	ldr	r3, [pc, #472]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a6a:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6c:	4979      	ldr	r1, [pc, #484]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a7c:	4b70      	ldr	r3, [pc, #448]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	2203      	movs	r2, #3
 8002a82:	4393      	bics	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9a:	4b69      	ldr	r3, [pc, #420]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b65      	ldr	r3, [pc, #404]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab8:	4b61      	ldr	r3, [pc, #388]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	4a66      	ldr	r2, [pc, #408]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad8:	4b59      	ldr	r3, [pc, #356]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	4a5f      	ldr	r2, [pc, #380]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	4b56      	ldr	r3, [pc, #344]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002af8:	4b51      	ldr	r3, [pc, #324]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	4a58      	ldr	r2, [pc, #352]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2220      	movs	r2, #32
 8002b12:	4013      	ands	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	4a52      	ldr	r2, [pc, #328]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	4b46      	ldr	r3, [pc, #280]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	01db      	lsls	r3, r3, #7
 8002b32:	4013      	ands	r3, r2
 8002b34:	d015      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b36:	4b42      	ldr	r3, [pc, #264]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	0899      	lsrs	r1, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	4b3f      	ldr	r3, [pc, #252]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	05db      	lsls	r3, r3, #23
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	0249      	lsls	r1, r1, #9
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	031b      	lsls	r3, r3, #12
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b6e:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	2240      	movs	r2, #64	@ 0x40
 8002b74:	4393      	bics	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b7c:	4b30      	ldr	r3, [pc, #192]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	039b      	lsls	r3, r3, #14
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	4a35      	ldr	r2, [pc, #212]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b9c:	4b28      	ldr	r3, [pc, #160]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	03db      	lsls	r3, r3, #15
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d106      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	0449      	lsls	r1, r1, #17
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	03db      	lsls	r3, r3, #15
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d016      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	045b      	lsls	r3, r3, #17
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002be8:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	0449      	lsls	r1, r1, #17
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	@ 0x80
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d016      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c02:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	4a1a      	ldr	r2, [pc, #104]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	01db      	lsls	r3, r3, #7
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d106      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c28:	2180      	movs	r1, #128	@ 0x80
 8002c2a:	0249      	lsls	r1, r1, #9
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c30:	2312      	movs	r3, #18
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	781b      	ldrb	r3, [r3, #0]
}
 8002c36:	0018      	movs	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b006      	add	sp, #24
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	fffffcff 	.word	0xfffffcff
 8002c4c:	fffeffff 	.word	0xfffeffff
 8002c50:	00001388 	.word	0x00001388
 8002c54:	efffffff 	.word	0xefffffff
 8002c58:	fffff3ff 	.word	0xfffff3ff
 8002c5c:	fff3ffff 	.word	0xfff3ffff
 8002c60:	ffcfffff 	.word	0xffcfffff
 8002c64:	ffffcfff 	.word	0xffffcfff
 8002c68:	ffbfffff 	.word	0xffbfffff
 8002c6c:	feffffff 	.word	0xfeffffff
 8002c70:	ffff3fff 	.word	0xffff3fff

08002c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0a8      	b.n	8002dd8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	2382      	movs	r3, #130	@ 0x82
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d009      	beq.n	8002cae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61da      	str	r2, [r3, #28]
 8002ca0:	e005      	b.n	8002cae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	225d      	movs	r2, #93	@ 0x5d
 8002cb8:	5c9b      	ldrb	r3, [r3, r2]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	225c      	movs	r2, #92	@ 0x5c
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7fe fbe8 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	225d      	movs	r2, #93	@ 0x5d
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2140      	movs	r1, #64	@ 0x40
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	23e0      	movs	r3, #224	@ 0xe0
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d902      	bls.n	8002cfa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e002      	b.n	8002d00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	015b      	lsls	r3, r3, #5
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	23f0      	movs	r3, #240	@ 0xf0
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d008      	beq.n	8002d1e <HAL_SPI_Init+0xaa>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	23e0      	movs	r3, #224	@ 0xe0
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	2382      	movs	r3, #130	@ 0x82
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	2384      	movs	r3, #132	@ 0x84
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	400b      	ands	r3, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2102      	movs	r1, #2
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	2101      	movs	r1, #1
 8002d44:	400b      	ands	r3, r1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6999      	ldr	r1, [r3, #24]
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	400b      	ands	r3, r1
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2138      	movs	r1, #56	@ 0x38
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	2180      	movs	r1, #128	@ 0x80
 8002d64:	400b      	ands	r3, r1
 8002d66:	431a      	orrs	r2, r3
 8002d68:	0011      	movs	r1, r2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d6e:	2380      	movs	r3, #128	@ 0x80
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	401a      	ands	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	2204      	movs	r2, #4
 8002d84:	401a      	ands	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	2108      	movs	r1, #8
 8002d96:	400b      	ands	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	23f0      	movs	r3, #240	@ 0xf0
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	400b      	ands	r3, r1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	0011      	movs	r1, r2
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	015b      	lsls	r3, r3, #5
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4907      	ldr	r1, [pc, #28]	@ (8002de0 <HAL_SPI_Init+0x16c>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	225d      	movs	r2, #93	@ 0x5d
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	fffff7ff 	.word	0xfffff7ff

08002de4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	1dbb      	adds	r3, r7, #6
 8002df2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002df4:	231f      	movs	r3, #31
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	225c      	movs	r2, #92	@ 0x5c
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_SPI_Transmit+0x26>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e147      	b.n	800309a <HAL_SPI_Transmit+0x2b6>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	225c      	movs	r2, #92	@ 0x5c
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e12:	f7fe fe05 	bl	8001a20 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e1a:	2316      	movs	r3, #22
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	1dba      	adds	r2, r7, #6
 8002e20:	8812      	ldrh	r2, [r2, #0]
 8002e22:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	225d      	movs	r2, #93	@ 0x5d
 8002e28:	5c9b      	ldrb	r3, [r3, r2]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d004      	beq.n	8002e3a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002e30:	231f      	movs	r3, #31
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2202      	movs	r2, #2
 8002e36:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e38:	e128      	b.n	800308c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_SPI_Transmit+0x64>
 8002e40:	1dbb      	adds	r3, r7, #6
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002e48:	231f      	movs	r3, #31
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e50:	e11c      	b.n	800308c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	225d      	movs	r2, #93	@ 0x5d
 8002e56:	2103      	movs	r1, #3
 8002e58:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1dba      	adds	r2, r7, #6
 8002e6a:	8812      	ldrh	r2, [r2, #0]
 8002e6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1dba      	adds	r2, r7, #6
 8002e72:	8812      	ldrh	r2, [r2, #0]
 8002e74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2244      	movs	r2, #68	@ 0x44
 8002e80:	2100      	movs	r1, #0
 8002e82:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2246      	movs	r2, #70	@ 0x46
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d110      	bne.n	8002ec6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2140      	movs	r1, #64	@ 0x40
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	01c9      	lsls	r1, r1, #7
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2240      	movs	r2, #64	@ 0x40
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d007      	beq.n	8002ee4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2140      	movs	r1, #64	@ 0x40
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	23e0      	movs	r3, #224	@ 0xe0
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d952      	bls.n	8002f96 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_SPI_Transmit+0x11e>
 8002ef8:	2316      	movs	r3, #22
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d143      	bne.n	8002f8a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f26:	e030      	b.n	8002f8a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d112      	bne.n	8002f5c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f5a:	e016      	b.n	8002f8a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5c:	f7fe fd60 	bl	8001a20 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d802      	bhi.n	8002f72 <HAL_SPI_Transmit+0x18e>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HAL_SPI_Transmit+0x194>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d108      	bne.n	8002f8a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002f78:	231f      	movs	r3, #31
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	225d      	movs	r2, #93	@ 0x5d
 8002f84:	2101      	movs	r1, #1
 8002f86:	5499      	strb	r1, [r3, r2]
          goto error;
 8002f88:	e080      	b.n	800308c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1c9      	bne.n	8002f28 <HAL_SPI_Transmit+0x144>
 8002f94:	e053      	b.n	800303e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <HAL_SPI_Transmit+0x1c4>
 8002f9e:	2316      	movs	r3, #22
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d145      	bne.n	8003034 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002fce:	e031      	b.n	8003034 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d113      	bne.n	8003006 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003004:	e016      	b.n	8003034 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003006:	f7fe fd0b 	bl	8001a20 <HAL_GetTick>
 800300a:	0002      	movs	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d802      	bhi.n	800301c <HAL_SPI_Transmit+0x238>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_SPI_Transmit+0x23e>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003022:	231f      	movs	r3, #31
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2203      	movs	r2, #3
 8003028:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	225d      	movs	r2, #93	@ 0x5d
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
          goto error;
 8003032:	e02b      	b.n	800308c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1c8      	bne.n	8002fd0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 fcef 	bl	8003a28 <SPI_EndRxTxTransaction>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d002      	beq.n	8003054 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800307a:	231f      	movs	r3, #31
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e003      	b.n	800308c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	225d      	movs	r2, #93	@ 0x5d
 8003088:	2101      	movs	r1, #1
 800308a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	225c      	movs	r2, #92	@ 0x5c
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	781b      	ldrb	r3, [r3, #0]
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b008      	add	sp, #32
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	1dbb      	adds	r3, r7, #6
 80030b2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030b4:	2117      	movs	r1, #23
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	225d      	movs	r2, #93	@ 0x5d
 80030c0:	5c9b      	ldrb	r3, [r3, r2]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d003      	beq.n	80030d0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80030ce:	e12b      	b.n	8003328 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	2382      	movs	r3, #130	@ 0x82
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	429a      	cmp	r2, r3
 80030da:	d113      	bne.n	8003104 <HAL_SPI_Receive+0x60>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10f      	bne.n	8003104 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	225d      	movs	r2, #93	@ 0x5d
 80030e8:	2104      	movs	r1, #4
 80030ea:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	881c      	ldrh	r4, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	0023      	movs	r3, r4
 80030fc:	f000 f924 	bl	8003348 <HAL_SPI_TransmitReceive>
 8003100:	0003      	movs	r3, r0
 8003102:	e118      	b.n	8003336 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	225c      	movs	r2, #92	@ 0x5c
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_SPI_Receive+0x6e>
 800310e:	2302      	movs	r3, #2
 8003110:	e111      	b.n	8003336 <HAL_SPI_Receive+0x292>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	225c      	movs	r2, #92	@ 0x5c
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800311a:	f7fe fc81 	bl	8001a20 <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_SPI_Receive+0x8c>
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003130:	2317      	movs	r3, #23
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    goto error;
 8003138:	e0f6      	b.n	8003328 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	225d      	movs	r2, #93	@ 0x5d
 800313e:	2104      	movs	r1, #4
 8003140:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1dba      	adds	r2, r7, #6
 8003152:	2144      	movs	r1, #68	@ 0x44
 8003154:	8812      	ldrh	r2, [r2, #0]
 8003156:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1dba      	adds	r2, r7, #6
 800315c:	2146      	movs	r1, #70	@ 0x46
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	23e0      	movs	r3, #224	@ 0xe0
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	429a      	cmp	r2, r3
 800318a:	d908      	bls.n	800319e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	496a      	ldr	r1, [pc, #424]	@ (8003340 <HAL_SPI_Receive+0x29c>)
 8003198:	400a      	ands	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e008      	b.n	80031b0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2180      	movs	r1, #128	@ 0x80
 80031aa:	0149      	lsls	r1, r1, #5
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10f      	bne.n	80031dc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2140      	movs	r1, #64	@ 0x40
 80031c8:	438a      	bics	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	495b      	ldr	r1, [pc, #364]	@ (8003344 <HAL_SPI_Receive+0x2a0>)
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2240      	movs	r2, #64	@ 0x40
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d007      	beq.n	80031fa <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2140      	movs	r1, #64	@ 0x40
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	23e0      	movs	r3, #224	@ 0xe0
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	429a      	cmp	r2, r3
 8003204:	d900      	bls.n	8003208 <HAL_SPI_Receive+0x164>
 8003206:	e071      	b.n	80032ec <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003208:	e035      	b.n	8003276 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	2b01      	cmp	r3, #1
 8003216:	d117      	bne.n	8003248 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	001a      	movs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2246      	movs	r2, #70	@ 0x46
 8003238:	5a9b      	ldrh	r3, [r3, r2]
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b299      	uxth	r1, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2246      	movs	r2, #70	@ 0x46
 8003244:	5299      	strh	r1, [r3, r2]
 8003246:	e016      	b.n	8003276 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003248:	f7fe fbea 	bl	8001a20 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d802      	bhi.n	800325e <HAL_SPI_Receive+0x1ba>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_SPI_Receive+0x1c0>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d108      	bne.n	8003276 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003264:	2317      	movs	r3, #23
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	225d      	movs	r2, #93	@ 0x5d
 8003270:	2101      	movs	r1, #1
 8003272:	5499      	strb	r1, [r3, r2]
          goto error;
 8003274:	e058      	b.n	8003328 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2246      	movs	r2, #70	@ 0x46
 800327a:	5a9b      	ldrh	r3, [r3, r2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1c3      	bne.n	800320a <HAL_SPI_Receive+0x166>
 8003282:	e039      	b.n	80032f8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2201      	movs	r2, #1
 800328c:	4013      	ands	r3, r2
 800328e:	2b01      	cmp	r3, #1
 8003290:	d115      	bne.n	80032be <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	b292      	uxth	r2, r2
 800329e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2246      	movs	r2, #70	@ 0x46
 80032ae:	5a9b      	ldrh	r3, [r3, r2]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b299      	uxth	r1, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2246      	movs	r2, #70	@ 0x46
 80032ba:	5299      	strh	r1, [r3, r2]
 80032bc:	e016      	b.n	80032ec <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032be:	f7fe fbaf 	bl	8001a20 <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d802      	bhi.n	80032d4 <HAL_SPI_Receive+0x230>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	d102      	bne.n	80032da <HAL_SPI_Receive+0x236>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80032da:	2317      	movs	r3, #23
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2203      	movs	r2, #3
 80032e0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	225d      	movs	r2, #93	@ 0x5d
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
          goto error;
 80032ea:	e01d      	b.n	8003328 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2246      	movs	r2, #70	@ 0x46
 80032f0:	5a9b      	ldrh	r3, [r3, r2]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1c5      	bne.n	8003284 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fb34 	bl	800396c <SPI_EndRxTransaction>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d002      	beq.n	800330e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003316:	2317      	movs	r3, #23
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e003      	b.n	8003328 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	225d      	movs	r2, #93	@ 0x5d
 8003324:	2101      	movs	r1, #1
 8003326:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	225c      	movs	r2, #92	@ 0x5c
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003330:	2317      	movs	r3, #23
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b007      	add	sp, #28
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	ffffefff 	.word	0xffffefff
 8003344:	ffffbfff 	.word	0xffffbfff

08003348 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	001a      	movs	r2, r3
 8003356:	1cbb      	adds	r3, r7, #2
 8003358:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800335a:	2301      	movs	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800335e:	2323      	movs	r3, #35	@ 0x23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	225c      	movs	r2, #92	@ 0x5c
 800336a:	5c9b      	ldrb	r3, [r3, r2]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x2c>
 8003370:	2302      	movs	r3, #2
 8003372:	e1c4      	b.n	80036fe <HAL_SPI_TransmitReceive+0x3b6>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	225c      	movs	r2, #92	@ 0x5c
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800337c:	f7fe fb50 	bl	8001a20 <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003384:	201b      	movs	r0, #27
 8003386:	183b      	adds	r3, r7, r0
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	215d      	movs	r1, #93	@ 0x5d
 800338c:	5c52      	ldrb	r2, [r2, r1]
 800338e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003396:	2312      	movs	r3, #18
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	1cba      	adds	r2, r7, #2
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033a0:	183b      	adds	r3, r7, r0
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d011      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x84>
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	2382      	movs	r3, #130	@ 0x82
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d107      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x7a>
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d004      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80033c2:	2323      	movs	r3, #35	@ 0x23
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80033ca:	e191      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x98>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x98>
 80033d8:	1cbb      	adds	r3, r7, #2
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80033e0:	2323      	movs	r3, #35	@ 0x23
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80033e8:	e182      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	225d      	movs	r2, #93	@ 0x5d
 80033ee:	5c9b      	ldrb	r3, [r3, r2]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	225d      	movs	r2, #93	@ 0x5d
 80033fa:	2105      	movs	r1, #5
 80033fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1cba      	adds	r2, r7, #2
 800340e:	2146      	movs	r1, #70	@ 0x46
 8003410:	8812      	ldrh	r2, [r2, #0]
 8003412:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1cba      	adds	r2, r7, #2
 8003418:	2144      	movs	r1, #68	@ 0x44
 800341a:	8812      	ldrh	r2, [r2, #0]
 800341c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1cba      	adds	r2, r7, #2
 8003428:	8812      	ldrh	r2, [r2, #0]
 800342a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1cba      	adds	r2, r7, #2
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	23e0      	movs	r3, #224	@ 0xe0
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	429a      	cmp	r2, r3
 800344a:	d908      	bls.n	800345e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	49ac      	ldr	r1, [pc, #688]	@ (8003708 <HAL_SPI_TransmitReceive+0x3c0>)
 8003458:	400a      	ands	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	e008      	b.n	8003470 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	0149      	lsls	r1, r1, #5
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	4013      	ands	r3, r2
 800347a:	2b40      	cmp	r3, #64	@ 0x40
 800347c:	d007      	beq.n	800348e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2140      	movs	r1, #64	@ 0x40
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	23e0      	movs	r3, #224	@ 0xe0
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	429a      	cmp	r2, r3
 8003498:	d800      	bhi.n	800349c <HAL_SPI_TransmitReceive+0x154>
 800349a:	e083      	b.n	80035a4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x168>
 80034a4:	2312      	movs	r3, #18
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d000      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x168>
 80034ae:	e06d      	b.n	800358c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	881a      	ldrh	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d4:	e05a      	b.n	800358c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d11b      	bne.n	800351c <HAL_SPI_TransmitReceive+0x1d4>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_SPI_TransmitReceive+0x1d4>
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d113      	bne.n	800351c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2201      	movs	r2, #1
 8003524:	4013      	ands	r3, r2
 8003526:	2b01      	cmp	r3, #1
 8003528:	d11c      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x21c>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2246      	movs	r2, #70	@ 0x46
 800352e:	5a9b      	ldrh	r3, [r3, r2]
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	b292      	uxth	r2, r2
 8003542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2246      	movs	r2, #70	@ 0x46
 8003552:	5a9b      	ldrh	r3, [r3, r2]
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b299      	uxth	r1, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2246      	movs	r2, #70	@ 0x46
 800355e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003560:	2301      	movs	r3, #1
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003564:	f7fe fa5c 	bl	8001a20 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003570:	429a      	cmp	r2, r3
 8003572:	d80b      	bhi.n	800358c <HAL_SPI_TransmitReceive+0x244>
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	3301      	adds	r3, #1
 8003578:	d008      	beq.n	800358c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800357a:	2323      	movs	r3, #35	@ 0x23
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2203      	movs	r2, #3
 8003580:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	225d      	movs	r2, #93	@ 0x5d
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]
        goto error;
 800358a:	e0b1      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d19f      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x18e>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2246      	movs	r2, #70	@ 0x46
 800359a:	5a9b      	ldrh	r3, [r3, r2]
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d199      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x18e>
 80035a2:	e089      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x270>
 80035ac:	2312      	movs	r3, #18
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d000      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x270>
 80035b6:	e074      	b.n	80036a2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035de:	e060      	b.n	80036a2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2202      	movs	r2, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d11c      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x2e0>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x2e0>
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d114      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	2b01      	cmp	r3, #1
 8003634:	d11e      	bne.n	8003674 <HAL_SPI_TransmitReceive+0x32c>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2246      	movs	r2, #70	@ 0x46
 800363a:	5a9b      	ldrh	r3, [r3, r2]
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d018      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	001a      	movs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	7812      	ldrb	r2, [r2, #0]
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2246      	movs	r2, #70	@ 0x46
 8003662:	5a9b      	ldrh	r3, [r3, r2]
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b299      	uxth	r1, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2246      	movs	r2, #70	@ 0x46
 800366e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003670:	2301      	movs	r3, #1
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003674:	f7fe f9d4 	bl	8001a20 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003680:	429a      	cmp	r2, r3
 8003682:	d802      	bhi.n	800368a <HAL_SPI_TransmitReceive+0x342>
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	3301      	adds	r3, #1
 8003688:	d102      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x348>
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d108      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003690:	2323      	movs	r3, #35	@ 0x23
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2203      	movs	r2, #3
 8003696:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	225d      	movs	r2, #93	@ 0x5d
 800369c:	2101      	movs	r1, #1
 800369e:	5499      	strb	r1, [r3, r2]
        goto error;
 80036a0:	e026      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d199      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x298>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2246      	movs	r2, #70	@ 0x46
 80036b0:	5a9b      	ldrh	r3, [r3, r2]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d193      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f9b2 	bl	8003a28 <SPI_EndRxTxTransaction>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d006      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80036c8:	2323      	movs	r3, #35	@ 0x23
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80036de:	2323      	movs	r3, #35	@ 0x23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e003      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	225d      	movs	r2, #93	@ 0x5d
 80036ec:	2101      	movs	r1, #1
 80036ee:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	225c      	movs	r2, #92	@ 0x5c
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036f8:	2323      	movs	r3, #35	@ 0x23
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b00a      	add	sp, #40	@ 0x28
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	ffffefff 	.word	0xffffefff

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	1dfb      	adds	r3, r7, #7
 800371a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800371c:	f7fe f980 	bl	8001a20 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800372c:	f7fe f978 	bl	8001a20 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003734:	4b3a      	ldr	r3, [pc, #232]	@ (8003820 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	0d1b      	lsrs	r3, r3, #20
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	4353      	muls	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003742:	e058      	b.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	d055      	beq.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800374a:	f7fe f969 	bl	8001a20 <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	429a      	cmp	r2, r3
 8003758:	d902      	bls.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x54>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d142      	bne.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	21e0      	movs	r1, #224	@ 0xe0
 800376c:	438a      	bics	r2, r1
 800376e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	2382      	movs	r3, #130	@ 0x82
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	429a      	cmp	r2, r3
 800377a:	d113      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	429a      	cmp	r2, r3
 8003786:	d005      	beq.n	8003794 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2140      	movs	r1, #64	@ 0x40
 80037a0:	438a      	bics	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	019b      	lsls	r3, r3, #6
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d110      	bne.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	491a      	ldr	r1, [pc, #104]	@ (8003824 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80037bc:	400a      	ands	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	0189      	lsls	r1, r1, #6
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	225d      	movs	r2, #93	@ 0x5d
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	225c      	movs	r2, #92	@ 0x5c
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e017      	b.n	8003816 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	425a      	negs	r2, r3
 8003806:	4153      	adcs	r3, r2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	001a      	movs	r2, r3
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d197      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b008      	add	sp, #32
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	20000000 	.word	0x20000000
 8003824:	ffffdfff 	.word	0xffffdfff

08003828 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003836:	2317      	movs	r3, #23
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800383e:	f7fe f8ef 	bl	8001a20 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800384e:	f7fe f8e7 	bl	8001a20 <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800385e:	4b41      	ldr	r3, [pc, #260]	@ (8003964 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	0013      	movs	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	189b      	adds	r3, r3, r2
 8003868:	00da      	lsls	r2, r3, #3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	0d1b      	lsrs	r3, r3, #20
 800386e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003870:	4353      	muls	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003874:	e068      	b.n	8003948 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	23c0      	movs	r3, #192	@ 0xc0
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	429a      	cmp	r2, r3
 800387e:	d10a      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	2117      	movs	r1, #23
 800388e:	187b      	adds	r3, r7, r1
 8003890:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003892:	187b      	adds	r3, r7, r1
 8003894:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	d055      	beq.n	8003948 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389c:	f7fe f8c0 	bl	8001a20 <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d902      	bls.n	80038b2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d142      	bne.n	8003938 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	21e0      	movs	r1, #224	@ 0xe0
 80038be:	438a      	bics	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	2382      	movs	r3, #130	@ 0x82
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d113      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d005      	beq.n	80038e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d107      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2140      	movs	r1, #64	@ 0x40
 80038f2:	438a      	bics	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038fa:	2380      	movs	r3, #128	@ 0x80
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	429a      	cmp	r2, r3
 8003900:	d110      	bne.n	8003924 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4916      	ldr	r1, [pc, #88]	@ (8003968 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800390e:	400a      	ands	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	@ 0x80
 800391e:	0189      	lsls	r1, r1, #6
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	225d      	movs	r2, #93	@ 0x5d
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	225c      	movs	r2, #92	@ 0x5c
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e010      	b.n	800395a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3b01      	subs	r3, #1
 8003946:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d18e      	bne.n	8003876 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b00a      	add	sp, #40	@ 0x28
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	20000000 	.word	0x20000000
 8003968:	ffffdfff 	.word	0xffffdfff

0800396c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	2382      	movs	r3, #130	@ 0x82
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	429a      	cmp	r2, r3
 8003982:	d113      	bne.n	80039ac <SPI_EndRxTransaction+0x40>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	429a      	cmp	r2, r3
 800398e:	d005      	beq.n	800399c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2140      	movs	r1, #64	@ 0x40
 80039a8:	438a      	bics	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	0013      	movs	r3, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	2180      	movs	r1, #128	@ 0x80
 80039ba:	f7ff fea7 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d007      	beq.n	80039d2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	2220      	movs	r2, #32
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e026      	b.n	8003a20 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	2382      	movs	r3, #130	@ 0x82
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	429a      	cmp	r2, r3
 80039dc:	d11f      	bne.n	8003a1e <SPI_EndRxTransaction+0xb2>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d005      	beq.n	80039f6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d113      	bne.n	8003a1e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	23c0      	movs	r3, #192	@ 0xc0
 80039fa:	00d9      	lsls	r1, r3, #3
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	0013      	movs	r3, r2
 8003a04:	2200      	movs	r2, #0
 8003a06:	f7ff ff0f 	bl	8003828 <SPI_WaitFifoStateUntilTimeout>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d007      	beq.n	8003a1e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a12:	2220      	movs	r2, #32
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e000      	b.n	8003a20 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	23c0      	movs	r3, #192	@ 0xc0
 8003a38:	0159      	lsls	r1, r3, #5
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	0013      	movs	r3, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	f7ff fef0 	bl	8003828 <SPI_WaitFifoStateUntilTimeout>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d007      	beq.n	8003a5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	2220      	movs	r2, #32
 8003a52:	431a      	orrs	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e027      	b.n	8003aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	0013      	movs	r3, r2
 8003a66:	2200      	movs	r2, #0
 8003a68:	2180      	movs	r1, #128	@ 0x80
 8003a6a:	f7ff fe4f 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d007      	beq.n	8003a82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a76:	2220      	movs	r2, #32
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e014      	b.n	8003aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	23c0      	movs	r3, #192	@ 0xc0
 8003a86:	00d9      	lsls	r1, r3, #3
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	0013      	movs	r3, r2
 8003a90:	2200      	movs	r2, #0
 8003a92:	f7ff fec9 	bl	8003828 <SPI_WaitFifoStateUntilTimeout>
 8003a96:	1e03      	subs	r3, r0, #0
 8003a98:	d007      	beq.n	8003aaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e000      	b.n	8003aac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b004      	add	sp, #16
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e046      	b.n	8003b54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2288      	movs	r2, #136	@ 0x88
 8003aca:	589b      	ldr	r3, [r3, r2]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2284      	movs	r2, #132	@ 0x84
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f840 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2288      	movs	r2, #136	@ 0x88
 8003ae4:	2124      	movs	r1, #36	@ 0x24
 8003ae6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	438a      	bics	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 fb96 	bl	8004234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f8d4 	bl	8003cb8 <UART_SetConfig>
 8003b10:	0003      	movs	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e01c      	b.n	8003b54 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	490d      	ldr	r1, [pc, #52]	@ (8003b5c <HAL_UART_Init+0xa8>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	212a      	movs	r1, #42	@ 0x2a
 8003b36:	438a      	bics	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 fc25 	bl	800439c <UART_CheckIdleState>
 8003b52:	0003      	movs	r3, r0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	ffffb7ff 	.word	0xffffb7ff

08003b60 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003b68:	46c0      	nop			@ (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	@ 0x28
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	1dbb      	adds	r3, r7, #6
 8003b7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2288      	movs	r2, #136	@ 0x88
 8003b84:	589b      	ldr	r3, [r3, r2]
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d000      	beq.n	8003b8c <HAL_UART_Transmit+0x1c>
 8003b8a:	e090      	b.n	8003cae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_UART_Transmit+0x2a>
 8003b92:	1dbb      	adds	r3, r7, #6
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e088      	b.n	8003cb0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	015b      	lsls	r3, r3, #5
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d109      	bne.n	8003bbe <HAL_UART_Transmit+0x4e>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d001      	beq.n	8003bbe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e078      	b.n	8003cb0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2290      	movs	r2, #144	@ 0x90
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2288      	movs	r2, #136	@ 0x88
 8003bca:	2121      	movs	r1, #33	@ 0x21
 8003bcc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bce:	f7fd ff27 	bl	8001a20 <HAL_GetTick>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1dba      	adds	r2, r7, #6
 8003bda:	2154      	movs	r1, #84	@ 0x54
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1dba      	adds	r2, r7, #6
 8003be4:	2156      	movs	r1, #86	@ 0x56
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	2380      	movs	r3, #128	@ 0x80
 8003bf0:	015b      	lsls	r3, r3, #5
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d108      	bne.n	8003c08 <HAL_UART_Transmit+0x98>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e003      	b.n	8003c10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c10:	e030      	b.n	8003c74 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2180      	movs	r1, #128	@ 0x80
 8003c20:	f000 fc66 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2288      	movs	r2, #136	@ 0x88
 8003c2c:	2120      	movs	r1, #32
 8003c2e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e03d      	b.n	8003cb0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	001a      	movs	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	05d2      	lsls	r2, r2, #23
 8003c46:	0dd2      	lsrs	r2, r2, #23
 8003c48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e007      	b.n	8003c62 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2256      	movs	r2, #86	@ 0x56
 8003c66:	5a9b      	ldrh	r3, [r3, r2]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b299      	uxth	r1, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2256      	movs	r2, #86	@ 0x56
 8003c72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2256      	movs	r2, #86	@ 0x56
 8003c78:	5a9b      	ldrh	r3, [r3, r2]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1c8      	bne.n	8003c12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	0013      	movs	r3, r2
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2140      	movs	r1, #64	@ 0x40
 8003c8e:	f000 fc2f 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2288      	movs	r2, #136	@ 0x88
 8003c9a:	2120      	movs	r1, #32
 8003c9c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e006      	b.n	8003cb0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2288      	movs	r2, #136	@ 0x88
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b008      	add	sp, #32
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b5b0      	push	{r4, r5, r7, lr}
 8003cba:	b090      	sub	sp, #64	@ 0x40
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc0:	231a      	movs	r3, #26
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4aaf      	ldr	r2, [pc, #700]	@ (8003fa8 <UART_SetConfig+0x2f0>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4aaa      	ldr	r2, [pc, #680]	@ (8003fac <UART_SetConfig+0x2f4>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	68d9      	ldr	r1, [r3, #12]
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	0003      	movs	r3, r0
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4aa4      	ldr	r2, [pc, #656]	@ (8003fb0 <UART_SetConfig+0x2f8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a9f      	ldr	r2, [pc, #636]	@ (8003fb4 <UART_SetConfig+0x2fc>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	4393      	bics	r3, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	0003      	movs	r3, r0
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a95      	ldr	r2, [pc, #596]	@ (8003fb8 <UART_SetConfig+0x300>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d131      	bne.n	8003dcc <UART_SetConfig+0x114>
 8003d68:	4b94      	ldr	r3, [pc, #592]	@ (8003fbc <UART_SetConfig+0x304>)
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d01d      	beq.n	8003db0 <UART_SetConfig+0xf8>
 8003d74:	d823      	bhi.n	8003dbe <UART_SetConfig+0x106>
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d00c      	beq.n	8003d94 <UART_SetConfig+0xdc>
 8003d7a:	d820      	bhi.n	8003dbe <UART_SetConfig+0x106>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <UART_SetConfig+0xce>
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d00e      	beq.n	8003da2 <UART_SetConfig+0xea>
 8003d84:	e01b      	b.n	8003dbe <UART_SetConfig+0x106>
 8003d86:	231b      	movs	r3, #27
 8003d88:	2220      	movs	r2, #32
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	19db      	adds	r3, r3, r7
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e0b4      	b.n	8003efe <UART_SetConfig+0x246>
 8003d94:	231b      	movs	r3, #27
 8003d96:	2220      	movs	r2, #32
 8003d98:	189b      	adds	r3, r3, r2
 8003d9a:	19db      	adds	r3, r3, r7
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e0ad      	b.n	8003efe <UART_SetConfig+0x246>
 8003da2:	231b      	movs	r3, #27
 8003da4:	2220      	movs	r2, #32
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	19db      	adds	r3, r3, r7
 8003daa:	2204      	movs	r2, #4
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	e0a6      	b.n	8003efe <UART_SetConfig+0x246>
 8003db0:	231b      	movs	r3, #27
 8003db2:	2220      	movs	r2, #32
 8003db4:	189b      	adds	r3, r3, r2
 8003db6:	19db      	adds	r3, r3, r7
 8003db8:	2208      	movs	r2, #8
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e09f      	b.n	8003efe <UART_SetConfig+0x246>
 8003dbe:	231b      	movs	r3, #27
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	19db      	adds	r3, r3, r7
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e098      	b.n	8003efe <UART_SetConfig+0x246>
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7b      	ldr	r2, [pc, #492]	@ (8003fc0 <UART_SetConfig+0x308>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d131      	bne.n	8003e3a <UART_SetConfig+0x182>
 8003dd6:	4b79      	ldr	r3, [pc, #484]	@ (8003fbc <UART_SetConfig+0x304>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	220c      	movs	r2, #12
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d01d      	beq.n	8003e1e <UART_SetConfig+0x166>
 8003de2:	d823      	bhi.n	8003e2c <UART_SetConfig+0x174>
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d00c      	beq.n	8003e02 <UART_SetConfig+0x14a>
 8003de8:	d820      	bhi.n	8003e2c <UART_SetConfig+0x174>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <UART_SetConfig+0x13c>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00e      	beq.n	8003e10 <UART_SetConfig+0x158>
 8003df2:	e01b      	b.n	8003e2c <UART_SetConfig+0x174>
 8003df4:	231b      	movs	r3, #27
 8003df6:	2220      	movs	r2, #32
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	19db      	adds	r3, r3, r7
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e07d      	b.n	8003efe <UART_SetConfig+0x246>
 8003e02:	231b      	movs	r3, #27
 8003e04:	2220      	movs	r2, #32
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	19db      	adds	r3, r3, r7
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e076      	b.n	8003efe <UART_SetConfig+0x246>
 8003e10:	231b      	movs	r3, #27
 8003e12:	2220      	movs	r2, #32
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	2204      	movs	r2, #4
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e06f      	b.n	8003efe <UART_SetConfig+0x246>
 8003e1e:	231b      	movs	r3, #27
 8003e20:	2220      	movs	r2, #32
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	19db      	adds	r3, r3, r7
 8003e26:	2208      	movs	r2, #8
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e068      	b.n	8003efe <UART_SetConfig+0x246>
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	2220      	movs	r2, #32
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	19db      	adds	r3, r3, r7
 8003e34:	2210      	movs	r2, #16
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e061      	b.n	8003efe <UART_SetConfig+0x246>
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a61      	ldr	r2, [pc, #388]	@ (8003fc4 <UART_SetConfig+0x30c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d106      	bne.n	8003e52 <UART_SetConfig+0x19a>
 8003e44:	231b      	movs	r3, #27
 8003e46:	2220      	movs	r2, #32
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e055      	b.n	8003efe <UART_SetConfig+0x246>
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc8 <UART_SetConfig+0x310>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d106      	bne.n	8003e6a <UART_SetConfig+0x1b2>
 8003e5c:	231b      	movs	r3, #27
 8003e5e:	2220      	movs	r2, #32
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	19db      	adds	r3, r3, r7
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e049      	b.n	8003efe <UART_SetConfig+0x246>
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a50      	ldr	r2, [pc, #320]	@ (8003fb0 <UART_SetConfig+0x2f8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d13e      	bne.n	8003ef2 <UART_SetConfig+0x23a>
 8003e74:	4b51      	ldr	r3, [pc, #324]	@ (8003fbc <UART_SetConfig+0x304>)
 8003e76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e78:	23c0      	movs	r3, #192	@ 0xc0
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	22c0      	movs	r2, #192	@ 0xc0
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d027      	beq.n	8003ed6 <UART_SetConfig+0x21e>
 8003e86:	22c0      	movs	r2, #192	@ 0xc0
 8003e88:	0112      	lsls	r2, r2, #4
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d82a      	bhi.n	8003ee4 <UART_SetConfig+0x22c>
 8003e8e:	2280      	movs	r2, #128	@ 0x80
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d011      	beq.n	8003eba <UART_SetConfig+0x202>
 8003e96:	2280      	movs	r2, #128	@ 0x80
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d822      	bhi.n	8003ee4 <UART_SetConfig+0x22c>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <UART_SetConfig+0x1f4>
 8003ea2:	2280      	movs	r2, #128	@ 0x80
 8003ea4:	00d2      	lsls	r2, r2, #3
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <UART_SetConfig+0x210>
 8003eaa:	e01b      	b.n	8003ee4 <UART_SetConfig+0x22c>
 8003eac:	231b      	movs	r3, #27
 8003eae:	2220      	movs	r2, #32
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	19db      	adds	r3, r3, r7
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e021      	b.n	8003efe <UART_SetConfig+0x246>
 8003eba:	231b      	movs	r3, #27
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e01a      	b.n	8003efe <UART_SetConfig+0x246>
 8003ec8:	231b      	movs	r3, #27
 8003eca:	2220      	movs	r2, #32
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e013      	b.n	8003efe <UART_SetConfig+0x246>
 8003ed6:	231b      	movs	r3, #27
 8003ed8:	2220      	movs	r2, #32
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	19db      	adds	r3, r3, r7
 8003ede:	2208      	movs	r2, #8
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e00c      	b.n	8003efe <UART_SetConfig+0x246>
 8003ee4:	231b      	movs	r3, #27
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	19db      	adds	r3, r3, r7
 8003eec:	2210      	movs	r2, #16
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e005      	b.n	8003efe <UART_SetConfig+0x246>
 8003ef2:	231b      	movs	r3, #27
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	2210      	movs	r2, #16
 8003efc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb0 <UART_SetConfig+0x2f8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d000      	beq.n	8003f0a <UART_SetConfig+0x252>
 8003f08:	e0a9      	b.n	800405e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f0a:	231b      	movs	r3, #27
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	19db      	adds	r3, r3, r7
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d015      	beq.n	8003f44 <UART_SetConfig+0x28c>
 8003f18:	dc18      	bgt.n	8003f4c <UART_SetConfig+0x294>
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d00d      	beq.n	8003f3a <UART_SetConfig+0x282>
 8003f1e:	dc15      	bgt.n	8003f4c <UART_SetConfig+0x294>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <UART_SetConfig+0x272>
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d005      	beq.n	8003f34 <UART_SetConfig+0x27c>
 8003f28:	e010      	b.n	8003f4c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f2a:	f7fe fcd5 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f32:	e014      	b.n	8003f5e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <UART_SetConfig+0x314>)
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f38:	e011      	b.n	8003f5e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7fe fc43 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f42:	e00c      	b.n	8003f5e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f4a:	e008      	b.n	8003f5e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f50:	231a      	movs	r3, #26
 8003f52:	2220      	movs	r2, #32
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
        break;
 8003f5c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d100      	bne.n	8003f66 <UART_SetConfig+0x2ae>
 8003f64:	e14b      	b.n	80041fe <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6a:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <UART_SetConfig+0x318>)
 8003f6c:	0052      	lsls	r2, r2, #1
 8003f6e:	5ad3      	ldrh	r3, [r2, r3]
 8003f70:	0019      	movs	r1, r3
 8003f72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f74:	f7fc f8d0 	bl	8000118 <__udivsi3>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	0013      	movs	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d305      	bcc.n	8003f98 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d91d      	bls.n	8003fd4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f98:	231a      	movs	r3, #26
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e12b      	b.n	80041fe <UART_SetConfig+0x546>
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	cfff69f3 	.word	0xcfff69f3
 8003fac:	ffffcfff 	.word	0xffffcfff
 8003fb0:	40008000 	.word	0x40008000
 8003fb4:	11fff4ff 	.word	0x11fff4ff
 8003fb8:	40013800 	.word	0x40013800
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40004400 	.word	0x40004400
 8003fc4:	40004800 	.word	0x40004800
 8003fc8:	40004c00 	.word	0x40004c00
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	08005ee0 	.word	0x08005ee0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fe0:	4b92      	ldr	r3, [pc, #584]	@ (800422c <UART_SetConfig+0x574>)
 8003fe2:	0052      	lsls	r2, r2, #1
 8003fe4:	5ad3      	ldrh	r3, [r2, r3]
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	69b8      	ldr	r0, [r7, #24]
 8003ff2:	69f9      	ldr	r1, [r7, #28]
 8003ff4:	f7fc fa06 	bl	8000404 <__aeabi_uldivmod>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	000b      	movs	r3, r1
 8003ffc:	0e11      	lsrs	r1, r2, #24
 8003ffe:	021d      	lsls	r5, r3, #8
 8004000:	430d      	orrs	r5, r1
 8004002:	0214      	lsls	r4, r2, #8
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68b8      	ldr	r0, [r7, #8]
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	1900      	adds	r0, r0, r4
 8004016:	4169      	adcs	r1, r5
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f7fc f9ed 	bl	8000404 <__aeabi_uldivmod>
 800402a:	0002      	movs	r2, r0
 800402c:	000b      	movs	r3, r1
 800402e:	0013      	movs	r3, r2
 8004030:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004034:	23c0      	movs	r3, #192	@ 0xc0
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d309      	bcc.n	8004050 <UART_SetConfig+0x398>
 800403c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	035b      	lsls	r3, r3, #13
 8004042:	429a      	cmp	r2, r3
 8004044:	d204      	bcs.n	8004050 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	e0d6      	b.n	80041fe <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004050:	231a      	movs	r3, #26
 8004052:	2220      	movs	r2, #32
 8004054:	189b      	adds	r3, r3, r2
 8004056:	19db      	adds	r3, r3, r7
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e0cf      	b.n	80041fe <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	429a      	cmp	r2, r3
 8004068:	d000      	beq.n	800406c <UART_SetConfig+0x3b4>
 800406a:	e070      	b.n	800414e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800406c:	231b      	movs	r3, #27
 800406e:	2220      	movs	r2, #32
 8004070:	189b      	adds	r3, r3, r2
 8004072:	19db      	adds	r3, r3, r7
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b08      	cmp	r3, #8
 8004078:	d015      	beq.n	80040a6 <UART_SetConfig+0x3ee>
 800407a:	dc18      	bgt.n	80040ae <UART_SetConfig+0x3f6>
 800407c:	2b04      	cmp	r3, #4
 800407e:	d00d      	beq.n	800409c <UART_SetConfig+0x3e4>
 8004080:	dc15      	bgt.n	80040ae <UART_SetConfig+0x3f6>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <UART_SetConfig+0x3d4>
 8004086:	2b02      	cmp	r3, #2
 8004088:	d005      	beq.n	8004096 <UART_SetConfig+0x3de>
 800408a:	e010      	b.n	80040ae <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fc24 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8004090:	0003      	movs	r3, r0
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004094:	e014      	b.n	80040c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004096:	4b66      	ldr	r3, [pc, #408]	@ (8004230 <UART_SetConfig+0x578>)
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800409a:	e011      	b.n	80040c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409c:	f7fe fb92 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 80040a0:	0003      	movs	r3, r0
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040a4:	e00c      	b.n	80040c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ac:	e008      	b.n	80040c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040b2:	231a      	movs	r3, #26
 80040b4:	2220      	movs	r2, #32
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	19db      	adds	r3, r3, r7
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
        break;
 80040be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d100      	bne.n	80040c8 <UART_SetConfig+0x410>
 80040c6:	e09a      	b.n	80041fe <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040cc:	4b57      	ldr	r3, [pc, #348]	@ (800422c <UART_SetConfig+0x574>)
 80040ce:	0052      	lsls	r2, r2, #1
 80040d0:	5ad3      	ldrh	r3, [r2, r3]
 80040d2:	0019      	movs	r1, r3
 80040d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80040d6:	f7fc f81f 	bl	8000118 <__udivsi3>
 80040da:	0003      	movs	r3, r0
 80040dc:	005a      	lsls	r2, r3, #1
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	18d2      	adds	r2, r2, r3
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0019      	movs	r1, r3
 80040ec:	0010      	movs	r0, r2
 80040ee:	f7fc f813 	bl	8000118 <__udivsi3>
 80040f2:	0003      	movs	r3, r0
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	2b0f      	cmp	r3, #15
 80040fa:	d921      	bls.n	8004140 <UART_SetConfig+0x488>
 80040fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	025b      	lsls	r3, r3, #9
 8004102:	429a      	cmp	r2, r3
 8004104:	d21c      	bcs.n	8004140 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	b29a      	uxth	r2, r3
 800410a:	200e      	movs	r0, #14
 800410c:	2420      	movs	r4, #32
 800410e:	1903      	adds	r3, r0, r4
 8004110:	19db      	adds	r3, r3, r7
 8004112:	210f      	movs	r1, #15
 8004114:	438a      	bics	r2, r1
 8004116:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	2207      	movs	r2, #7
 8004120:	4013      	ands	r3, r2
 8004122:	b299      	uxth	r1, r3
 8004124:	1903      	adds	r3, r0, r4
 8004126:	19db      	adds	r3, r3, r7
 8004128:	1902      	adds	r2, r0, r4
 800412a:	19d2      	adds	r2, r2, r7
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	1902      	adds	r2, r0, r4
 8004138:	19d2      	adds	r2, r2, r7
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e05e      	b.n	80041fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004140:	231a      	movs	r3, #26
 8004142:	2220      	movs	r2, #32
 8004144:	189b      	adds	r3, r3, r2
 8004146:	19db      	adds	r3, r3, r7
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e057      	b.n	80041fe <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800414e:	231b      	movs	r3, #27
 8004150:	2220      	movs	r2, #32
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d015      	beq.n	8004188 <UART_SetConfig+0x4d0>
 800415c:	dc18      	bgt.n	8004190 <UART_SetConfig+0x4d8>
 800415e:	2b04      	cmp	r3, #4
 8004160:	d00d      	beq.n	800417e <UART_SetConfig+0x4c6>
 8004162:	dc15      	bgt.n	8004190 <UART_SetConfig+0x4d8>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <UART_SetConfig+0x4b6>
 8004168:	2b02      	cmp	r3, #2
 800416a:	d005      	beq.n	8004178 <UART_SetConfig+0x4c0>
 800416c:	e010      	b.n	8004190 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416e:	f7fe fbb3 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8004172:	0003      	movs	r3, r0
 8004174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004176:	e014      	b.n	80041a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004178:	4b2d      	ldr	r3, [pc, #180]	@ (8004230 <UART_SetConfig+0x578>)
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800417c:	e011      	b.n	80041a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417e:	f7fe fb21 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8004182:	0003      	movs	r3, r0
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004186:	e00c      	b.n	80041a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418e:	e008      	b.n	80041a2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004194:	231a      	movs	r3, #26
 8004196:	2220      	movs	r2, #32
 8004198:	189b      	adds	r3, r3, r2
 800419a:	19db      	adds	r3, r3, r7
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
        break;
 80041a0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02a      	beq.n	80041fe <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ac:	4b1f      	ldr	r3, [pc, #124]	@ (800422c <UART_SetConfig+0x574>)
 80041ae:	0052      	lsls	r2, r2, #1
 80041b0:	5ad3      	ldrh	r3, [r2, r3]
 80041b2:	0019      	movs	r1, r3
 80041b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041b6:	f7fb ffaf 	bl	8000118 <__udivsi3>
 80041ba:	0003      	movs	r3, r0
 80041bc:	001a      	movs	r2, r3
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	18d2      	adds	r2, r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	0019      	movs	r1, r3
 80041cc:	0010      	movs	r0, r2
 80041ce:	f7fb ffa3 	bl	8000118 <__udivsi3>
 80041d2:	0003      	movs	r3, r0
 80041d4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	2b0f      	cmp	r3, #15
 80041da:	d90a      	bls.n	80041f2 <UART_SetConfig+0x53a>
 80041dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	025b      	lsls	r3, r3, #9
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d205      	bcs.n	80041f2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	e005      	b.n	80041fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041f2:	231a      	movs	r3, #26
 80041f4:	2220      	movs	r2, #32
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	226a      	movs	r2, #106	@ 0x6a
 8004202:	2101      	movs	r1, #1
 8004204:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	2268      	movs	r2, #104	@ 0x68
 800420a:	2101      	movs	r1, #1
 800420c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	2200      	movs	r2, #0
 8004212:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	2200      	movs	r2, #0
 8004218:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800421a:	231a      	movs	r3, #26
 800421c:	2220      	movs	r2, #32
 800421e:	189b      	adds	r3, r3, r2
 8004220:	19db      	adds	r3, r3, r7
 8004222:	781b      	ldrb	r3, [r3, #0]
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b010      	add	sp, #64	@ 0x40
 800422a:	bdb0      	pop	{r4, r5, r7, pc}
 800422c:	08005ee0 	.word	0x08005ee0
 8004230:	00f42400 	.word	0x00f42400

08004234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	2208      	movs	r2, #8
 8004242:	4013      	ands	r3, r2
 8004244:	d00b      	beq.n	800425e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a4a      	ldr	r2, [pc, #296]	@ (8004378 <UART_AdvFeatureConfig+0x144>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	2201      	movs	r2, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a43      	ldr	r2, [pc, #268]	@ (800437c <UART_AdvFeatureConfig+0x148>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	2202      	movs	r2, #2
 8004286:	4013      	ands	r3, r2
 8004288:	d00b      	beq.n	80042a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a3b      	ldr	r2, [pc, #236]	@ (8004380 <UART_AdvFeatureConfig+0x14c>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <UART_AdvFeatureConfig+0x150>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	2210      	movs	r2, #16
 80042ca:	4013      	ands	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004388 <UART_AdvFeatureConfig+0x154>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	2220      	movs	r2, #32
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00b      	beq.n	8004308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4a25      	ldr	r2, [pc, #148]	@ (800438c <UART_AdvFeatureConfig+0x158>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	2240      	movs	r2, #64	@ 0x40
 800430e:	4013      	ands	r3, r2
 8004310:	d01d      	beq.n	800434e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <UART_AdvFeatureConfig+0x15c>)
 800431a:	4013      	ands	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	035b      	lsls	r3, r3, #13
 8004332:	429a      	cmp	r2, r3
 8004334:	d10b      	bne.n	800434e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a15      	ldr	r2, [pc, #84]	@ (8004394 <UART_AdvFeatureConfig+0x160>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	2280      	movs	r2, #128	@ 0x80
 8004354:	4013      	ands	r3, r2
 8004356:	d00b      	beq.n	8004370 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4a0e      	ldr	r2, [pc, #56]	@ (8004398 <UART_AdvFeatureConfig+0x164>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}
 8004378:	ffff7fff 	.word	0xffff7fff
 800437c:	fffdffff 	.word	0xfffdffff
 8004380:	fffeffff 	.word	0xfffeffff
 8004384:	fffbffff 	.word	0xfffbffff
 8004388:	ffffefff 	.word	0xffffefff
 800438c:	ffffdfff 	.word	0xffffdfff
 8004390:	ffefffff 	.word	0xffefffff
 8004394:	ff9fffff 	.word	0xff9fffff
 8004398:	fff7ffff 	.word	0xfff7ffff

0800439c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b092      	sub	sp, #72	@ 0x48
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2290      	movs	r2, #144	@ 0x90
 80043a8:	2100      	movs	r1, #0
 80043aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043ac:	f7fd fb38 	bl	8001a20 <HAL_GetTick>
 80043b0:	0003      	movs	r3, r0
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2208      	movs	r2, #8
 80043bc:	4013      	ands	r3, r2
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d12d      	bne.n	800441e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c4:	2280      	movs	r2, #128	@ 0x80
 80043c6:	0391      	lsls	r1, r2, #14
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4a47      	ldr	r2, [pc, #284]	@ (80044e8 <UART_CheckIdleState+0x14c>)
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f000 f88e 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80043d4:	1e03      	subs	r3, r0, #0
 80043d6:	d022      	beq.n	800441e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e2:	2301      	movs	r3, #1
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	438a      	bics	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2288      	movs	r2, #136	@ 0x88
 800440e:	2120      	movs	r1, #32
 8004410:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2284      	movs	r2, #132	@ 0x84
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e060      	b.n	80044e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2204      	movs	r2, #4
 8004426:	4013      	ands	r3, r2
 8004428:	2b04      	cmp	r3, #4
 800442a:	d146      	bne.n	80044ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442e:	2280      	movs	r2, #128	@ 0x80
 8004430:	03d1      	lsls	r1, r2, #15
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4a2c      	ldr	r2, [pc, #176]	@ (80044e8 <UART_CheckIdleState+0x14c>)
 8004436:	9200      	str	r2, [sp, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	f000 f859 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d03b      	beq.n	80044ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004442:	f3ef 8310 	mrs	r3, PRIMASK
 8004446:	60fb      	str	r3, [r7, #12]
  return(result);
 8004448:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f383 8810 	msr	PRIMASK, r3
}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4922      	ldr	r1, [pc, #136]	@ (80044ec <UART_CheckIdleState+0x150>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f383 8810 	msr	PRIMASK, r3
}
 8004472:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004474:	f3ef 8310 	mrs	r3, PRIMASK
 8004478:	61bb      	str	r3, [r7, #24]
  return(result);
 800447a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	438a      	bics	r2, r1
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	228c      	movs	r2, #140	@ 0x8c
 80044aa:	2120      	movs	r1, #32
 80044ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2284      	movs	r2, #132	@ 0x84
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e012      	b.n	80044e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2288      	movs	r2, #136	@ 0x88
 80044be:	2120      	movs	r1, #32
 80044c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	228c      	movs	r2, #140	@ 0x8c
 80044c6:	2120      	movs	r1, #32
 80044c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2284      	movs	r2, #132	@ 0x84
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b010      	add	sp, #64	@ 0x40
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	01ffffff 	.word	0x01ffffff
 80044ec:	fffffedf 	.word	0xfffffedf

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e051      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	3301      	adds	r3, #1
 8004506:	d04e      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7fd fa8a 	bl	8001a20 <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e051      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	4013      	ands	r3, r2
 800452c:	d03b      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b80      	cmp	r3, #128	@ 0x80
 8004532:	d038      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b40      	cmp	r3, #64	@ 0x40
 8004538:	d035      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2208      	movs	r2, #8
 8004542:	4013      	ands	r3, r2
 8004544:	2b08      	cmp	r3, #8
 8004546:	d111      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f83c 	bl	80045d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2290      	movs	r2, #144	@ 0x90
 800455c:	2108      	movs	r1, #8
 800455e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2284      	movs	r2, #132	@ 0x84
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e02c      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	401a      	ands	r2, r3
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	429a      	cmp	r2, r3
 800457e:	d112      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2280      	movs	r2, #128	@ 0x80
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f81f 	bl	80045d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2290      	movs	r2, #144	@ 0x90
 8004596:	2120      	movs	r1, #32
 8004598:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2284      	movs	r2, #132	@ 0x84
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e00f      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	425a      	negs	r2, r3
 80045b6:	4153      	adcs	r3, r2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	001a      	movs	r2, r3
 80045bc:	1dfb      	adds	r3, r7, #7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d09e      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	@ 0x38
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d8:	f3ef 8310 	mrs	r3, PRIMASK
 80045dc:	617b      	str	r3, [r7, #20]
  return(result);
 80045de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e2:	2301      	movs	r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4926      	ldr	r1, [pc, #152]	@ (8004694 <UART_EndRxTransfer+0xc4>)
 80045fa:	400a      	ands	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f383 8810 	msr	PRIMASK, r3
}
 8004608:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460a:	f3ef 8310 	mrs	r3, PRIMASK
 800460e:	623b      	str	r3, [r7, #32]
  return(result);
 8004610:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004612:	633b      	str	r3, [r7, #48]	@ 0x30
 8004614:	2301      	movs	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	f383 8810 	msr	PRIMASK, r3
}
 800461e:	46c0      	nop			@ (mov r8, r8)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	491b      	ldr	r1, [pc, #108]	@ (8004698 <UART_EndRxTransfer+0xc8>)
 800462c:	400a      	ands	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d118      	bne.n	8004676 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004644:	f3ef 8310 	mrs	r3, PRIMASK
 8004648:	60bb      	str	r3, [r7, #8]
  return(result);
 800464a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800464e:	2301      	movs	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f383 8810 	msr	PRIMASK, r3
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2110      	movs	r1, #16
 8004666:	438a      	bics	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f383 8810 	msr	PRIMASK, r3
}
 8004674:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	228c      	movs	r2, #140	@ 0x8c
 800467a:	2120      	movs	r1, #32
 800467c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b00e      	add	sp, #56	@ 0x38
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	fffffedf 	.word	0xfffffedf
 8004698:	effffffe 	.word	0xeffffffe

0800469c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2284      	movs	r2, #132	@ 0x84
 80046a8:	5c9b      	ldrb	r3, [r3, r2]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e027      	b.n	8004702 <HAL_UARTEx_DisableFifoMode+0x66>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2284      	movs	r2, #132	@ 0x84
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2288      	movs	r2, #136	@ 0x88
 80046be:	2124      	movs	r1, #36	@ 0x24
 80046c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	438a      	bics	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a0b      	ldr	r2, [pc, #44]	@ (800470c <HAL_UARTEx_DisableFifoMode+0x70>)
 80046de:	4013      	ands	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2288      	movs	r2, #136	@ 0x88
 80046f4:	2120      	movs	r1, #32
 80046f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2284      	movs	r2, #132	@ 0x84
 80046fc:	2100      	movs	r1, #0
 80046fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	0018      	movs	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	b004      	add	sp, #16
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	dfffffff 	.word	0xdfffffff

08004710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2284      	movs	r2, #132	@ 0x84
 800471e:	5c9b      	ldrb	r3, [r3, r2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004724:	2302      	movs	r3, #2
 8004726:	e02e      	b.n	8004786 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2284      	movs	r2, #132	@ 0x84
 800472c:	2101      	movs	r1, #1
 800472e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2288      	movs	r2, #136	@ 0x88
 8004734:	2124      	movs	r1, #36	@ 0x24
 8004736:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	08d9      	lsrs	r1, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f854 	bl	8004814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2288      	movs	r2, #136	@ 0x88
 8004778:	2120      	movs	r1, #32
 800477a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2284      	movs	r2, #132	@ 0x84
 8004780:	2100      	movs	r1, #0
 8004782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2284      	movs	r2, #132	@ 0x84
 800479e:	5c9b      	ldrb	r3, [r3, r2]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e02f      	b.n	8004808 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2284      	movs	r2, #132	@ 0x84
 80047ac:	2101      	movs	r1, #1
 80047ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2288      	movs	r2, #136	@ 0x88
 80047b4:	2124      	movs	r1, #36	@ 0x24
 80047b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2101      	movs	r1, #1
 80047cc:	438a      	bics	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004810 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047d8:	4013      	ands	r3, r2
 80047da:	0019      	movs	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 f813 	bl	8004814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2288      	movs	r2, #136	@ 0x88
 80047fa:	2120      	movs	r1, #32
 80047fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2284      	movs	r2, #132	@ 0x84
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b004      	add	sp, #16
 800480e:	bd80      	pop	{r7, pc}
 8004810:	f1ffffff 	.word	0xf1ffffff

08004814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	226a      	movs	r2, #106	@ 0x6a
 8004828:	2101      	movs	r1, #1
 800482a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2268      	movs	r2, #104	@ 0x68
 8004830:	2101      	movs	r1, #1
 8004832:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004834:	e043      	b.n	80048be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004836:	260f      	movs	r6, #15
 8004838:	19bb      	adds	r3, r7, r6
 800483a:	2208      	movs	r2, #8
 800483c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800483e:	200e      	movs	r0, #14
 8004840:	183b      	adds	r3, r7, r0
 8004842:	2208      	movs	r2, #8
 8004844:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	0e5b      	lsrs	r3, r3, #25
 800484e:	b2da      	uxtb	r2, r3
 8004850:	240d      	movs	r4, #13
 8004852:	193b      	adds	r3, r7, r4
 8004854:	2107      	movs	r1, #7
 8004856:	400a      	ands	r2, r1
 8004858:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	0f5b      	lsrs	r3, r3, #29
 8004862:	b2da      	uxtb	r2, r3
 8004864:	250c      	movs	r5, #12
 8004866:	197b      	adds	r3, r7, r5
 8004868:	2107      	movs	r1, #7
 800486a:	400a      	ands	r2, r1
 800486c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800486e:	183b      	adds	r3, r7, r0
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	197a      	adds	r2, r7, r5
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	4914      	ldr	r1, [pc, #80]	@ (80048c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004878:	5c8a      	ldrb	r2, [r1, r2]
 800487a:	435a      	muls	r2, r3
 800487c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800487e:	197b      	adds	r3, r7, r5
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	4a12      	ldr	r2, [pc, #72]	@ (80048cc <UARTEx_SetNbDataToProcess+0xb8>)
 8004884:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004886:	0019      	movs	r1, r3
 8004888:	f7fb fcd0 	bl	800022c <__divsi3>
 800488c:	0003      	movs	r3, r0
 800488e:	b299      	uxth	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	226a      	movs	r2, #106	@ 0x6a
 8004894:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004896:	19bb      	adds	r3, r7, r6
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	193a      	adds	r2, r7, r4
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	490a      	ldr	r1, [pc, #40]	@ (80048c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80048a0:	5c8a      	ldrb	r2, [r1, r2]
 80048a2:	435a      	muls	r2, r3
 80048a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <UARTEx_SetNbDataToProcess+0xb8>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ae:	0019      	movs	r1, r3
 80048b0:	f7fb fcbc 	bl	800022c <__divsi3>
 80048b4:	0003      	movs	r3, r0
 80048b6:	b299      	uxth	r1, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2268      	movs	r2, #104	@ 0x68
 80048bc:	5299      	strh	r1, [r3, r2]
}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b005      	add	sp, #20
 80048c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	08005ef8 	.word	0x08005ef8
 80048cc:	08005f00 	.word	0x08005f00

080048d0 <std>:
 80048d0:	2300      	movs	r3, #0
 80048d2:	b510      	push	{r4, lr}
 80048d4:	0004      	movs	r4, r0
 80048d6:	6003      	str	r3, [r0, #0]
 80048d8:	6043      	str	r3, [r0, #4]
 80048da:	6083      	str	r3, [r0, #8]
 80048dc:	8181      	strh	r1, [r0, #12]
 80048de:	6643      	str	r3, [r0, #100]	@ 0x64
 80048e0:	81c2      	strh	r2, [r0, #14]
 80048e2:	6103      	str	r3, [r0, #16]
 80048e4:	6143      	str	r3, [r0, #20]
 80048e6:	6183      	str	r3, [r0, #24]
 80048e8:	0019      	movs	r1, r3
 80048ea:	2208      	movs	r2, #8
 80048ec:	305c      	adds	r0, #92	@ 0x5c
 80048ee:	f000 fa0f 	bl	8004d10 <memset>
 80048f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <std+0x50>)
 80048f4:	6224      	str	r4, [r4, #32]
 80048f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80048f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <std+0x54>)
 80048fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <std+0x58>)
 80048fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <std+0x5c>)
 8004902:	6323      	str	r3, [r4, #48]	@ 0x30
 8004904:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <std+0x60>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d005      	beq.n	8004916 <std+0x46>
 800490a:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <std+0x64>)
 800490c:	429c      	cmp	r4, r3
 800490e:	d002      	beq.n	8004916 <std+0x46>
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <std+0x68>)
 8004912:	429c      	cmp	r4, r3
 8004914:	d103      	bne.n	800491e <std+0x4e>
 8004916:	0020      	movs	r0, r4
 8004918:	3058      	adds	r0, #88	@ 0x58
 800491a:	f000 fa79 	bl	8004e10 <__retarget_lock_init_recursive>
 800491e:	bd10      	pop	{r4, pc}
 8004920:	08004b39 	.word	0x08004b39
 8004924:	08004b61 	.word	0x08004b61
 8004928:	08004b99 	.word	0x08004b99
 800492c:	08004bc5 	.word	0x08004bc5
 8004930:	2000018c 	.word	0x2000018c
 8004934:	200001f4 	.word	0x200001f4
 8004938:	2000025c 	.word	0x2000025c

0800493c <stdio_exit_handler>:
 800493c:	b510      	push	{r4, lr}
 800493e:	4a03      	ldr	r2, [pc, #12]	@ (800494c <stdio_exit_handler+0x10>)
 8004940:	4903      	ldr	r1, [pc, #12]	@ (8004950 <stdio_exit_handler+0x14>)
 8004942:	4804      	ldr	r0, [pc, #16]	@ (8004954 <stdio_exit_handler+0x18>)
 8004944:	f000 f86c 	bl	8004a20 <_fwalk_sglue>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	20000010 	.word	0x20000010
 8004950:	080056a1 	.word	0x080056a1
 8004954:	20000020 	.word	0x20000020

08004958 <cleanup_stdio>:
 8004958:	6841      	ldr	r1, [r0, #4]
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <cleanup_stdio+0x30>)
 800495c:	b510      	push	{r4, lr}
 800495e:	0004      	movs	r4, r0
 8004960:	4299      	cmp	r1, r3
 8004962:	d001      	beq.n	8004968 <cleanup_stdio+0x10>
 8004964:	f000 fe9c 	bl	80056a0 <_fflush_r>
 8004968:	68a1      	ldr	r1, [r4, #8]
 800496a:	4b08      	ldr	r3, [pc, #32]	@ (800498c <cleanup_stdio+0x34>)
 800496c:	4299      	cmp	r1, r3
 800496e:	d002      	beq.n	8004976 <cleanup_stdio+0x1e>
 8004970:	0020      	movs	r0, r4
 8004972:	f000 fe95 	bl	80056a0 <_fflush_r>
 8004976:	68e1      	ldr	r1, [r4, #12]
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <cleanup_stdio+0x38>)
 800497a:	4299      	cmp	r1, r3
 800497c:	d002      	beq.n	8004984 <cleanup_stdio+0x2c>
 800497e:	0020      	movs	r0, r4
 8004980:	f000 fe8e 	bl	80056a0 <_fflush_r>
 8004984:	bd10      	pop	{r4, pc}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	2000018c 	.word	0x2000018c
 800498c:	200001f4 	.word	0x200001f4
 8004990:	2000025c 	.word	0x2000025c

08004994 <global_stdio_init.part.0>:
 8004994:	b510      	push	{r4, lr}
 8004996:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <global_stdio_init.part.0+0x28>)
 8004998:	4a09      	ldr	r2, [pc, #36]	@ (80049c0 <global_stdio_init.part.0+0x2c>)
 800499a:	2104      	movs	r1, #4
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	4809      	ldr	r0, [pc, #36]	@ (80049c4 <global_stdio_init.part.0+0x30>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	f7ff ff95 	bl	80048d0 <std>
 80049a6:	2201      	movs	r2, #1
 80049a8:	2109      	movs	r1, #9
 80049aa:	4807      	ldr	r0, [pc, #28]	@ (80049c8 <global_stdio_init.part.0+0x34>)
 80049ac:	f7ff ff90 	bl	80048d0 <std>
 80049b0:	2202      	movs	r2, #2
 80049b2:	2112      	movs	r1, #18
 80049b4:	4805      	ldr	r0, [pc, #20]	@ (80049cc <global_stdio_init.part.0+0x38>)
 80049b6:	f7ff ff8b 	bl	80048d0 <std>
 80049ba:	bd10      	pop	{r4, pc}
 80049bc:	200002c4 	.word	0x200002c4
 80049c0:	0800493d 	.word	0x0800493d
 80049c4:	2000018c 	.word	0x2000018c
 80049c8:	200001f4 	.word	0x200001f4
 80049cc:	2000025c 	.word	0x2000025c

080049d0 <__sfp_lock_acquire>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4802      	ldr	r0, [pc, #8]	@ (80049dc <__sfp_lock_acquire+0xc>)
 80049d4:	f000 fa1d 	bl	8004e12 <__retarget_lock_acquire_recursive>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	200002cd 	.word	0x200002cd

080049e0 <__sfp_lock_release>:
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4802      	ldr	r0, [pc, #8]	@ (80049ec <__sfp_lock_release+0xc>)
 80049e4:	f000 fa16 	bl	8004e14 <__retarget_lock_release_recursive>
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	200002cd 	.word	0x200002cd

080049f0 <__sinit>:
 80049f0:	b510      	push	{r4, lr}
 80049f2:	0004      	movs	r4, r0
 80049f4:	f7ff ffec 	bl	80049d0 <__sfp_lock_acquire>
 80049f8:	6a23      	ldr	r3, [r4, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <__sinit+0x14>
 80049fe:	f7ff ffef 	bl	80049e0 <__sfp_lock_release>
 8004a02:	bd10      	pop	{r4, pc}
 8004a04:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <__sinit+0x28>)
 8004a06:	6223      	str	r3, [r4, #32]
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <__sinit+0x2c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f6      	bne.n	80049fe <__sinit+0xe>
 8004a10:	f7ff ffc0 	bl	8004994 <global_stdio_init.part.0>
 8004a14:	e7f3      	b.n	80049fe <__sinit+0xe>
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	08004959 	.word	0x08004959
 8004a1c:	200002c4 	.word	0x200002c4

08004a20 <_fwalk_sglue>:
 8004a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a22:	0014      	movs	r4, r2
 8004a24:	2600      	movs	r6, #0
 8004a26:	9000      	str	r0, [sp, #0]
 8004a28:	9101      	str	r1, [sp, #4]
 8004a2a:	68a5      	ldr	r5, [r4, #8]
 8004a2c:	6867      	ldr	r7, [r4, #4]
 8004a2e:	3f01      	subs	r7, #1
 8004a30:	d504      	bpl.n	8004a3c <_fwalk_sglue+0x1c>
 8004a32:	6824      	ldr	r4, [r4, #0]
 8004a34:	2c00      	cmp	r4, #0
 8004a36:	d1f8      	bne.n	8004a2a <_fwalk_sglue+0xa>
 8004a38:	0030      	movs	r0, r6
 8004a3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a3c:	89ab      	ldrh	r3, [r5, #12]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d908      	bls.n	8004a54 <_fwalk_sglue+0x34>
 8004a42:	220e      	movs	r2, #14
 8004a44:	5eab      	ldrsh	r3, [r5, r2]
 8004a46:	3301      	adds	r3, #1
 8004a48:	d004      	beq.n	8004a54 <_fwalk_sglue+0x34>
 8004a4a:	0029      	movs	r1, r5
 8004a4c:	9800      	ldr	r0, [sp, #0]
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	4798      	blx	r3
 8004a52:	4306      	orrs	r6, r0
 8004a54:	3568      	adds	r5, #104	@ 0x68
 8004a56:	e7ea      	b.n	8004a2e <_fwalk_sglue+0xe>

08004a58 <iprintf>:
 8004a58:	b40f      	push	{r0, r1, r2, r3}
 8004a5a:	b507      	push	{r0, r1, r2, lr}
 8004a5c:	4905      	ldr	r1, [pc, #20]	@ (8004a74 <iprintf+0x1c>)
 8004a5e:	ab04      	add	r3, sp, #16
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	cb04      	ldmia	r3!, {r2}
 8004a64:	6881      	ldr	r1, [r0, #8]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f000 fafa 	bl	8005060 <_vfiprintf_r>
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bc08      	pop	{r3}
 8004a70:	b004      	add	sp, #16
 8004a72:	4718      	bx	r3
 8004a74:	2000001c 	.word	0x2000001c

08004a78 <_puts_r>:
 8004a78:	6a03      	ldr	r3, [r0, #32]
 8004a7a:	b570      	push	{r4, r5, r6, lr}
 8004a7c:	0005      	movs	r5, r0
 8004a7e:	000e      	movs	r6, r1
 8004a80:	6884      	ldr	r4, [r0, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <_puts_r+0x12>
 8004a86:	f7ff ffb3 	bl	80049f0 <__sinit>
 8004a8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a8c:	07db      	lsls	r3, r3, #31
 8004a8e:	d405      	bmi.n	8004a9c <_puts_r+0x24>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	059b      	lsls	r3, r3, #22
 8004a94:	d402      	bmi.n	8004a9c <_puts_r+0x24>
 8004a96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a98:	f000 f9bb 	bl	8004e12 <__retarget_lock_acquire_recursive>
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	071b      	lsls	r3, r3, #28
 8004aa0:	d502      	bpl.n	8004aa8 <_puts_r+0x30>
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11f      	bne.n	8004ae8 <_puts_r+0x70>
 8004aa8:	0021      	movs	r1, r4
 8004aaa:	0028      	movs	r0, r5
 8004aac:	f000 f8d2 	bl	8004c54 <__swsetup_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d019      	beq.n	8004ae8 <_puts_r+0x70>
 8004ab4:	2501      	movs	r5, #1
 8004ab6:	426d      	negs	r5, r5
 8004ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aba:	07db      	lsls	r3, r3, #31
 8004abc:	d405      	bmi.n	8004aca <_puts_r+0x52>
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	059b      	lsls	r3, r3, #22
 8004ac2:	d402      	bmi.n	8004aca <_puts_r+0x52>
 8004ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ac6:	f000 f9a5 	bl	8004e14 <__retarget_lock_release_recursive>
 8004aca:	0028      	movs	r0, r5
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	3601      	adds	r6, #1
 8004ad0:	60a3      	str	r3, [r4, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da04      	bge.n	8004ae0 <_puts_r+0x68>
 8004ad6:	69a2      	ldr	r2, [r4, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	dc16      	bgt.n	8004b0a <_puts_r+0x92>
 8004adc:	290a      	cmp	r1, #10
 8004ade:	d014      	beq.n	8004b0a <_puts_r+0x92>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	7019      	strb	r1, [r3, #0]
 8004ae8:	68a3      	ldr	r3, [r4, #8]
 8004aea:	7831      	ldrb	r1, [r6, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	2900      	cmp	r1, #0
 8004af0:	d1ed      	bne.n	8004ace <_puts_r+0x56>
 8004af2:	60a3      	str	r3, [r4, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da0f      	bge.n	8004b18 <_puts_r+0xa0>
 8004af8:	0022      	movs	r2, r4
 8004afa:	0028      	movs	r0, r5
 8004afc:	310a      	adds	r1, #10
 8004afe:	f000 f867 	bl	8004bd0 <__swbuf_r>
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0d6      	beq.n	8004ab4 <_puts_r+0x3c>
 8004b06:	250a      	movs	r5, #10
 8004b08:	e7d6      	b.n	8004ab8 <_puts_r+0x40>
 8004b0a:	0022      	movs	r2, r4
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	f000 f85f 	bl	8004bd0 <__swbuf_r>
 8004b12:	3001      	adds	r0, #1
 8004b14:	d1e8      	bne.n	8004ae8 <_puts_r+0x70>
 8004b16:	e7cd      	b.n	8004ab4 <_puts_r+0x3c>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	220a      	movs	r2, #10
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e7f0      	b.n	8004b06 <_puts_r+0x8e>

08004b24 <puts>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <puts+0x10>)
 8004b28:	0001      	movs	r1, r0
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	f7ff ffa4 	bl	8004a78 <_puts_r>
 8004b30:	bd10      	pop	{r4, pc}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	2000001c 	.word	0x2000001c

08004b38 <__sread>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	000c      	movs	r4, r1
 8004b3c:	250e      	movs	r5, #14
 8004b3e:	5f49      	ldrsh	r1, [r1, r5]
 8004b40:	f000 f914 	bl	8004d6c <_read_r>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	db03      	blt.n	8004b50 <__sread+0x18>
 8004b48:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004b4a:	181b      	adds	r3, r3, r0
 8004b4c:	6563      	str	r3, [r4, #84]	@ 0x54
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	4a02      	ldr	r2, [pc, #8]	@ (8004b5c <__sread+0x24>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	e7f9      	b.n	8004b4e <__sread+0x16>
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	ffffefff 	.word	0xffffefff

08004b60 <__swrite>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	001f      	movs	r7, r3
 8004b64:	898b      	ldrh	r3, [r1, #12]
 8004b66:	0005      	movs	r5, r0
 8004b68:	000c      	movs	r4, r1
 8004b6a:	0016      	movs	r6, r2
 8004b6c:	05db      	lsls	r3, r3, #23
 8004b6e:	d505      	bpl.n	8004b7c <__swrite+0x1c>
 8004b70:	230e      	movs	r3, #14
 8004b72:	5ec9      	ldrsh	r1, [r1, r3]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2302      	movs	r3, #2
 8004b78:	f000 f8e4 	bl	8004d44 <_lseek_r>
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	4a05      	ldr	r2, [pc, #20]	@ (8004b94 <__swrite+0x34>)
 8004b80:	0028      	movs	r0, r5
 8004b82:	4013      	ands	r3, r2
 8004b84:	81a3      	strh	r3, [r4, #12]
 8004b86:	0032      	movs	r2, r6
 8004b88:	230e      	movs	r3, #14
 8004b8a:	5ee1      	ldrsh	r1, [r4, r3]
 8004b8c:	003b      	movs	r3, r7
 8004b8e:	f000 f901 	bl	8004d94 <_write_r>
 8004b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b94:	ffffefff 	.word	0xffffefff

08004b98 <__sseek>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	000c      	movs	r4, r1
 8004b9c:	250e      	movs	r5, #14
 8004b9e:	5f49      	ldrsh	r1, [r1, r5]
 8004ba0:	f000 f8d0 	bl	8004d44 <_lseek_r>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	1c42      	adds	r2, r0, #1
 8004ba8:	d103      	bne.n	8004bb2 <__sseek+0x1a>
 8004baa:	4a05      	ldr	r2, [pc, #20]	@ (8004bc0 <__sseek+0x28>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	2280      	movs	r2, #128	@ 0x80
 8004bb4:	0152      	lsls	r2, r2, #5
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bbc:	e7f8      	b.n	8004bb0 <__sseek+0x18>
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	ffffefff 	.word	0xffffefff

08004bc4 <__sclose>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	230e      	movs	r3, #14
 8004bc8:	5ec9      	ldrsh	r1, [r1, r3]
 8004bca:	f000 f8a9 	bl	8004d20 <_close_r>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <__swbuf_r>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	0006      	movs	r6, r0
 8004bd4:	000d      	movs	r5, r1
 8004bd6:	0014      	movs	r4, r2
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d004      	beq.n	8004be6 <__swbuf_r+0x16>
 8004bdc:	6a03      	ldr	r3, [r0, #32]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <__swbuf_r+0x16>
 8004be2:	f7ff ff05 	bl	80049f0 <__sinit>
 8004be6:	69a3      	ldr	r3, [r4, #24]
 8004be8:	60a3      	str	r3, [r4, #8]
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	d502      	bpl.n	8004bf6 <__swbuf_r+0x26>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <__swbuf_r+0x3a>
 8004bf6:	0021      	movs	r1, r4
 8004bf8:	0030      	movs	r0, r6
 8004bfa:	f000 f82b 	bl	8004c54 <__swsetup_r>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d003      	beq.n	8004c0a <__swbuf_r+0x3a>
 8004c02:	2501      	movs	r5, #1
 8004c04:	426d      	negs	r5, r5
 8004c06:	0028      	movs	r0, r5
 8004c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	b2ef      	uxtb	r7, r5
 8004c10:	1ac0      	subs	r0, r0, r3
 8004c12:	6963      	ldr	r3, [r4, #20]
 8004c14:	b2ed      	uxtb	r5, r5
 8004c16:	4283      	cmp	r3, r0
 8004c18:	dc05      	bgt.n	8004c26 <__swbuf_r+0x56>
 8004c1a:	0021      	movs	r1, r4
 8004c1c:	0030      	movs	r0, r6
 8004c1e:	f000 fd3f 	bl	80056a0 <_fflush_r>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d1ed      	bne.n	8004c02 <__swbuf_r+0x32>
 8004c26:	68a3      	ldr	r3, [r4, #8]
 8004c28:	3001      	adds	r0, #1
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	6022      	str	r2, [r4, #0]
 8004c34:	701f      	strb	r7, [r3, #0]
 8004c36:	6963      	ldr	r3, [r4, #20]
 8004c38:	4283      	cmp	r3, r0
 8004c3a:	d004      	beq.n	8004c46 <__swbuf_r+0x76>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	07db      	lsls	r3, r3, #31
 8004c40:	d5e1      	bpl.n	8004c06 <__swbuf_r+0x36>
 8004c42:	2d0a      	cmp	r5, #10
 8004c44:	d1df      	bne.n	8004c06 <__swbuf_r+0x36>
 8004c46:	0021      	movs	r1, r4
 8004c48:	0030      	movs	r0, r6
 8004c4a:	f000 fd29 	bl	80056a0 <_fflush_r>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d0d9      	beq.n	8004c06 <__swbuf_r+0x36>
 8004c52:	e7d6      	b.n	8004c02 <__swbuf_r+0x32>

08004c54 <__swsetup_r>:
 8004c54:	4b2d      	ldr	r3, [pc, #180]	@ (8004d0c <__swsetup_r+0xb8>)
 8004c56:	b570      	push	{r4, r5, r6, lr}
 8004c58:	0005      	movs	r5, r0
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	000c      	movs	r4, r1
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d004      	beq.n	8004c6c <__swsetup_r+0x18>
 8004c62:	6a03      	ldr	r3, [r0, #32]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <__swsetup_r+0x18>
 8004c68:	f7ff fec2 	bl	80049f0 <__sinit>
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	5ee2      	ldrsh	r2, [r4, r3]
 8004c70:	0713      	lsls	r3, r2, #28
 8004c72:	d423      	bmi.n	8004cbc <__swsetup_r+0x68>
 8004c74:	06d3      	lsls	r3, r2, #27
 8004c76:	d407      	bmi.n	8004c88 <__swsetup_r+0x34>
 8004c78:	2309      	movs	r3, #9
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	2340      	movs	r3, #64	@ 0x40
 8004c7e:	2001      	movs	r0, #1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	4240      	negs	r0, r0
 8004c86:	e03a      	b.n	8004cfe <__swsetup_r+0xaa>
 8004c88:	0752      	lsls	r2, r2, #29
 8004c8a:	d513      	bpl.n	8004cb4 <__swsetup_r+0x60>
 8004c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	d008      	beq.n	8004ca4 <__swsetup_r+0x50>
 8004c92:	0023      	movs	r3, r4
 8004c94:	3344      	adds	r3, #68	@ 0x44
 8004c96:	4299      	cmp	r1, r3
 8004c98:	d002      	beq.n	8004ca0 <__swsetup_r+0x4c>
 8004c9a:	0028      	movs	r0, r5
 8004c9c:	f000 f8bc 	bl	8004e18 <_free_r>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ca4:	2224      	movs	r2, #36	@ 0x24
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	4393      	bics	r3, r2
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	2300      	movs	r3, #0
 8004cae:	6063      	str	r3, [r4, #4]
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	89a2      	ldrh	r2, [r4, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <__swsetup_r+0x86>
 8004cc2:	21a0      	movs	r1, #160	@ 0xa0
 8004cc4:	2280      	movs	r2, #128	@ 0x80
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	0089      	lsls	r1, r1, #2
 8004cca:	0092      	lsls	r2, r2, #2
 8004ccc:	400b      	ands	r3, r1
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <__swsetup_r+0x86>
 8004cd2:	0021      	movs	r1, r4
 8004cd4:	0028      	movs	r0, r5
 8004cd6:	f000 fd39 	bl	800574c <__smakebuf_r>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	5ee2      	ldrsh	r2, [r4, r3]
 8004cde:	2101      	movs	r1, #1
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	400b      	ands	r3, r1
 8004ce4:	420a      	tst	r2, r1
 8004ce6:	d00b      	beq.n	8004d00 <__swsetup_r+0xac>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	425b      	negs	r3, r3
 8004cf0:	61a3      	str	r3, [r4, #24]
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	4283      	cmp	r3, r0
 8004cf8:	d101      	bne.n	8004cfe <__swsetup_r+0xaa>
 8004cfa:	0613      	lsls	r3, r2, #24
 8004cfc:	d4be      	bmi.n	8004c7c <__swsetup_r+0x28>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	0791      	lsls	r1, r2, #30
 8004d02:	d400      	bmi.n	8004d06 <__swsetup_r+0xb2>
 8004d04:	6963      	ldr	r3, [r4, #20]
 8004d06:	60a3      	str	r3, [r4, #8]
 8004d08:	e7f3      	b.n	8004cf2 <__swsetup_r+0x9e>
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	2000001c 	.word	0x2000001c

08004d10 <memset>:
 8004d10:	0003      	movs	r3, r0
 8004d12:	1882      	adds	r2, r0, r2
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	7019      	strb	r1, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <_close_r>:
 8004d20:	2300      	movs	r3, #0
 8004d22:	b570      	push	{r4, r5, r6, lr}
 8004d24:	4d06      	ldr	r5, [pc, #24]	@ (8004d40 <_close_r+0x20>)
 8004d26:	0004      	movs	r4, r0
 8004d28:	0008      	movs	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc fc54 	bl	80015d8 <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d103      	bne.n	8004d3c <_close_r+0x1c>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d000      	beq.n	8004d3c <_close_r+0x1c>
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	200002c8 	.word	0x200002c8

08004d44 <_lseek_r>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	0004      	movs	r4, r0
 8004d48:	0008      	movs	r0, r1
 8004d4a:	0011      	movs	r1, r2
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4d05      	ldr	r5, [pc, #20]	@ (8004d68 <_lseek_r+0x24>)
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fc fc61 	bl	800161a <_lseek>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d103      	bne.n	8004d64 <_lseek_r+0x20>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d000      	beq.n	8004d64 <_lseek_r+0x20>
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	200002c8 	.word	0x200002c8

08004d6c <_read_r>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	0004      	movs	r4, r0
 8004d70:	0008      	movs	r0, r1
 8004d72:	0011      	movs	r1, r2
 8004d74:	001a      	movs	r2, r3
 8004d76:	2300      	movs	r3, #0
 8004d78:	4d05      	ldr	r5, [pc, #20]	@ (8004d90 <_read_r+0x24>)
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	f7fc fbf3 	bl	8001566 <_read>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d103      	bne.n	8004d8c <_read_r+0x20>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d000      	beq.n	8004d8c <_read_r+0x20>
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	200002c8 	.word	0x200002c8

08004d94 <_write_r>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	0004      	movs	r4, r0
 8004d98:	0008      	movs	r0, r1
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4d05      	ldr	r5, [pc, #20]	@ (8004db8 <_write_r+0x24>)
 8004da2:	602b      	str	r3, [r5, #0]
 8004da4:	f7fc fbfc 	bl	80015a0 <_write>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d103      	bne.n	8004db4 <_write_r+0x20>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <_write_r+0x20>
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	200002c8 	.word	0x200002c8

08004dbc <__errno>:
 8004dbc:	4b01      	ldr	r3, [pc, #4]	@ (8004dc4 <__errno+0x8>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	4770      	bx	lr
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	2000001c 	.word	0x2000001c

08004dc8 <__libc_init_array>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	2600      	movs	r6, #0
 8004dcc:	4c0c      	ldr	r4, [pc, #48]	@ (8004e00 <__libc_init_array+0x38>)
 8004dce:	4d0d      	ldr	r5, [pc, #52]	@ (8004e04 <__libc_init_array+0x3c>)
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	42a6      	cmp	r6, r4
 8004dd6:	d109      	bne.n	8004dec <__libc_init_array+0x24>
 8004dd8:	2600      	movs	r6, #0
 8004dda:	f000 fd3b 	bl	8005854 <_init>
 8004dde:	4c0a      	ldr	r4, [pc, #40]	@ (8004e08 <__libc_init_array+0x40>)
 8004de0:	4d0a      	ldr	r5, [pc, #40]	@ (8004e0c <__libc_init_array+0x44>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	42a6      	cmp	r6, r4
 8004de8:	d105      	bne.n	8004df6 <__libc_init_array+0x2e>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	00b3      	lsls	r3, r6, #2
 8004dee:	58eb      	ldr	r3, [r5, r3]
 8004df0:	4798      	blx	r3
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7ee      	b.n	8004dd4 <__libc_init_array+0xc>
 8004df6:	00b3      	lsls	r3, r6, #2
 8004df8:	58eb      	ldr	r3, [r5, r3]
 8004dfa:	4798      	blx	r3
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	e7f2      	b.n	8004de6 <__libc_init_array+0x1e>
 8004e00:	08005f44 	.word	0x08005f44
 8004e04:	08005f44 	.word	0x08005f44
 8004e08:	08005f48 	.word	0x08005f48
 8004e0c:	08005f44 	.word	0x08005f44

08004e10 <__retarget_lock_init_recursive>:
 8004e10:	4770      	bx	lr

08004e12 <__retarget_lock_acquire_recursive>:
 8004e12:	4770      	bx	lr

08004e14 <__retarget_lock_release_recursive>:
 8004e14:	4770      	bx	lr
	...

08004e18 <_free_r>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	0005      	movs	r5, r0
 8004e1c:	1e0c      	subs	r4, r1, #0
 8004e1e:	d010      	beq.n	8004e42 <_free_r+0x2a>
 8004e20:	3c04      	subs	r4, #4
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da00      	bge.n	8004e2a <_free_r+0x12>
 8004e28:	18e4      	adds	r4, r4, r3
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	f000 f8e0 	bl	8004ff0 <__malloc_lock>
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <_free_r+0x90>)
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <_free_r+0x2c>
 8004e38:	6063      	str	r3, [r4, #4]
 8004e3a:	6014      	str	r4, [r2, #0]
 8004e3c:	0028      	movs	r0, r5
 8004e3e:	f000 f8df 	bl	8005000 <__malloc_unlock>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	d908      	bls.n	8004e5a <_free_r+0x42>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	1821      	adds	r1, r4, r0
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	d1f3      	bne.n	8004e38 <_free_r+0x20>
 8004e50:	6819      	ldr	r1, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	1809      	adds	r1, r1, r0
 8004e56:	6021      	str	r1, [r4, #0]
 8004e58:	e7ee      	b.n	8004e38 <_free_r+0x20>
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <_free_r+0x4e>
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	d9f9      	bls.n	8004e5a <_free_r+0x42>
 8004e66:	6811      	ldr	r1, [r2, #0]
 8004e68:	1850      	adds	r0, r2, r1
 8004e6a:	42a0      	cmp	r0, r4
 8004e6c:	d10b      	bne.n	8004e86 <_free_r+0x6e>
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	1809      	adds	r1, r1, r0
 8004e72:	1850      	adds	r0, r2, r1
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	4283      	cmp	r3, r0
 8004e78:	d1e0      	bne.n	8004e3c <_free_r+0x24>
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	1841      	adds	r1, r0, r1
 8004e80:	6011      	str	r1, [r2, #0]
 8004e82:	6053      	str	r3, [r2, #4]
 8004e84:	e7da      	b.n	8004e3c <_free_r+0x24>
 8004e86:	42a0      	cmp	r0, r4
 8004e88:	d902      	bls.n	8004e90 <_free_r+0x78>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	602b      	str	r3, [r5, #0]
 8004e8e:	e7d5      	b.n	8004e3c <_free_r+0x24>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	1821      	adds	r1, r4, r0
 8004e94:	428b      	cmp	r3, r1
 8004e96:	d103      	bne.n	8004ea0 <_free_r+0x88>
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	1809      	adds	r1, r1, r0
 8004e9e:	6021      	str	r1, [r4, #0]
 8004ea0:	6063      	str	r3, [r4, #4]
 8004ea2:	6054      	str	r4, [r2, #4]
 8004ea4:	e7ca      	b.n	8004e3c <_free_r+0x24>
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	200002d4 	.word	0x200002d4

08004eac <sbrk_aligned>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4e0f      	ldr	r6, [pc, #60]	@ (8004eec <sbrk_aligned+0x40>)
 8004eb0:	000d      	movs	r5, r1
 8004eb2:	6831      	ldr	r1, [r6, #0]
 8004eb4:	0004      	movs	r4, r0
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	d102      	bne.n	8004ec0 <sbrk_aligned+0x14>
 8004eba:	f000 fcad 	bl	8005818 <_sbrk_r>
 8004ebe:	6030      	str	r0, [r6, #0]
 8004ec0:	0029      	movs	r1, r5
 8004ec2:	0020      	movs	r0, r4
 8004ec4:	f000 fca8 	bl	8005818 <_sbrk_r>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d103      	bne.n	8004ed4 <sbrk_aligned+0x28>
 8004ecc:	2501      	movs	r5, #1
 8004ece:	426d      	negs	r5, r5
 8004ed0:	0028      	movs	r0, r5
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	1cc5      	adds	r5, r0, #3
 8004ed8:	439d      	bics	r5, r3
 8004eda:	42a8      	cmp	r0, r5
 8004edc:	d0f8      	beq.n	8004ed0 <sbrk_aligned+0x24>
 8004ede:	1a29      	subs	r1, r5, r0
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	f000 fc99 	bl	8005818 <_sbrk_r>
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d1f2      	bne.n	8004ed0 <sbrk_aligned+0x24>
 8004eea:	e7ef      	b.n	8004ecc <sbrk_aligned+0x20>
 8004eec:	200002d0 	.word	0x200002d0

08004ef0 <_malloc_r>:
 8004ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	1ccb      	adds	r3, r1, #3
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	3308      	adds	r3, #8
 8004efa:	0005      	movs	r5, r0
 8004efc:	001f      	movs	r7, r3
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d234      	bcs.n	8004f6c <_malloc_r+0x7c>
 8004f02:	270c      	movs	r7, #12
 8004f04:	42b9      	cmp	r1, r7
 8004f06:	d833      	bhi.n	8004f70 <_malloc_r+0x80>
 8004f08:	0028      	movs	r0, r5
 8004f0a:	f000 f871 	bl	8004ff0 <__malloc_lock>
 8004f0e:	4e37      	ldr	r6, [pc, #220]	@ (8004fec <_malloc_r+0xfc>)
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	001c      	movs	r4, r3
 8004f14:	2c00      	cmp	r4, #0
 8004f16:	d12f      	bne.n	8004f78 <_malloc_r+0x88>
 8004f18:	0039      	movs	r1, r7
 8004f1a:	0028      	movs	r0, r5
 8004f1c:	f7ff ffc6 	bl	8004eac <sbrk_aligned>
 8004f20:	0004      	movs	r4, r0
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d15f      	bne.n	8004fe6 <_malloc_r+0xf6>
 8004f26:	6834      	ldr	r4, [r6, #0]
 8004f28:	9400      	str	r4, [sp, #0]
 8004f2a:	9b00      	ldr	r3, [sp, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d14a      	bne.n	8004fc6 <_malloc_r+0xd6>
 8004f30:	2c00      	cmp	r4, #0
 8004f32:	d052      	beq.n	8004fda <_malloc_r+0xea>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	0028      	movs	r0, r5
 8004f38:	18e3      	adds	r3, r4, r3
 8004f3a:	9900      	ldr	r1, [sp, #0]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f000 fc6b 	bl	8005818 <_sbrk_r>
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	4283      	cmp	r3, r0
 8004f46:	d148      	bne.n	8004fda <_malloc_r+0xea>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	1aff      	subs	r7, r7, r3
 8004f4e:	0039      	movs	r1, r7
 8004f50:	f7ff ffac 	bl	8004eac <sbrk_aligned>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d040      	beq.n	8004fda <_malloc_r+0xea>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	19db      	adds	r3, r3, r7
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	6833      	ldr	r3, [r6, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	d133      	bne.n	8004fce <_malloc_r+0xde>
 8004f66:	9b00      	ldr	r3, [sp, #0]
 8004f68:	6033      	str	r3, [r6, #0]
 8004f6a:	e019      	b.n	8004fa0 <_malloc_r+0xb0>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dac9      	bge.n	8004f04 <_malloc_r+0x14>
 8004f70:	230c      	movs	r3, #12
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	2000      	movs	r0, #0
 8004f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f78:	6821      	ldr	r1, [r4, #0]
 8004f7a:	1bc9      	subs	r1, r1, r7
 8004f7c:	d420      	bmi.n	8004fc0 <_malloc_r+0xd0>
 8004f7e:	290b      	cmp	r1, #11
 8004f80:	d90a      	bls.n	8004f98 <_malloc_r+0xa8>
 8004f82:	19e2      	adds	r2, r4, r7
 8004f84:	6027      	str	r7, [r4, #0]
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	d104      	bne.n	8004f94 <_malloc_r+0xa4>
 8004f8a:	6032      	str	r2, [r6, #0]
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	6011      	str	r1, [r2, #0]
 8004f90:	6053      	str	r3, [r2, #4]
 8004f92:	e005      	b.n	8004fa0 <_malloc_r+0xb0>
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e7f9      	b.n	8004f8c <_malloc_r+0x9c>
 8004f98:	6862      	ldr	r2, [r4, #4]
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	d10e      	bne.n	8004fbc <_malloc_r+0xcc>
 8004f9e:	6032      	str	r2, [r6, #0]
 8004fa0:	0028      	movs	r0, r5
 8004fa2:	f000 f82d 	bl	8005000 <__malloc_unlock>
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	2207      	movs	r2, #7
 8004faa:	300b      	adds	r0, #11
 8004fac:	1d23      	adds	r3, r4, #4
 8004fae:	4390      	bics	r0, r2
 8004fb0:	1ac2      	subs	r2, r0, r3
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d0df      	beq.n	8004f76 <_malloc_r+0x86>
 8004fb6:	1a1b      	subs	r3, r3, r0
 8004fb8:	50a3      	str	r3, [r4, r2]
 8004fba:	e7dc      	b.n	8004f76 <_malloc_r+0x86>
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	e7ef      	b.n	8004fa0 <_malloc_r+0xb0>
 8004fc0:	0023      	movs	r3, r4
 8004fc2:	6864      	ldr	r4, [r4, #4]
 8004fc4:	e7a6      	b.n	8004f14 <_malloc_r+0x24>
 8004fc6:	9c00      	ldr	r4, [sp, #0]
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	e7ad      	b.n	8004f2a <_malloc_r+0x3a>
 8004fce:	001a      	movs	r2, r3
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	d1fb      	bne.n	8004fce <_malloc_r+0xde>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e7da      	b.n	8004f90 <_malloc_r+0xa0>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	0028      	movs	r0, r5
 8004fde:	602b      	str	r3, [r5, #0]
 8004fe0:	f000 f80e 	bl	8005000 <__malloc_unlock>
 8004fe4:	e7c6      	b.n	8004f74 <_malloc_r+0x84>
 8004fe6:	6007      	str	r7, [r0, #0]
 8004fe8:	e7da      	b.n	8004fa0 <_malloc_r+0xb0>
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	200002d4 	.word	0x200002d4

08004ff0 <__malloc_lock>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4802      	ldr	r0, [pc, #8]	@ (8004ffc <__malloc_lock+0xc>)
 8004ff4:	f7ff ff0d 	bl	8004e12 <__retarget_lock_acquire_recursive>
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	200002cc 	.word	0x200002cc

08005000 <__malloc_unlock>:
 8005000:	b510      	push	{r4, lr}
 8005002:	4802      	ldr	r0, [pc, #8]	@ (800500c <__malloc_unlock+0xc>)
 8005004:	f7ff ff06 	bl	8004e14 <__retarget_lock_release_recursive>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	200002cc 	.word	0x200002cc

08005010 <__sfputc_r>:
 8005010:	6893      	ldr	r3, [r2, #8]
 8005012:	b510      	push	{r4, lr}
 8005014:	3b01      	subs	r3, #1
 8005016:	6093      	str	r3, [r2, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	da04      	bge.n	8005026 <__sfputc_r+0x16>
 800501c:	6994      	ldr	r4, [r2, #24]
 800501e:	42a3      	cmp	r3, r4
 8005020:	db07      	blt.n	8005032 <__sfputc_r+0x22>
 8005022:	290a      	cmp	r1, #10
 8005024:	d005      	beq.n	8005032 <__sfputc_r+0x22>
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	1c58      	adds	r0, r3, #1
 800502a:	6010      	str	r0, [r2, #0]
 800502c:	7019      	strb	r1, [r3, #0]
 800502e:	0008      	movs	r0, r1
 8005030:	bd10      	pop	{r4, pc}
 8005032:	f7ff fdcd 	bl	8004bd0 <__swbuf_r>
 8005036:	0001      	movs	r1, r0
 8005038:	e7f9      	b.n	800502e <__sfputc_r+0x1e>

0800503a <__sfputs_r>:
 800503a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503c:	0006      	movs	r6, r0
 800503e:	000f      	movs	r7, r1
 8005040:	0014      	movs	r4, r2
 8005042:	18d5      	adds	r5, r2, r3
 8005044:	42ac      	cmp	r4, r5
 8005046:	d101      	bne.n	800504c <__sfputs_r+0x12>
 8005048:	2000      	movs	r0, #0
 800504a:	e007      	b.n	800505c <__sfputs_r+0x22>
 800504c:	7821      	ldrb	r1, [r4, #0]
 800504e:	003a      	movs	r2, r7
 8005050:	0030      	movs	r0, r6
 8005052:	f7ff ffdd 	bl	8005010 <__sfputc_r>
 8005056:	3401      	adds	r4, #1
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d1f3      	bne.n	8005044 <__sfputs_r+0xa>
 800505c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005060 <_vfiprintf_r>:
 8005060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005062:	b0a1      	sub	sp, #132	@ 0x84
 8005064:	000f      	movs	r7, r1
 8005066:	0015      	movs	r5, r2
 8005068:	001e      	movs	r6, r3
 800506a:	9003      	str	r0, [sp, #12]
 800506c:	2800      	cmp	r0, #0
 800506e:	d004      	beq.n	800507a <_vfiprintf_r+0x1a>
 8005070:	6a03      	ldr	r3, [r0, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <_vfiprintf_r+0x1a>
 8005076:	f7ff fcbb 	bl	80049f0 <__sinit>
 800507a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800507c:	07db      	lsls	r3, r3, #31
 800507e:	d405      	bmi.n	800508c <_vfiprintf_r+0x2c>
 8005080:	89bb      	ldrh	r3, [r7, #12]
 8005082:	059b      	lsls	r3, r3, #22
 8005084:	d402      	bmi.n	800508c <_vfiprintf_r+0x2c>
 8005086:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005088:	f7ff fec3 	bl	8004e12 <__retarget_lock_acquire_recursive>
 800508c:	89bb      	ldrh	r3, [r7, #12]
 800508e:	071b      	lsls	r3, r3, #28
 8005090:	d502      	bpl.n	8005098 <_vfiprintf_r+0x38>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d113      	bne.n	80050c0 <_vfiprintf_r+0x60>
 8005098:	0039      	movs	r1, r7
 800509a:	9803      	ldr	r0, [sp, #12]
 800509c:	f7ff fdda 	bl	8004c54 <__swsetup_r>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d00d      	beq.n	80050c0 <_vfiprintf_r+0x60>
 80050a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050a6:	07db      	lsls	r3, r3, #31
 80050a8:	d503      	bpl.n	80050b2 <_vfiprintf_r+0x52>
 80050aa:	2001      	movs	r0, #1
 80050ac:	4240      	negs	r0, r0
 80050ae:	b021      	add	sp, #132	@ 0x84
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b2:	89bb      	ldrh	r3, [r7, #12]
 80050b4:	059b      	lsls	r3, r3, #22
 80050b6:	d4f8      	bmi.n	80050aa <_vfiprintf_r+0x4a>
 80050b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80050ba:	f7ff feab 	bl	8004e14 <__retarget_lock_release_recursive>
 80050be:	e7f4      	b.n	80050aa <_vfiprintf_r+0x4a>
 80050c0:	2300      	movs	r3, #0
 80050c2:	ac08      	add	r4, sp, #32
 80050c4:	6163      	str	r3, [r4, #20]
 80050c6:	3320      	adds	r3, #32
 80050c8:	7663      	strb	r3, [r4, #25]
 80050ca:	3310      	adds	r3, #16
 80050cc:	76a3      	strb	r3, [r4, #26]
 80050ce:	9607      	str	r6, [sp, #28]
 80050d0:	002e      	movs	r6, r5
 80050d2:	7833      	ldrb	r3, [r6, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <_vfiprintf_r+0x7c>
 80050d8:	2b25      	cmp	r3, #37	@ 0x25
 80050da:	d148      	bne.n	800516e <_vfiprintf_r+0x10e>
 80050dc:	1b73      	subs	r3, r6, r5
 80050de:	9305      	str	r3, [sp, #20]
 80050e0:	42ae      	cmp	r6, r5
 80050e2:	d00b      	beq.n	80050fc <_vfiprintf_r+0x9c>
 80050e4:	002a      	movs	r2, r5
 80050e6:	0039      	movs	r1, r7
 80050e8:	9803      	ldr	r0, [sp, #12]
 80050ea:	f7ff ffa6 	bl	800503a <__sfputs_r>
 80050ee:	3001      	adds	r0, #1
 80050f0:	d100      	bne.n	80050f4 <_vfiprintf_r+0x94>
 80050f2:	e0ae      	b.n	8005252 <_vfiprintf_r+0x1f2>
 80050f4:	6963      	ldr	r3, [r4, #20]
 80050f6:	9a05      	ldr	r2, [sp, #20]
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	6163      	str	r3, [r4, #20]
 80050fc:	7833      	ldrb	r3, [r6, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d100      	bne.n	8005104 <_vfiprintf_r+0xa4>
 8005102:	e0a6      	b.n	8005252 <_vfiprintf_r+0x1f2>
 8005104:	2201      	movs	r2, #1
 8005106:	2300      	movs	r3, #0
 8005108:	4252      	negs	r2, r2
 800510a:	6062      	str	r2, [r4, #4]
 800510c:	a904      	add	r1, sp, #16
 800510e:	3254      	adds	r2, #84	@ 0x54
 8005110:	1852      	adds	r2, r2, r1
 8005112:	1c75      	adds	r5, r6, #1
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	60e3      	str	r3, [r4, #12]
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	7013      	strb	r3, [r2, #0]
 800511c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800511e:	4b59      	ldr	r3, [pc, #356]	@ (8005284 <_vfiprintf_r+0x224>)
 8005120:	2205      	movs	r2, #5
 8005122:	0018      	movs	r0, r3
 8005124:	7829      	ldrb	r1, [r5, #0]
 8005126:	9305      	str	r3, [sp, #20]
 8005128:	f000 fb88 	bl	800583c <memchr>
 800512c:	1c6e      	adds	r6, r5, #1
 800512e:	2800      	cmp	r0, #0
 8005130:	d11f      	bne.n	8005172 <_vfiprintf_r+0x112>
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	06d3      	lsls	r3, r2, #27
 8005136:	d504      	bpl.n	8005142 <_vfiprintf_r+0xe2>
 8005138:	2353      	movs	r3, #83	@ 0x53
 800513a:	a904      	add	r1, sp, #16
 800513c:	185b      	adds	r3, r3, r1
 800513e:	2120      	movs	r1, #32
 8005140:	7019      	strb	r1, [r3, #0]
 8005142:	0713      	lsls	r3, r2, #28
 8005144:	d504      	bpl.n	8005150 <_vfiprintf_r+0xf0>
 8005146:	2353      	movs	r3, #83	@ 0x53
 8005148:	a904      	add	r1, sp, #16
 800514a:	185b      	adds	r3, r3, r1
 800514c:	212b      	movs	r1, #43	@ 0x2b
 800514e:	7019      	strb	r1, [r3, #0]
 8005150:	782b      	ldrb	r3, [r5, #0]
 8005152:	2b2a      	cmp	r3, #42	@ 0x2a
 8005154:	d016      	beq.n	8005184 <_vfiprintf_r+0x124>
 8005156:	002e      	movs	r6, r5
 8005158:	2100      	movs	r1, #0
 800515a:	200a      	movs	r0, #10
 800515c:	68e3      	ldr	r3, [r4, #12]
 800515e:	7832      	ldrb	r2, [r6, #0]
 8005160:	1c75      	adds	r5, r6, #1
 8005162:	3a30      	subs	r2, #48	@ 0x30
 8005164:	2a09      	cmp	r2, #9
 8005166:	d950      	bls.n	800520a <_vfiprintf_r+0x1aa>
 8005168:	2900      	cmp	r1, #0
 800516a:	d111      	bne.n	8005190 <_vfiprintf_r+0x130>
 800516c:	e017      	b.n	800519e <_vfiprintf_r+0x13e>
 800516e:	3601      	adds	r6, #1
 8005170:	e7af      	b.n	80050d2 <_vfiprintf_r+0x72>
 8005172:	9b05      	ldr	r3, [sp, #20]
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	1ac0      	subs	r0, r0, r3
 8005178:	2301      	movs	r3, #1
 800517a:	4083      	lsls	r3, r0
 800517c:	4313      	orrs	r3, r2
 800517e:	0035      	movs	r5, r6
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	e7cc      	b.n	800511e <_vfiprintf_r+0xbe>
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	1d19      	adds	r1, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	9107      	str	r1, [sp, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	db01      	blt.n	8005194 <_vfiprintf_r+0x134>
 8005190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005192:	e004      	b.n	800519e <_vfiprintf_r+0x13e>
 8005194:	425b      	negs	r3, r3
 8005196:	60e3      	str	r3, [r4, #12]
 8005198:	2302      	movs	r3, #2
 800519a:	4313      	orrs	r3, r2
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	7833      	ldrb	r3, [r6, #0]
 80051a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80051a2:	d10c      	bne.n	80051be <_vfiprintf_r+0x15e>
 80051a4:	7873      	ldrb	r3, [r6, #1]
 80051a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80051a8:	d134      	bne.n	8005214 <_vfiprintf_r+0x1b4>
 80051aa:	9b07      	ldr	r3, [sp, #28]
 80051ac:	3602      	adds	r6, #2
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	9207      	str	r2, [sp, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da01      	bge.n	80051bc <_vfiprintf_r+0x15c>
 80051b8:	2301      	movs	r3, #1
 80051ba:	425b      	negs	r3, r3
 80051bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80051be:	4d32      	ldr	r5, [pc, #200]	@ (8005288 <_vfiprintf_r+0x228>)
 80051c0:	2203      	movs	r2, #3
 80051c2:	0028      	movs	r0, r5
 80051c4:	7831      	ldrb	r1, [r6, #0]
 80051c6:	f000 fb39 	bl	800583c <memchr>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d006      	beq.n	80051dc <_vfiprintf_r+0x17c>
 80051ce:	2340      	movs	r3, #64	@ 0x40
 80051d0:	1b40      	subs	r0, r0, r5
 80051d2:	4083      	lsls	r3, r0
 80051d4:	6822      	ldr	r2, [r4, #0]
 80051d6:	3601      	adds	r6, #1
 80051d8:	4313      	orrs	r3, r2
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	7831      	ldrb	r1, [r6, #0]
 80051de:	2206      	movs	r2, #6
 80051e0:	482a      	ldr	r0, [pc, #168]	@ (800528c <_vfiprintf_r+0x22c>)
 80051e2:	1c75      	adds	r5, r6, #1
 80051e4:	7621      	strb	r1, [r4, #24]
 80051e6:	f000 fb29 	bl	800583c <memchr>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d040      	beq.n	8005270 <_vfiprintf_r+0x210>
 80051ee:	4b28      	ldr	r3, [pc, #160]	@ (8005290 <_vfiprintf_r+0x230>)
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d122      	bne.n	800523a <_vfiprintf_r+0x1da>
 80051f4:	2207      	movs	r2, #7
 80051f6:	9b07      	ldr	r3, [sp, #28]
 80051f8:	3307      	adds	r3, #7
 80051fa:	4393      	bics	r3, r2
 80051fc:	3308      	adds	r3, #8
 80051fe:	9307      	str	r3, [sp, #28]
 8005200:	6963      	ldr	r3, [r4, #20]
 8005202:	9a04      	ldr	r2, [sp, #16]
 8005204:	189b      	adds	r3, r3, r2
 8005206:	6163      	str	r3, [r4, #20]
 8005208:	e762      	b.n	80050d0 <_vfiprintf_r+0x70>
 800520a:	4343      	muls	r3, r0
 800520c:	002e      	movs	r6, r5
 800520e:	2101      	movs	r1, #1
 8005210:	189b      	adds	r3, r3, r2
 8005212:	e7a4      	b.n	800515e <_vfiprintf_r+0xfe>
 8005214:	2300      	movs	r3, #0
 8005216:	200a      	movs	r0, #10
 8005218:	0019      	movs	r1, r3
 800521a:	3601      	adds	r6, #1
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	7832      	ldrb	r2, [r6, #0]
 8005220:	1c75      	adds	r5, r6, #1
 8005222:	3a30      	subs	r2, #48	@ 0x30
 8005224:	2a09      	cmp	r2, #9
 8005226:	d903      	bls.n	8005230 <_vfiprintf_r+0x1d0>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0c8      	beq.n	80051be <_vfiprintf_r+0x15e>
 800522c:	9109      	str	r1, [sp, #36]	@ 0x24
 800522e:	e7c6      	b.n	80051be <_vfiprintf_r+0x15e>
 8005230:	4341      	muls	r1, r0
 8005232:	002e      	movs	r6, r5
 8005234:	2301      	movs	r3, #1
 8005236:	1889      	adds	r1, r1, r2
 8005238:	e7f1      	b.n	800521e <_vfiprintf_r+0x1be>
 800523a:	aa07      	add	r2, sp, #28
 800523c:	9200      	str	r2, [sp, #0]
 800523e:	0021      	movs	r1, r4
 8005240:	003a      	movs	r2, r7
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <_vfiprintf_r+0x234>)
 8005244:	9803      	ldr	r0, [sp, #12]
 8005246:	e000      	b.n	800524a <_vfiprintf_r+0x1ea>
 8005248:	bf00      	nop
 800524a:	9004      	str	r0, [sp, #16]
 800524c:	9b04      	ldr	r3, [sp, #16]
 800524e:	3301      	adds	r3, #1
 8005250:	d1d6      	bne.n	8005200 <_vfiprintf_r+0x1a0>
 8005252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005254:	07db      	lsls	r3, r3, #31
 8005256:	d405      	bmi.n	8005264 <_vfiprintf_r+0x204>
 8005258:	89bb      	ldrh	r3, [r7, #12]
 800525a:	059b      	lsls	r3, r3, #22
 800525c:	d402      	bmi.n	8005264 <_vfiprintf_r+0x204>
 800525e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005260:	f7ff fdd8 	bl	8004e14 <__retarget_lock_release_recursive>
 8005264:	89bb      	ldrh	r3, [r7, #12]
 8005266:	065b      	lsls	r3, r3, #25
 8005268:	d500      	bpl.n	800526c <_vfiprintf_r+0x20c>
 800526a:	e71e      	b.n	80050aa <_vfiprintf_r+0x4a>
 800526c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800526e:	e71e      	b.n	80050ae <_vfiprintf_r+0x4e>
 8005270:	aa07      	add	r2, sp, #28
 8005272:	9200      	str	r2, [sp, #0]
 8005274:	0021      	movs	r1, r4
 8005276:	003a      	movs	r2, r7
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <_vfiprintf_r+0x234>)
 800527a:	9803      	ldr	r0, [sp, #12]
 800527c:	f000 f87c 	bl	8005378 <_printf_i>
 8005280:	e7e3      	b.n	800524a <_vfiprintf_r+0x1ea>
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	08005f08 	.word	0x08005f08
 8005288:	08005f0e 	.word	0x08005f0e
 800528c:	08005f12 	.word	0x08005f12
 8005290:	00000000 	.word	0x00000000
 8005294:	0800503b 	.word	0x0800503b

08005298 <_printf_common>:
 8005298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800529a:	0016      	movs	r6, r2
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	688a      	ldr	r2, [r1, #8]
 80052a0:	690b      	ldr	r3, [r1, #16]
 80052a2:	000c      	movs	r4, r1
 80052a4:	9000      	str	r0, [sp, #0]
 80052a6:	4293      	cmp	r3, r2
 80052a8:	da00      	bge.n	80052ac <_printf_common+0x14>
 80052aa:	0013      	movs	r3, r2
 80052ac:	0022      	movs	r2, r4
 80052ae:	6033      	str	r3, [r6, #0]
 80052b0:	3243      	adds	r2, #67	@ 0x43
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	d001      	beq.n	80052bc <_printf_common+0x24>
 80052b8:	3301      	adds	r3, #1
 80052ba:	6033      	str	r3, [r6, #0]
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	069b      	lsls	r3, r3, #26
 80052c0:	d502      	bpl.n	80052c8 <_printf_common+0x30>
 80052c2:	6833      	ldr	r3, [r6, #0]
 80052c4:	3302      	adds	r3, #2
 80052c6:	6033      	str	r3, [r6, #0]
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	2306      	movs	r3, #6
 80052cc:	0015      	movs	r5, r2
 80052ce:	401d      	ands	r5, r3
 80052d0:	421a      	tst	r2, r3
 80052d2:	d027      	beq.n	8005324 <_printf_common+0x8c>
 80052d4:	0023      	movs	r3, r4
 80052d6:	3343      	adds	r3, #67	@ 0x43
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	4193      	sbcs	r3, r2
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	0692      	lsls	r2, r2, #26
 80052e2:	d430      	bmi.n	8005346 <_printf_common+0xae>
 80052e4:	0022      	movs	r2, r4
 80052e6:	9901      	ldr	r1, [sp, #4]
 80052e8:	9800      	ldr	r0, [sp, #0]
 80052ea:	9d08      	ldr	r5, [sp, #32]
 80052ec:	3243      	adds	r2, #67	@ 0x43
 80052ee:	47a8      	blx	r5
 80052f0:	3001      	adds	r0, #1
 80052f2:	d025      	beq.n	8005340 <_printf_common+0xa8>
 80052f4:	2206      	movs	r2, #6
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	2500      	movs	r5, #0
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d105      	bne.n	800530c <_printf_common+0x74>
 8005300:	6833      	ldr	r3, [r6, #0]
 8005302:	68e5      	ldr	r5, [r4, #12]
 8005304:	1aed      	subs	r5, r5, r3
 8005306:	43eb      	mvns	r3, r5
 8005308:	17db      	asrs	r3, r3, #31
 800530a:	401d      	ands	r5, r3
 800530c:	68a3      	ldr	r3, [r4, #8]
 800530e:	6922      	ldr	r2, [r4, #16]
 8005310:	4293      	cmp	r3, r2
 8005312:	dd01      	ble.n	8005318 <_printf_common+0x80>
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	18ed      	adds	r5, r5, r3
 8005318:	2600      	movs	r6, #0
 800531a:	42b5      	cmp	r5, r6
 800531c:	d120      	bne.n	8005360 <_printf_common+0xc8>
 800531e:	2000      	movs	r0, #0
 8005320:	e010      	b.n	8005344 <_printf_common+0xac>
 8005322:	3501      	adds	r5, #1
 8005324:	68e3      	ldr	r3, [r4, #12]
 8005326:	6832      	ldr	r2, [r6, #0]
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	42ab      	cmp	r3, r5
 800532c:	ddd2      	ble.n	80052d4 <_printf_common+0x3c>
 800532e:	0022      	movs	r2, r4
 8005330:	2301      	movs	r3, #1
 8005332:	9901      	ldr	r1, [sp, #4]
 8005334:	9800      	ldr	r0, [sp, #0]
 8005336:	9f08      	ldr	r7, [sp, #32]
 8005338:	3219      	adds	r2, #25
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	d1f0      	bne.n	8005322 <_printf_common+0x8a>
 8005340:	2001      	movs	r0, #1
 8005342:	4240      	negs	r0, r0
 8005344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005346:	2030      	movs	r0, #48	@ 0x30
 8005348:	18e1      	adds	r1, r4, r3
 800534a:	3143      	adds	r1, #67	@ 0x43
 800534c:	7008      	strb	r0, [r1, #0]
 800534e:	0021      	movs	r1, r4
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	3145      	adds	r1, #69	@ 0x45
 8005354:	7809      	ldrb	r1, [r1, #0]
 8005356:	18a2      	adds	r2, r4, r2
 8005358:	3243      	adds	r2, #67	@ 0x43
 800535a:	3302      	adds	r3, #2
 800535c:	7011      	strb	r1, [r2, #0]
 800535e:	e7c1      	b.n	80052e4 <_printf_common+0x4c>
 8005360:	0022      	movs	r2, r4
 8005362:	2301      	movs	r3, #1
 8005364:	9901      	ldr	r1, [sp, #4]
 8005366:	9800      	ldr	r0, [sp, #0]
 8005368:	9f08      	ldr	r7, [sp, #32]
 800536a:	321a      	adds	r2, #26
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	d0e6      	beq.n	8005340 <_printf_common+0xa8>
 8005372:	3601      	adds	r6, #1
 8005374:	e7d1      	b.n	800531a <_printf_common+0x82>
	...

08005378 <_printf_i>:
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	b08b      	sub	sp, #44	@ 0x2c
 800537c:	9206      	str	r2, [sp, #24]
 800537e:	000a      	movs	r2, r1
 8005380:	3243      	adds	r2, #67	@ 0x43
 8005382:	9307      	str	r3, [sp, #28]
 8005384:	9005      	str	r0, [sp, #20]
 8005386:	9203      	str	r2, [sp, #12]
 8005388:	7e0a      	ldrb	r2, [r1, #24]
 800538a:	000c      	movs	r4, r1
 800538c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800538e:	2a78      	cmp	r2, #120	@ 0x78
 8005390:	d809      	bhi.n	80053a6 <_printf_i+0x2e>
 8005392:	2a62      	cmp	r2, #98	@ 0x62
 8005394:	d80b      	bhi.n	80053ae <_printf_i+0x36>
 8005396:	2a00      	cmp	r2, #0
 8005398:	d100      	bne.n	800539c <_printf_i+0x24>
 800539a:	e0bc      	b.n	8005516 <_printf_i+0x19e>
 800539c:	497b      	ldr	r1, [pc, #492]	@ (800558c <_printf_i+0x214>)
 800539e:	9104      	str	r1, [sp, #16]
 80053a0:	2a58      	cmp	r2, #88	@ 0x58
 80053a2:	d100      	bne.n	80053a6 <_printf_i+0x2e>
 80053a4:	e090      	b.n	80054c8 <_printf_i+0x150>
 80053a6:	0025      	movs	r5, r4
 80053a8:	3542      	adds	r5, #66	@ 0x42
 80053aa:	702a      	strb	r2, [r5, #0]
 80053ac:	e022      	b.n	80053f4 <_printf_i+0x7c>
 80053ae:	0010      	movs	r0, r2
 80053b0:	3863      	subs	r0, #99	@ 0x63
 80053b2:	2815      	cmp	r0, #21
 80053b4:	d8f7      	bhi.n	80053a6 <_printf_i+0x2e>
 80053b6:	f7fa fea5 	bl	8000104 <__gnu_thumb1_case_shi>
 80053ba:	0016      	.short	0x0016
 80053bc:	fff6001f 	.word	0xfff6001f
 80053c0:	fff6fff6 	.word	0xfff6fff6
 80053c4:	001ffff6 	.word	0x001ffff6
 80053c8:	fff6fff6 	.word	0xfff6fff6
 80053cc:	fff6fff6 	.word	0xfff6fff6
 80053d0:	003600a1 	.word	0x003600a1
 80053d4:	fff60080 	.word	0xfff60080
 80053d8:	00b2fff6 	.word	0x00b2fff6
 80053dc:	0036fff6 	.word	0x0036fff6
 80053e0:	fff6fff6 	.word	0xfff6fff6
 80053e4:	0084      	.short	0x0084
 80053e6:	0025      	movs	r5, r4
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	3542      	adds	r5, #66	@ 0x42
 80053ec:	1d11      	adds	r1, r2, #4
 80053ee:	6019      	str	r1, [r3, #0]
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	702b      	strb	r3, [r5, #0]
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0a0      	b.n	800553a <_printf_i+0x1c2>
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	6809      	ldr	r1, [r1, #0]
 80053fc:	1d02      	adds	r2, r0, #4
 80053fe:	060d      	lsls	r5, r1, #24
 8005400:	d50b      	bpl.n	800541a <_printf_i+0xa2>
 8005402:	6806      	ldr	r6, [r0, #0]
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	2e00      	cmp	r6, #0
 8005408:	da03      	bge.n	8005412 <_printf_i+0x9a>
 800540a:	232d      	movs	r3, #45	@ 0x2d
 800540c:	9a03      	ldr	r2, [sp, #12]
 800540e:	4276      	negs	r6, r6
 8005410:	7013      	strb	r3, [r2, #0]
 8005412:	4b5e      	ldr	r3, [pc, #376]	@ (800558c <_printf_i+0x214>)
 8005414:	270a      	movs	r7, #10
 8005416:	9304      	str	r3, [sp, #16]
 8005418:	e018      	b.n	800544c <_printf_i+0xd4>
 800541a:	6806      	ldr	r6, [r0, #0]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	0649      	lsls	r1, r1, #25
 8005420:	d5f1      	bpl.n	8005406 <_printf_i+0x8e>
 8005422:	b236      	sxth	r6, r6
 8005424:	e7ef      	b.n	8005406 <_printf_i+0x8e>
 8005426:	6808      	ldr	r0, [r1, #0]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	c940      	ldmia	r1!, {r6}
 800542c:	0605      	lsls	r5, r0, #24
 800542e:	d402      	bmi.n	8005436 <_printf_i+0xbe>
 8005430:	0640      	lsls	r0, r0, #25
 8005432:	d500      	bpl.n	8005436 <_printf_i+0xbe>
 8005434:	b2b6      	uxth	r6, r6
 8005436:	6019      	str	r1, [r3, #0]
 8005438:	4b54      	ldr	r3, [pc, #336]	@ (800558c <_printf_i+0x214>)
 800543a:	270a      	movs	r7, #10
 800543c:	9304      	str	r3, [sp, #16]
 800543e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005440:	d100      	bne.n	8005444 <_printf_i+0xcc>
 8005442:	3f02      	subs	r7, #2
 8005444:	0023      	movs	r3, r4
 8005446:	2200      	movs	r2, #0
 8005448:	3343      	adds	r3, #67	@ 0x43
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	db03      	blt.n	800545c <_printf_i+0xe4>
 8005454:	2104      	movs	r1, #4
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	438a      	bics	r2, r1
 800545a:	6022      	str	r2, [r4, #0]
 800545c:	2e00      	cmp	r6, #0
 800545e:	d102      	bne.n	8005466 <_printf_i+0xee>
 8005460:	9d03      	ldr	r5, [sp, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <_printf_i+0x108>
 8005466:	9d03      	ldr	r5, [sp, #12]
 8005468:	0030      	movs	r0, r6
 800546a:	0039      	movs	r1, r7
 800546c:	f7fa feda 	bl	8000224 <__aeabi_uidivmod>
 8005470:	9b04      	ldr	r3, [sp, #16]
 8005472:	3d01      	subs	r5, #1
 8005474:	5c5b      	ldrb	r3, [r3, r1]
 8005476:	702b      	strb	r3, [r5, #0]
 8005478:	0033      	movs	r3, r6
 800547a:	0006      	movs	r6, r0
 800547c:	429f      	cmp	r7, r3
 800547e:	d9f3      	bls.n	8005468 <_printf_i+0xf0>
 8005480:	2f08      	cmp	r7, #8
 8005482:	d109      	bne.n	8005498 <_printf_i+0x120>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	07db      	lsls	r3, r3, #31
 8005488:	d506      	bpl.n	8005498 <_printf_i+0x120>
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	dc02      	bgt.n	8005498 <_printf_i+0x120>
 8005492:	2330      	movs	r3, #48	@ 0x30
 8005494:	3d01      	subs	r5, #1
 8005496:	702b      	strb	r3, [r5, #0]
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	1b5b      	subs	r3, r3, r5
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	9b07      	ldr	r3, [sp, #28]
 80054a0:	0021      	movs	r1, r4
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	9805      	ldr	r0, [sp, #20]
 80054a6:	9b06      	ldr	r3, [sp, #24]
 80054a8:	aa09      	add	r2, sp, #36	@ 0x24
 80054aa:	f7ff fef5 	bl	8005298 <_printf_common>
 80054ae:	3001      	adds	r0, #1
 80054b0:	d148      	bne.n	8005544 <_printf_i+0x1cc>
 80054b2:	2001      	movs	r0, #1
 80054b4:	4240      	negs	r0, r0
 80054b6:	b00b      	add	sp, #44	@ 0x2c
 80054b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ba:	2220      	movs	r2, #32
 80054bc:	6809      	ldr	r1, [r1, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	6022      	str	r2, [r4, #0]
 80054c2:	2278      	movs	r2, #120	@ 0x78
 80054c4:	4932      	ldr	r1, [pc, #200]	@ (8005590 <_printf_i+0x218>)
 80054c6:	9104      	str	r1, [sp, #16]
 80054c8:	0021      	movs	r1, r4
 80054ca:	3145      	adds	r1, #69	@ 0x45
 80054cc:	700a      	strb	r2, [r1, #0]
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	c940      	ldmia	r1!, {r6}
 80054d4:	0610      	lsls	r0, r2, #24
 80054d6:	d402      	bmi.n	80054de <_printf_i+0x166>
 80054d8:	0650      	lsls	r0, r2, #25
 80054da:	d500      	bpl.n	80054de <_printf_i+0x166>
 80054dc:	b2b6      	uxth	r6, r6
 80054de:	6019      	str	r1, [r3, #0]
 80054e0:	07d3      	lsls	r3, r2, #31
 80054e2:	d502      	bpl.n	80054ea <_printf_i+0x172>
 80054e4:	2320      	movs	r3, #32
 80054e6:	4313      	orrs	r3, r2
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	d001      	beq.n	80054f2 <_printf_i+0x17a>
 80054ee:	2710      	movs	r7, #16
 80054f0:	e7a8      	b.n	8005444 <_printf_i+0xcc>
 80054f2:	2220      	movs	r2, #32
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	4393      	bics	r3, r2
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	e7f8      	b.n	80054ee <_printf_i+0x176>
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	680d      	ldr	r5, [r1, #0]
 8005500:	1d10      	adds	r0, r2, #4
 8005502:	6949      	ldr	r1, [r1, #20]
 8005504:	6018      	str	r0, [r3, #0]
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	062e      	lsls	r6, r5, #24
 800550a:	d501      	bpl.n	8005510 <_printf_i+0x198>
 800550c:	6019      	str	r1, [r3, #0]
 800550e:	e002      	b.n	8005516 <_printf_i+0x19e>
 8005510:	066d      	lsls	r5, r5, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0x194>
 8005514:	8019      	strh	r1, [r3, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	9d03      	ldr	r5, [sp, #12]
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	e7bf      	b.n	800549e <_printf_i+0x126>
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	1d11      	adds	r1, r2, #4
 8005522:	6019      	str	r1, [r3, #0]
 8005524:	6815      	ldr	r5, [r2, #0]
 8005526:	2100      	movs	r1, #0
 8005528:	0028      	movs	r0, r5
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	f000 f986 	bl	800583c <memchr>
 8005530:	2800      	cmp	r0, #0
 8005532:	d001      	beq.n	8005538 <_printf_i+0x1c0>
 8005534:	1b40      	subs	r0, r0, r5
 8005536:	6060      	str	r0, [r4, #4]
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	6123      	str	r3, [r4, #16]
 800553c:	2300      	movs	r3, #0
 800553e:	9a03      	ldr	r2, [sp, #12]
 8005540:	7013      	strb	r3, [r2, #0]
 8005542:	e7ac      	b.n	800549e <_printf_i+0x126>
 8005544:	002a      	movs	r2, r5
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	9906      	ldr	r1, [sp, #24]
 800554a:	9805      	ldr	r0, [sp, #20]
 800554c:	9d07      	ldr	r5, [sp, #28]
 800554e:	47a8      	blx	r5
 8005550:	3001      	adds	r0, #1
 8005552:	d0ae      	beq.n	80054b2 <_printf_i+0x13a>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	079b      	lsls	r3, r3, #30
 8005558:	d415      	bmi.n	8005586 <_printf_i+0x20e>
 800555a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800555c:	68e0      	ldr	r0, [r4, #12]
 800555e:	4298      	cmp	r0, r3
 8005560:	daa9      	bge.n	80054b6 <_printf_i+0x13e>
 8005562:	0018      	movs	r0, r3
 8005564:	e7a7      	b.n	80054b6 <_printf_i+0x13e>
 8005566:	0022      	movs	r2, r4
 8005568:	2301      	movs	r3, #1
 800556a:	9906      	ldr	r1, [sp, #24]
 800556c:	9805      	ldr	r0, [sp, #20]
 800556e:	9e07      	ldr	r6, [sp, #28]
 8005570:	3219      	adds	r2, #25
 8005572:	47b0      	blx	r6
 8005574:	3001      	adds	r0, #1
 8005576:	d09c      	beq.n	80054b2 <_printf_i+0x13a>
 8005578:	3501      	adds	r5, #1
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	42ab      	cmp	r3, r5
 8005582:	dcf0      	bgt.n	8005566 <_printf_i+0x1ee>
 8005584:	e7e9      	b.n	800555a <_printf_i+0x1e2>
 8005586:	2500      	movs	r5, #0
 8005588:	e7f7      	b.n	800557a <_printf_i+0x202>
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	08005f19 	.word	0x08005f19
 8005590:	08005f2a 	.word	0x08005f2a

08005594 <__sflush_r>:
 8005594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005596:	220c      	movs	r2, #12
 8005598:	5e8b      	ldrsh	r3, [r1, r2]
 800559a:	0005      	movs	r5, r0
 800559c:	000c      	movs	r4, r1
 800559e:	071a      	lsls	r2, r3, #28
 80055a0:	d456      	bmi.n	8005650 <__sflush_r+0xbc>
 80055a2:	684a      	ldr	r2, [r1, #4]
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	dc02      	bgt.n	80055ae <__sflush_r+0x1a>
 80055a8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	dd4e      	ble.n	800564c <__sflush_r+0xb8>
 80055ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	d04b      	beq.n	800564c <__sflush_r+0xb8>
 80055b4:	2200      	movs	r2, #0
 80055b6:	2080      	movs	r0, #128	@ 0x80
 80055b8:	682e      	ldr	r6, [r5, #0]
 80055ba:	602a      	str	r2, [r5, #0]
 80055bc:	001a      	movs	r2, r3
 80055be:	0140      	lsls	r0, r0, #5
 80055c0:	6a21      	ldr	r1, [r4, #32]
 80055c2:	4002      	ands	r2, r0
 80055c4:	4203      	tst	r3, r0
 80055c6:	d033      	beq.n	8005630 <__sflush_r+0x9c>
 80055c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	075b      	lsls	r3, r3, #29
 80055ce:	d506      	bpl.n	80055de <__sflush_r+0x4a>
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	1ad2      	subs	r2, r2, r3
 80055d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <__sflush_r+0x4a>
 80055da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055dc:	1ad2      	subs	r2, r2, r3
 80055de:	2300      	movs	r3, #0
 80055e0:	0028      	movs	r0, r5
 80055e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80055e4:	6a21      	ldr	r1, [r4, #32]
 80055e6:	47b8      	blx	r7
 80055e8:	89a2      	ldrh	r2, [r4, #12]
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	d106      	bne.n	80055fc <__sflush_r+0x68>
 80055ee:	6829      	ldr	r1, [r5, #0]
 80055f0:	291d      	cmp	r1, #29
 80055f2:	d846      	bhi.n	8005682 <__sflush_r+0xee>
 80055f4:	4b29      	ldr	r3, [pc, #164]	@ (800569c <__sflush_r+0x108>)
 80055f6:	410b      	asrs	r3, r1
 80055f8:	07db      	lsls	r3, r3, #31
 80055fa:	d442      	bmi.n	8005682 <__sflush_r+0xee>
 80055fc:	2300      	movs	r3, #0
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	04d2      	lsls	r2, r2, #19
 8005606:	d505      	bpl.n	8005614 <__sflush_r+0x80>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <__sflush_r+0x7e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d100      	bne.n	8005614 <__sflush_r+0x80>
 8005612:	6560      	str	r0, [r4, #84]	@ 0x54
 8005614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005616:	602e      	str	r6, [r5, #0]
 8005618:	2900      	cmp	r1, #0
 800561a:	d017      	beq.n	800564c <__sflush_r+0xb8>
 800561c:	0023      	movs	r3, r4
 800561e:	3344      	adds	r3, #68	@ 0x44
 8005620:	4299      	cmp	r1, r3
 8005622:	d002      	beq.n	800562a <__sflush_r+0x96>
 8005624:	0028      	movs	r0, r5
 8005626:	f7ff fbf7 	bl	8004e18 <_free_r>
 800562a:	2300      	movs	r3, #0
 800562c:	6363      	str	r3, [r4, #52]	@ 0x34
 800562e:	e00d      	b.n	800564c <__sflush_r+0xb8>
 8005630:	2301      	movs	r3, #1
 8005632:	0028      	movs	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	0002      	movs	r2, r0
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d1c6      	bne.n	80055ca <__sflush_r+0x36>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0c3      	beq.n	80055ca <__sflush_r+0x36>
 8005642:	2b1d      	cmp	r3, #29
 8005644:	d001      	beq.n	800564a <__sflush_r+0xb6>
 8005646:	2b16      	cmp	r3, #22
 8005648:	d11a      	bne.n	8005680 <__sflush_r+0xec>
 800564a:	602e      	str	r6, [r5, #0]
 800564c:	2000      	movs	r0, #0
 800564e:	e01e      	b.n	800568e <__sflush_r+0xfa>
 8005650:	690e      	ldr	r6, [r1, #16]
 8005652:	2e00      	cmp	r6, #0
 8005654:	d0fa      	beq.n	800564c <__sflush_r+0xb8>
 8005656:	680f      	ldr	r7, [r1, #0]
 8005658:	600e      	str	r6, [r1, #0]
 800565a:	1bba      	subs	r2, r7, r6
 800565c:	9201      	str	r2, [sp, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	079b      	lsls	r3, r3, #30
 8005662:	d100      	bne.n	8005666 <__sflush_r+0xd2>
 8005664:	694a      	ldr	r2, [r1, #20]
 8005666:	60a2      	str	r2, [r4, #8]
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	ddee      	ble.n	800564c <__sflush_r+0xb8>
 800566e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005670:	0032      	movs	r2, r6
 8005672:	001f      	movs	r7, r3
 8005674:	0028      	movs	r0, r5
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	6a21      	ldr	r1, [r4, #32]
 800567a:	47b8      	blx	r7
 800567c:	2800      	cmp	r0, #0
 800567e:	dc07      	bgt.n	8005690 <__sflush_r+0xfc>
 8005680:	89a2      	ldrh	r2, [r4, #12]
 8005682:	2340      	movs	r3, #64	@ 0x40
 8005684:	2001      	movs	r0, #1
 8005686:	4313      	orrs	r3, r2
 8005688:	b21b      	sxth	r3, r3
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	4240      	negs	r0, r0
 800568e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	1836      	adds	r6, r6, r0
 8005694:	1a1b      	subs	r3, r3, r0
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	e7e6      	b.n	8005668 <__sflush_r+0xd4>
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	dfbffffe 	.word	0xdfbffffe

080056a0 <_fflush_r>:
 80056a0:	690b      	ldr	r3, [r1, #16]
 80056a2:	b570      	push	{r4, r5, r6, lr}
 80056a4:	0005      	movs	r5, r0
 80056a6:	000c      	movs	r4, r1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <_fflush_r+0x12>
 80056ac:	2500      	movs	r5, #0
 80056ae:	0028      	movs	r0, r5
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d004      	beq.n	80056c0 <_fflush_r+0x20>
 80056b6:	6a03      	ldr	r3, [r0, #32]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <_fflush_r+0x20>
 80056bc:	f7ff f998 	bl	80049f0 <__sinit>
 80056c0:	220c      	movs	r2, #12
 80056c2:	5ea3      	ldrsh	r3, [r4, r2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f1      	beq.n	80056ac <_fflush_r+0xc>
 80056c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056ca:	07d2      	lsls	r2, r2, #31
 80056cc:	d404      	bmi.n	80056d8 <_fflush_r+0x38>
 80056ce:	059b      	lsls	r3, r3, #22
 80056d0:	d402      	bmi.n	80056d8 <_fflush_r+0x38>
 80056d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056d4:	f7ff fb9d 	bl	8004e12 <__retarget_lock_acquire_recursive>
 80056d8:	0028      	movs	r0, r5
 80056da:	0021      	movs	r1, r4
 80056dc:	f7ff ff5a 	bl	8005594 <__sflush_r>
 80056e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056e2:	0005      	movs	r5, r0
 80056e4:	07db      	lsls	r3, r3, #31
 80056e6:	d4e2      	bmi.n	80056ae <_fflush_r+0xe>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	059b      	lsls	r3, r3, #22
 80056ec:	d4df      	bmi.n	80056ae <_fflush_r+0xe>
 80056ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056f0:	f7ff fb90 	bl	8004e14 <__retarget_lock_release_recursive>
 80056f4:	e7db      	b.n	80056ae <_fflush_r+0xe>
	...

080056f8 <__swhatbuf_r>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	000e      	movs	r6, r1
 80056fc:	001d      	movs	r5, r3
 80056fe:	230e      	movs	r3, #14
 8005700:	5ec9      	ldrsh	r1, [r1, r3]
 8005702:	0014      	movs	r4, r2
 8005704:	b096      	sub	sp, #88	@ 0x58
 8005706:	2900      	cmp	r1, #0
 8005708:	da0c      	bge.n	8005724 <__swhatbuf_r+0x2c>
 800570a:	89b2      	ldrh	r2, [r6, #12]
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	0011      	movs	r1, r2
 8005710:	4019      	ands	r1, r3
 8005712:	421a      	tst	r2, r3
 8005714:	d114      	bne.n	8005740 <__swhatbuf_r+0x48>
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	2000      	movs	r0, #0
 800571c:	6029      	str	r1, [r5, #0]
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	b016      	add	sp, #88	@ 0x58
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	466a      	mov	r2, sp
 8005726:	f000 f853 	bl	80057d0 <_fstat_r>
 800572a:	2800      	cmp	r0, #0
 800572c:	dbed      	blt.n	800570a <__swhatbuf_r+0x12>
 800572e:	23f0      	movs	r3, #240	@ 0xf0
 8005730:	9901      	ldr	r1, [sp, #4]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	4019      	ands	r1, r3
 8005736:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <__swhatbuf_r+0x50>)
 8005738:	18c9      	adds	r1, r1, r3
 800573a:	424b      	negs	r3, r1
 800573c:	4159      	adcs	r1, r3
 800573e:	e7ea      	b.n	8005716 <__swhatbuf_r+0x1e>
 8005740:	2100      	movs	r1, #0
 8005742:	2340      	movs	r3, #64	@ 0x40
 8005744:	e7e9      	b.n	800571a <__swhatbuf_r+0x22>
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	ffffe000 	.word	0xffffe000

0800574c <__smakebuf_r>:
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	2602      	movs	r6, #2
 8005750:	898b      	ldrh	r3, [r1, #12]
 8005752:	0005      	movs	r5, r0
 8005754:	000c      	movs	r4, r1
 8005756:	b085      	sub	sp, #20
 8005758:	4233      	tst	r3, r6
 800575a:	d007      	beq.n	800576c <__smakebuf_r+0x20>
 800575c:	0023      	movs	r3, r4
 800575e:	3347      	adds	r3, #71	@ 0x47
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	2301      	movs	r3, #1
 8005766:	6163      	str	r3, [r4, #20]
 8005768:	b005      	add	sp, #20
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576c:	ab03      	add	r3, sp, #12
 800576e:	aa02      	add	r2, sp, #8
 8005770:	f7ff ffc2 	bl	80056f8 <__swhatbuf_r>
 8005774:	9f02      	ldr	r7, [sp, #8]
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	0039      	movs	r1, r7
 800577a:	0028      	movs	r0, r5
 800577c:	f7ff fbb8 	bl	8004ef0 <_malloc_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	d108      	bne.n	8005796 <__smakebuf_r+0x4a>
 8005784:	220c      	movs	r2, #12
 8005786:	5ea3      	ldrsh	r3, [r4, r2]
 8005788:	059a      	lsls	r2, r3, #22
 800578a:	d4ed      	bmi.n	8005768 <__smakebuf_r+0x1c>
 800578c:	2203      	movs	r2, #3
 800578e:	4393      	bics	r3, r2
 8005790:	431e      	orrs	r6, r3
 8005792:	81a6      	strh	r6, [r4, #12]
 8005794:	e7e2      	b.n	800575c <__smakebuf_r+0x10>
 8005796:	2380      	movs	r3, #128	@ 0x80
 8005798:	89a2      	ldrh	r2, [r4, #12]
 800579a:	6020      	str	r0, [r4, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	6120      	str	r0, [r4, #16]
 80057a4:	6167      	str	r7, [r4, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00c      	beq.n	80057c4 <__smakebuf_r+0x78>
 80057aa:	0028      	movs	r0, r5
 80057ac:	230e      	movs	r3, #14
 80057ae:	5ee1      	ldrsh	r1, [r4, r3]
 80057b0:	f000 f820 	bl	80057f4 <_isatty_r>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d005      	beq.n	80057c4 <__smakebuf_r+0x78>
 80057b8:	2303      	movs	r3, #3
 80057ba:	89a2      	ldrh	r2, [r4, #12]
 80057bc:	439a      	bics	r2, r3
 80057be:	3b02      	subs	r3, #2
 80057c0:	4313      	orrs	r3, r2
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	9a01      	ldr	r2, [sp, #4]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	e7cc      	b.n	8005768 <__smakebuf_r+0x1c>
	...

080057d0 <_fstat_r>:
 80057d0:	2300      	movs	r3, #0
 80057d2:	b570      	push	{r4, r5, r6, lr}
 80057d4:	4d06      	ldr	r5, [pc, #24]	@ (80057f0 <_fstat_r+0x20>)
 80057d6:	0004      	movs	r4, r0
 80057d8:	0008      	movs	r0, r1
 80057da:	0011      	movs	r1, r2
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f7fb ff05 	bl	80015ec <_fstat>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d103      	bne.n	80057ee <_fstat_r+0x1e>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d000      	beq.n	80057ee <_fstat_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	200002c8 	.word	0x200002c8

080057f4 <_isatty_r>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	4d06      	ldr	r5, [pc, #24]	@ (8005814 <_isatty_r+0x20>)
 80057fa:	0004      	movs	r4, r0
 80057fc:	0008      	movs	r0, r1
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	f7fb ff02 	bl	8001608 <_isatty>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d103      	bne.n	8005810 <_isatty_r+0x1c>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d000      	beq.n	8005810 <_isatty_r+0x1c>
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	46c0      	nop			@ (mov r8, r8)
 8005814:	200002c8 	.word	0x200002c8

08005818 <_sbrk_r>:
 8005818:	2300      	movs	r3, #0
 800581a:	b570      	push	{r4, r5, r6, lr}
 800581c:	4d06      	ldr	r5, [pc, #24]	@ (8005838 <_sbrk_r+0x20>)
 800581e:	0004      	movs	r4, r0
 8005820:	0008      	movs	r0, r1
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	f7fb ff04 	bl	8001630 <_sbrk>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d103      	bne.n	8005834 <_sbrk_r+0x1c>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d000      	beq.n	8005834 <_sbrk_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	200002c8 	.word	0x200002c8

0800583c <memchr>:
 800583c:	b2c9      	uxtb	r1, r1
 800583e:	1882      	adds	r2, r0, r2
 8005840:	4290      	cmp	r0, r2
 8005842:	d101      	bne.n	8005848 <memchr+0xc>
 8005844:	2000      	movs	r0, #0
 8005846:	4770      	bx	lr
 8005848:	7803      	ldrb	r3, [r0, #0]
 800584a:	428b      	cmp	r3, r1
 800584c:	d0fb      	beq.n	8005846 <memchr+0xa>
 800584e:	3001      	adds	r0, #1
 8005850:	e7f6      	b.n	8005840 <memchr+0x4>
	...

08005854 <_init>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr

08005860 <_fini>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr
